// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_orders.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StorageOrderForm struct {
	Number               []byte   `protobuf:"bytes,1,opt,name=Number,proto3" json:"Number,omitempty"`
	PreNumber            []byte   `protobuf:"bytes,2,opt,name=PreNumber,proto3" json:"PreNumber,omitempty"`
	UserAddr             []byte   `protobuf:"bytes,3,opt,name=UserAddr,proto3" json:"UserAddr,omitempty"`
	ServerAddr           []byte   `protobuf:"bytes,4,opt,name=ServerAddr,proto3" json:"ServerAddr,omitempty"`
	ServerAddrCoin       []byte   `protobuf:"bytes,5,opt,name=ServerAddrCoin,proto3" json:"ServerAddrCoin,omitempty"`
	SpaceTotal           uint64   `protobuf:"varint,6,opt,name=SpaceTotal,proto3" json:"SpaceTotal,omitempty"`
	UseTime              uint64   `protobuf:"varint,7,opt,name=UseTime,proto3" json:"UseTime,omitempty"`
	TotalPrice           uint64   `protobuf:"varint,8,opt,name=TotalPrice,proto3" json:"TotalPrice,omitempty"`
	ChainTx              []byte   `protobuf:"bytes,9,opt,name=ChainTx,proto3" json:"ChainTx,omitempty"`
	TxHash               []byte   `protobuf:"bytes,10,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	CreateTime           int64    `protobuf:"varint,11,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	TimeOut              int64    `protobuf:"varint,12,opt,name=TimeOut,proto3" json:"TimeOut,omitempty"`
	GoodsId              []byte   `protobuf:"bytes,13,opt,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	PayLockBlockHeight   uint64   `protobuf:"varint,14,opt,name=PayLockBlockHeight,proto3" json:"PayLockBlockHeight,omitempty"`
	LockHeightOnChain    uint64   `protobuf:"varint,15,opt,name=LockHeightOnChain,proto3" json:"LockHeightOnChain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageOrderForm) Reset()         { *m = StorageOrderForm{} }
func (m *StorageOrderForm) String() string { return proto.CompactTextString(m) }
func (*StorageOrderForm) ProtoMessage()    {}
func (*StorageOrderForm) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1246a36cdeedd83, []int{0}
}
func (m *StorageOrderForm) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageOrderForm) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageOrderForm.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageOrderForm) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageOrderForm.Merge(m, src)
}
func (m *StorageOrderForm) XXX_Size() int {
	return m.Size()
}
func (m *StorageOrderForm) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageOrderForm.DiscardUnknown(m)
}

var xxx_messageInfo_StorageOrderForm proto.InternalMessageInfo

func (m *StorageOrderForm) GetNumber() []byte {
	if m != nil {
		return m.Number
	}
	return nil
}

func (m *StorageOrderForm) GetPreNumber() []byte {
	if m != nil {
		return m.PreNumber
	}
	return nil
}

func (m *StorageOrderForm) GetUserAddr() []byte {
	if m != nil {
		return m.UserAddr
	}
	return nil
}

func (m *StorageOrderForm) GetServerAddr() []byte {
	if m != nil {
		return m.ServerAddr
	}
	return nil
}

func (m *StorageOrderForm) GetServerAddrCoin() []byte {
	if m != nil {
		return m.ServerAddrCoin
	}
	return nil
}

func (m *StorageOrderForm) GetSpaceTotal() uint64 {
	if m != nil {
		return m.SpaceTotal
	}
	return 0
}

func (m *StorageOrderForm) GetUseTime() uint64 {
	if m != nil {
		return m.UseTime
	}
	return 0
}

func (m *StorageOrderForm) GetTotalPrice() uint64 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *StorageOrderForm) GetChainTx() []byte {
	if m != nil {
		return m.ChainTx
	}
	return nil
}

func (m *StorageOrderForm) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *StorageOrderForm) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *StorageOrderForm) GetTimeOut() int64 {
	if m != nil {
		return m.TimeOut
	}
	return 0
}

func (m *StorageOrderForm) GetGoodsId() []byte {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *StorageOrderForm) GetPayLockBlockHeight() uint64 {
	if m != nil {
		return m.PayLockBlockHeight
	}
	return 0
}

func (m *StorageOrderForm) GetLockHeightOnChain() uint64 {
	if m != nil {
		return m.LockHeightOnChain
	}
	return 0
}

func init() {
	proto.RegisterType((*StorageOrderForm)(nil), "go_protos.StorageOrderForm")
}

func init() { proto.RegisterFile("storage_orders.proto", fileDescriptor_d1246a36cdeedd83) }

var fileDescriptor_d1246a36cdeedd83 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0xcb, 0x4e, 0x32, 0x31,
	0x14, 0xc7, 0xbf, 0x7e, 0x20, 0x97, 0x82, 0xa8, 0x8d, 0x31, 0x27, 0x46, 0x27, 0xc4, 0x85, 0x61,
	0x61, 0x70, 0xe1, 0x13, 0x08, 0x89, 0x62, 0x42, 0x84, 0xc0, 0xb0, 0x71, 0x43, 0xca, 0x4c, 0x03,
	0x13, 0x2e, 0x25, 0xa7, 0x83, 0xc1, 0x37, 0xf1, 0x91, 0x5c, 0xfa, 0x08, 0x06, 0x77, 0x3e, 0x85,
	0xe9, 0xe9, 0x70, 0x89, 0xba, 0xea, 0xfc, 0xfe, 0xbf, 0x73, 0x69, 0x9a, 0xe1, 0xc7, 0x26, 0xd6,
	0x28, 0x87, 0xaa, 0xaf, 0x31, 0x54, 0x68, 0xaa, 0x73, 0xd4, 0xb1, 0x16, 0xf9, 0xa1, 0xee, 0xd3,
	0x97, 0xb9, 0xf8, 0x4a, 0xf1, 0xc3, 0xae, 0xab, 0x69, 0xd9, 0x92, 0x3b, 0x8d, 0x53, 0x71, 0xc2,
	0x33, 0x8f, 0x8b, 0xe9, 0x40, 0x21, 0xb0, 0x32, 0xab, 0x14, 0x3b, 0x09, 0x89, 0x33, 0x9e, 0x6f,
	0xa3, 0x4a, 0xd4, 0x7f, 0x52, 0xdb, 0x40, 0x9c, 0xf2, 0x5c, 0xcf, 0x28, 0xbc, 0x0d, 0x43, 0x84,
	0x14, 0xc9, 0x0d, 0x0b, 0x8f, 0xf3, 0xae, 0xc2, 0xe7, 0xc4, 0xa6, 0xc9, 0xee, 0x24, 0xe2, 0x92,
	0x97, 0xb6, 0x54, 0xd7, 0xd1, 0x0c, 0xf6, 0xa8, 0xe6, 0x47, 0x4a, 0x73, 0xe6, 0x32, 0x50, 0xbe,
	0x8e, 0xe5, 0x04, 0x32, 0x65, 0x56, 0x49, 0x77, 0x76, 0x12, 0x01, 0x3c, 0xdb, 0x33, 0xca, 0x8f,
	0xa6, 0x0a, 0xb2, 0x24, 0xd7, 0x68, 0x3b, 0xa9, 0xa4, 0x8d, 0x51, 0xa0, 0x20, 0xe7, 0x3a, 0xb7,
	0x89, 0xed, 0xac, 0x8f, 0x64, 0x34, 0xf3, 0x97, 0x90, 0xa7, 0xd5, 0x6b, 0xb4, 0xaf, 0xe1, 0x2f,
	0x1b, 0xd2, 0x8c, 0x80, 0xbb, 0xd7, 0x70, 0x64, 0x27, 0xd6, 0x51, 0xc9, 0xd8, 0xad, 0x2b, 0x94,
	0x59, 0x25, 0xd5, 0xd9, 0x49, 0xec, 0x44, 0x7b, 0xb6, 0x16, 0x31, 0x14, 0x49, 0xae, 0xd1, 0x9a,
	0x7b, 0xad, 0x43, 0xf3, 0x10, 0xc2, 0xbe, 0xdb, 0x95, 0xa0, 0xa8, 0x72, 0xd1, 0x96, 0x2f, 0x4d,
	0x1d, 0x8c, 0x6b, 0x13, 0x1d, 0x8c, 0x1b, 0x2a, 0x1a, 0x8e, 0x62, 0x28, 0xd1, 0x6d, 0xff, 0x30,
	0xe2, 0x8a, 0x1f, 0x35, 0x37, 0xd4, 0x9a, 0xd1, 0x95, 0xe1, 0x80, 0xca, 0x7f, 0x8b, 0xda, 0xf9,
	0xdb, 0xca, 0x63, 0xef, 0x2b, 0x8f, 0x7d, 0xac, 0x3c, 0xf6, 0xfa, 0xe9, 0xfd, 0x7b, 0x2a, 0x54,
	0xaf, 0x37, 0xff, 0xc2, 0x20, 0x43, 0xe7, 0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4f, 0xb7,
	0xcf, 0xbe, 0x35, 0x02, 0x00, 0x00,
}

func (m *StorageOrderForm) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageOrderForm) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageOrderForm) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockHeightOnChain != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.LockHeightOnChain))
		i--
		dAtA[i] = 0x78
	}
	if m.PayLockBlockHeight != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.PayLockBlockHeight))
		i--
		dAtA[i] = 0x70
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0x6a
	}
	if m.TimeOut != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.TimeOut))
		i--
		dAtA[i] = 0x60
	}
	if m.CreateTime != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x58
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ChainTx) > 0 {
		i -= len(m.ChainTx)
		copy(dAtA[i:], m.ChainTx)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.ChainTx)))
		i--
		dAtA[i] = 0x4a
	}
	if m.TotalPrice != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.TotalPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.UseTime != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.UseTime))
		i--
		dAtA[i] = 0x38
	}
	if m.SpaceTotal != 0 {
		i = encodeVarintStorageOrders(dAtA, i, uint64(m.SpaceTotal))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ServerAddrCoin) > 0 {
		i -= len(m.ServerAddrCoin)
		copy(dAtA[i:], m.ServerAddrCoin)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.ServerAddrCoin)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PreNumber) > 0 {
		i -= len(m.PreNumber)
		copy(dAtA[i:], m.PreNumber)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.PreNumber)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintStorageOrders(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageOrders(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageOrders(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageOrderForm) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	l = len(m.PreNumber)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	l = len(m.ServerAddrCoin)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	if m.SpaceTotal != 0 {
		n += 1 + sovStorageOrders(uint64(m.SpaceTotal))
	}
	if m.UseTime != 0 {
		n += 1 + sovStorageOrders(uint64(m.UseTime))
	}
	if m.TotalPrice != 0 {
		n += 1 + sovStorageOrders(uint64(m.TotalPrice))
	}
	l = len(m.ChainTx)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovStorageOrders(uint64(m.CreateTime))
	}
	if m.TimeOut != 0 {
		n += 1 + sovStorageOrders(uint64(m.TimeOut))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovStorageOrders(uint64(l))
	}
	if m.PayLockBlockHeight != 0 {
		n += 1 + sovStorageOrders(uint64(m.PayLockBlockHeight))
	}
	if m.LockHeightOnChain != 0 {
		n += 1 + sovStorageOrders(uint64(m.LockHeightOnChain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStorageOrders(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageOrders(x uint64) (n int) {
	return sovStorageOrders(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StorageOrderForm) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageOrders
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageOrderForm: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageOrderForm: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = append(m.Number[:0], dAtA[iNdEx:postIndex]...)
			if m.Number == nil {
				m.Number = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreNumber", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreNumber = append(m.PreNumber[:0], dAtA[iNdEx:postIndex]...)
			if m.PreNumber == nil {
				m.PreNumber = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = append(m.UserAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAddr == nil {
				m.UserAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = append(m.ServerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerAddr == nil {
				m.ServerAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddrCoin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddrCoin = append(m.ServerAddrCoin[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerAddrCoin == nil {
				m.ServerAddrCoin = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpaceTotal", wireType)
			}
			m.SpaceTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpaceTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTime", wireType)
			}
			m.UseTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			m.TotalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainTx = append(m.ChainTx[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainTx == nil {
				m.ChainTx = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeOut", wireType)
			}
			m.TimeOut = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeOut |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageOrders
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = append(m.GoodsId[:0], dAtA[iNdEx:postIndex]...)
			if m.GoodsId == nil {
				m.GoodsId = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayLockBlockHeight", wireType)
			}
			m.PayLockBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayLockBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockHeightOnChain", wireType)
			}
			m.LockHeightOnChain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockHeightOnChain |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageOrders(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageOrders
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageOrders(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageOrders
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageOrders
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageOrders
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageOrders
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageOrders
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageOrders        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageOrders          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageOrders = fmt.Errorf("proto: unexpected end of group")
)
