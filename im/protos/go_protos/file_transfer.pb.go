// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: file_transfer.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileTransferTask struct {
	ClassID              uint64   `protobuf:"varint,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	SupplierID           []byte   `protobuf:"bytes,2,opt,name=SupplierID,proto3" json:"SupplierID,omitempty"`
	PullID               []byte   `protobuf:"bytes,3,opt,name=PullID,proto3" json:"PullID,omitempty"`
	RemoteFilePath       string   `protobuf:"bytes,4,opt,name=RemoteFilePath,proto3" json:"RemoteFilePath,omitempty"`
	LocalFilePath        string   `protobuf:"bytes,5,opt,name=LocalFilePath,proto3" json:"LocalFilePath,omitempty"`
	CreateTime           int64    `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	OverTime             int64    `protobuf:"varint,7,opt,name=OverTime,proto3" json:"OverTime,omitempty"`
	ID                   []byte   `protobuf:"bytes,8,opt,name=ID,proto3" json:"ID,omitempty"`
	Version              uint64   `protobuf:"varint,9,opt,name=Version,proto3" json:"Version,omitempty"`
	Name                 string   `protobuf:"bytes,10,opt,name=Name,proto3" json:"Name,omitempty"`
	FileSize             uint64   `protobuf:"varint,11,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	RemoteAddr           []byte   `protobuf:"bytes,12,opt,name=RemoteAddr,proto3" json:"RemoteAddr,omitempty"`
	OffsetIndex          uint64   `protobuf:"varint,13,opt,name=OffsetIndex,proto3" json:"OffsetIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileTransferTask) Reset()         { *m = FileTransferTask{} }
func (m *FileTransferTask) String() string { return proto.CompactTextString(m) }
func (*FileTransferTask) ProtoMessage()    {}
func (*FileTransferTask) Descriptor() ([]byte, []int) {
	return fileDescriptor_a1af68eaa3d01d81, []int{0}
}
func (m *FileTransferTask) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileTransferTask) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileTransferTask.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileTransferTask) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileTransferTask.Merge(m, src)
}
func (m *FileTransferTask) XXX_Size() int {
	return m.Size()
}
func (m *FileTransferTask) XXX_DiscardUnknown() {
	xxx_messageInfo_FileTransferTask.DiscardUnknown(m)
}

var xxx_messageInfo_FileTransferTask proto.InternalMessageInfo

func (m *FileTransferTask) GetClassID() uint64 {
	if m != nil {
		return m.ClassID
	}
	return 0
}

func (m *FileTransferTask) GetSupplierID() []byte {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *FileTransferTask) GetPullID() []byte {
	if m != nil {
		return m.PullID
	}
	return nil
}

func (m *FileTransferTask) GetRemoteFilePath() string {
	if m != nil {
		return m.RemoteFilePath
	}
	return ""
}

func (m *FileTransferTask) GetLocalFilePath() string {
	if m != nil {
		return m.LocalFilePath
	}
	return ""
}

func (m *FileTransferTask) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *FileTransferTask) GetOverTime() int64 {
	if m != nil {
		return m.OverTime
	}
	return 0
}

func (m *FileTransferTask) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *FileTransferTask) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FileTransferTask) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FileTransferTask) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *FileTransferTask) GetRemoteAddr() []byte {
	if m != nil {
		return m.RemoteAddr
	}
	return nil
}

func (m *FileTransferTask) GetOffsetIndex() uint64 {
	if m != nil {
		return m.OffsetIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*FileTransferTask)(nil), "go_protos.FileTransferTask")
}

func init() { proto.RegisterFile("file_transfer.proto", fileDescriptor_a1af68eaa3d01d81) }

var fileDescriptor_a1af68eaa3d01d81 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0x4f, 0x4a, 0x03, 0x31,
	0x14, 0xc6, 0x4d, 0x5b, 0xfb, 0xe7, 0xf5, 0x0f, 0x12, 0x41, 0x1e, 0x82, 0xc3, 0x20, 0x22, 0xb3,
	0xaa, 0x0b, 0x4f, 0xa0, 0x1d, 0x84, 0x01, 0xb1, 0x65, 0x5a, 0x5c, 0xb8, 0x29, 0xd1, 0xbe, 0xd1,
	0xc1, 0xb4, 0x29, 0x49, 0x2a, 0xe2, 0x11, 0x3c, 0x81, 0x47, 0x72, 0xe9, 0x11, 0xa4, 0x5e, 0x44,
	0x92, 0xd6, 0xb1, 0xba, 0xca, 0xfb, 0x7e, 0xef, 0x4b, 0xf2, 0xbd, 0x04, 0x76, 0xb3, 0x5c, 0xd2,
	0xd8, 0x6a, 0x31, 0x33, 0x19, 0xe9, 0xee, 0x5c, 0x2b, 0xab, 0x78, 0xe3, 0x5e, 0x8d, 0x7d, 0x65,
	0x0e, 0x5f, 0xcb, 0xb0, 0x73, 0x91, 0x4b, 0x1a, 0xad, 0x1d, 0x23, 0x61, 0x1e, 0x39, 0x42, 0xad,
	0x27, 0x85, 0x31, 0x49, 0x8c, 0x2c, 0x64, 0x51, 0x25, 0xfd, 0x91, 0x3c, 0x00, 0x18, 0x2e, 0xe6,
	0x73, 0x99, 0x93, 0x4e, 0x62, 0x2c, 0x85, 0x2c, 0x6a, 0xa5, 0x1b, 0x84, 0xef, 0x41, 0x75, 0xb0,
	0x90, 0x32, 0x89, 0xb1, 0xec, 0x7b, 0x6b, 0xc5, 0x8f, 0xa1, 0x93, 0xd2, 0x54, 0x59, 0x72, 0x77,
	0x0d, 0x84, 0x7d, 0xc0, 0x4a, 0xc8, 0xa2, 0x46, 0xfa, 0x8f, 0xf2, 0x23, 0x68, 0x5f, 0xaa, 0x3b,
	0x21, 0x0b, 0xdb, 0xb6, 0xb7, 0xfd, 0x85, 0x2e, 0x45, 0x4f, 0x93, 0xb0, 0x34, 0xca, 0xa7, 0x84,
	0xd5, 0x90, 0x45, 0xe5, 0x74, 0x83, 0xf0, 0x7d, 0xa8, 0xf7, 0x9f, 0x48, 0xfb, 0x6e, 0xcd, 0x77,
	0x0b, 0xcd, 0x3b, 0x50, 0x4a, 0x62, 0xac, 0xfb, 0x74, 0xa5, 0x24, 0x76, 0xb3, 0x5e, 0x93, 0x36,
	0xb9, 0x9a, 0x61, 0x63, 0x35, 0xeb, 0x5a, 0x72, 0x0e, 0x95, 0x2b, 0x31, 0x25, 0x04, 0x1f, 0xc1,
	0xd7, 0xee, 0x64, 0x97, 0x62, 0x98, 0xbf, 0x10, 0x36, 0xbd, 0xbd, 0xd0, 0x2e, 0xd5, 0x6a, 0x9a,
	0xb3, 0xc9, 0x44, 0x63, 0x6b, 0xf5, 0x36, 0xbf, 0x84, 0x87, 0xd0, 0xec, 0x67, 0x99, 0x21, 0x9b,
	0xcc, 0x26, 0xf4, 0x8c, 0x6d, 0xbf, 0x7d, 0x13, 0x9d, 0x1f, 0xbc, 0x2f, 0x03, 0xf6, 0xb1, 0x0c,
	0xd8, 0xe7, 0x32, 0x60, 0x6f, 0x5f, 0xc1, 0xd6, 0x4d, 0xb3, 0x7b, 0x52, 0xfc, 0xd5, 0x6d, 0xd5,
	0xaf, 0xa7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x9b, 0x45, 0xb6, 0x28, 0xd4, 0x01, 0x00, 0x00,
}

func (m *FileTransferTask) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileTransferTask) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileTransferTask) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OffsetIndex != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.OffsetIndex))
		i--
		dAtA[i] = 0x68
	}
	if len(m.RemoteAddr) > 0 {
		i -= len(m.RemoteAddr)
		copy(dAtA[i:], m.RemoteAddr)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.RemoteAddr)))
		i--
		dAtA[i] = 0x62
	}
	if m.FileSize != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x52
	}
	if m.Version != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x42
	}
	if m.OverTime != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.OverTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if len(m.LocalFilePath) > 0 {
		i -= len(m.LocalFilePath)
		copy(dAtA[i:], m.LocalFilePath)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.LocalFilePath)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RemoteFilePath) > 0 {
		i -= len(m.RemoteFilePath)
		copy(dAtA[i:], m.RemoteFilePath)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.RemoteFilePath)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PullID) > 0 {
		i -= len(m.PullID)
		copy(dAtA[i:], m.PullID)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.PullID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SupplierID) > 0 {
		i -= len(m.SupplierID)
		copy(dAtA[i:], m.SupplierID)
		i = encodeVarintFileTransfer(dAtA, i, uint64(len(m.SupplierID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassID != 0 {
		i = encodeVarintFileTransfer(dAtA, i, uint64(m.ClassID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileTransfer(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileTransfer(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileTransferTask) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassID != 0 {
		n += 1 + sovFileTransfer(uint64(m.ClassID))
	}
	l = len(m.SupplierID)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	l = len(m.PullID)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	l = len(m.RemoteFilePath)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	l = len(m.LocalFilePath)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovFileTransfer(uint64(m.CreateTime))
	}
	if m.OverTime != 0 {
		n += 1 + sovFileTransfer(uint64(m.OverTime))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovFileTransfer(uint64(m.Version))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovFileTransfer(uint64(m.FileSize))
	}
	l = len(m.RemoteAddr)
	if l > 0 {
		n += 1 + l + sovFileTransfer(uint64(l))
	}
	if m.OffsetIndex != 0 {
		n += 1 + sovFileTransfer(uint64(m.OffsetIndex))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFileTransfer(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileTransfer(x uint64) (n int) {
	return sovFileTransfer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileTransferTask) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileTransfer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileTransferTask: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileTransferTask: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			m.ClassID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierID = append(m.SupplierID[:0], dAtA[iNdEx:postIndex]...)
			if m.SupplierID == nil {
				m.SupplierID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullID = append(m.PullID[:0], dAtA[iNdEx:postIndex]...)
			if m.PullID == nil {
				m.PullID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalFilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalFilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverTime", wireType)
			}
			m.OverTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OverTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileTransfer
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteAddr = append(m.RemoteAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteAddr == nil {
				m.RemoteAddr = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetIndex", wireType)
			}
			m.OffsetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFileTransfer(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileTransfer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileTransfer(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileTransfer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileTransfer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileTransfer
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileTransfer
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileTransfer
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileTransfer        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileTransfer          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileTransfer = fmt.Errorf("proto: unexpected end of group")
)
