// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: file_chunk.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FileChunk struct {
	ClassID              uint64   `protobuf:"varint,1,opt,name=ClassID,proto3" json:"ClassID,omitempty"`
	SupplierID           []byte   `protobuf:"bytes,2,opt,name=SupplierID,proto3" json:"SupplierID,omitempty"`
	PullID               []byte   `protobuf:"bytes,3,opt,name=PullID,proto3" json:"PullID,omitempty"`
	OffsetIndex          uint64   `protobuf:"varint,4,opt,name=OffsetIndex,proto3" json:"OffsetIndex,omitempty"`
	ChunkSize            uint64   `protobuf:"varint,5,opt,name=ChunkSize,proto3" json:"ChunkSize,omitempty"`
	Data                 []byte   `protobuf:"bytes,6,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_011a01783467d260, []int{0}
}
func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return m.Size()
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetClassID() uint64 {
	if m != nil {
		return m.ClassID
	}
	return 0
}

func (m *FileChunk) GetSupplierID() []byte {
	if m != nil {
		return m.SupplierID
	}
	return nil
}

func (m *FileChunk) GetPullID() []byte {
	if m != nil {
		return m.PullID
	}
	return nil
}

func (m *FileChunk) GetOffsetIndex() uint64 {
	if m != nil {
		return m.OffsetIndex
	}
	return 0
}

func (m *FileChunk) GetChunkSize() uint64 {
	if m != nil {
		return m.ChunkSize
	}
	return 0
}

func (m *FileChunk) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*FileChunk)(nil), "go_protos.FileChunk")
}

func init() { proto.RegisterFile("file_chunk.proto", fileDescriptor_011a01783467d260) }

var fileDescriptor_011a01783467d260 = []byte{
	// 201 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0xcb, 0xcc, 0x49,
	0x8d, 0x4f, 0xce, 0x28, 0xcd, 0xcb, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf,
	0x8f, 0x07, 0xb3, 0x8a, 0x95, 0x36, 0x32, 0x72, 0x71, 0xba, 0x65, 0xe6, 0xa4, 0x3a, 0x83, 0xa4,
	0x85, 0x24, 0xb8, 0xd8, 0x9d, 0x73, 0x12, 0x8b, 0x8b, 0x3d, 0x5d, 0x24, 0x18, 0x15, 0x18, 0x35,
	0x58, 0x82, 0x60, 0x5c, 0x21, 0x39, 0x2e, 0xae, 0xe0, 0xd2, 0x82, 0x82, 0x9c, 0xcc, 0xd4, 0x22,
	0x4f, 0x17, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x24, 0x11, 0x21, 0x31, 0x2e, 0xb6, 0x80,
	0xd2, 0x9c, 0x1c, 0x4f, 0x17, 0x09, 0x66, 0xb0, 0x1c, 0x94, 0x27, 0xa4, 0xc0, 0xc5, 0xed, 0x9f,
	0x96, 0x56, 0x9c, 0x5a, 0xe2, 0x99, 0x97, 0x92, 0x5a, 0x21, 0xc1, 0x02, 0x36, 0x15, 0x59, 0x48,
	0x48, 0x86, 0x8b, 0x13, 0x6c, 0x79, 0x70, 0x66, 0x55, 0xaa, 0x04, 0x2b, 0x58, 0x1e, 0x21, 0x20,
	0x24, 0xc4, 0xc5, 0xe2, 0x92, 0x58, 0x92, 0x28, 0xc1, 0x06, 0x36, 0x15, 0xcc, 0x76, 0x92, 0x3d,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63,
	0x88, 0xe2, 0xd6, 0xd3, 0x87, 0x7b, 0x29, 0x89, 0x0d, 0x4c, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x31, 0x3a, 0x8a, 0xd3, 0xf8, 0x00, 0x00, 0x00,
}

func (m *FileChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FileChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FileChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintFileChunk(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x32
	}
	if m.ChunkSize != 0 {
		i = encodeVarintFileChunk(dAtA, i, uint64(m.ChunkSize))
		i--
		dAtA[i] = 0x28
	}
	if m.OffsetIndex != 0 {
		i = encodeVarintFileChunk(dAtA, i, uint64(m.OffsetIndex))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PullID) > 0 {
		i -= len(m.PullID)
		copy(dAtA[i:], m.PullID)
		i = encodeVarintFileChunk(dAtA, i, uint64(len(m.PullID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SupplierID) > 0 {
		i -= len(m.SupplierID)
		copy(dAtA[i:], m.SupplierID)
		i = encodeVarintFileChunk(dAtA, i, uint64(len(m.SupplierID)))
		i--
		dAtA[i] = 0x12
	}
	if m.ClassID != 0 {
		i = encodeVarintFileChunk(dAtA, i, uint64(m.ClassID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFileChunk(dAtA []byte, offset int, v uint64) int {
	offset -= sovFileChunk(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FileChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ClassID != 0 {
		n += 1 + sovFileChunk(uint64(m.ClassID))
	}
	l = len(m.SupplierID)
	if l > 0 {
		n += 1 + l + sovFileChunk(uint64(l))
	}
	l = len(m.PullID)
	if l > 0 {
		n += 1 + l + sovFileChunk(uint64(l))
	}
	if m.OffsetIndex != 0 {
		n += 1 + sovFileChunk(uint64(m.OffsetIndex))
	}
	if m.ChunkSize != 0 {
		n += 1 + sovFileChunk(uint64(m.ChunkSize))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovFileChunk(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovFileChunk(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFileChunk(x uint64) (n int) {
	return sovFileChunk(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FileChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFileChunk
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FileChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FileChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassID", wireType)
			}
			m.ClassID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClassID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplierID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupplierID = append(m.SupplierID[:0], dAtA[iNdEx:postIndex]...)
			if m.SupplierID == nil {
				m.SupplierID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullID = append(m.PullID[:0], dAtA[iNdEx:postIndex]...)
			if m.PullID == nil {
				m.PullID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffsetIndex", wireType)
			}
			m.OffsetIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OffsetIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkSize", wireType)
			}
			m.ChunkSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFileChunk
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFileChunk
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFileChunk(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthFileChunk
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFileChunk(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFileChunk
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFileChunk
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFileChunk
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFileChunk
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFileChunk
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFileChunk        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFileChunk          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFileChunk = fmt.Errorf("proto: unexpected end of group")
)
