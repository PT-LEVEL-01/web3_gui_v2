// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_clientbase.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainClientBase struct {
	Base                 *ImClientBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImDataChainClientBase) Reset()         { *m = ImDataChainClientBase{} }
func (m *ImDataChainClientBase) String() string { return proto.CompactTextString(m) }
func (*ImDataChainClientBase) ProtoMessage()    {}
func (*ImDataChainClientBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bab560c2f44d086, []int{0}
}
func (m *ImDataChainClientBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainClientBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainClientBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainClientBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainClientBase.Merge(m, src)
}
func (m *ImDataChainClientBase) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainClientBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainClientBase.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainClientBase proto.InternalMessageInfo

func (m *ImDataChainClientBase) GetBase() *ImClientBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ImClientBase struct {
	Command              uint64   `protobuf:"varint,1,opt,name=Command,proto3" json:"Command,omitempty"`
	Random               []byte   `protobuf:"bytes,2,opt,name=Random,proto3" json:"Random,omitempty"`
	AddrFrom             []byte   `protobuf:"bytes,3,opt,name=AddrFrom,proto3" json:"AddrFrom,omitempty"`
	AddrTo               []byte   `protobuf:"bytes,4,opt,name=AddrTo,proto3" json:"AddrTo,omitempty"`
	Time                 int64    `protobuf:"varint,5,opt,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImClientBase) Reset()         { *m = ImClientBase{} }
func (m *ImClientBase) String() string { return proto.CompactTextString(m) }
func (*ImClientBase) ProtoMessage()    {}
func (*ImClientBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bab560c2f44d086, []int{1}
}
func (m *ImClientBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImClientBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImClientBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImClientBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImClientBase.Merge(m, src)
}
func (m *ImClientBase) XXX_Size() int {
	return m.Size()
}
func (m *ImClientBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ImClientBase.DiscardUnknown(m)
}

var xxx_messageInfo_ImClientBase proto.InternalMessageInfo

func (m *ImClientBase) GetCommand() uint64 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *ImClientBase) GetRandom() []byte {
	if m != nil {
		return m.Random
	}
	return nil
}

func (m *ImClientBase) GetAddrFrom() []byte {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *ImClientBase) GetAddrTo() []byte {
	if m != nil {
		return m.AddrTo
	}
	return nil
}

func (m *ImClientBase) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func init() {
	proto.RegisterType((*ImDataChainClientBase)(nil), "go_protos.ImDataChainClientBase")
	proto.RegisterType((*ImClientBase)(nil), "go_protos.ImClientBase")
}

func init() { proto.RegisterFile("imdatachain_clientbase.proto", fileDescriptor_2bab560c2f44d086) }

var fileDescriptor_2bab560c2f44d086 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0xcc, 0x4d, 0x49,
	0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x49, 0x4a,
	0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a,
	0x95, 0x5c, 0xb8, 0x44, 0x3d, 0x73, 0x5d, 0x12, 0x4b, 0x12, 0x9d, 0x41, 0x4a, 0x9d, 0xc1, 0x2a,
	0x9d, 0x12, 0x8b, 0x53, 0x85, 0xb4, 0xb9, 0x58, 0x40, 0xb4, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0xb7,
	0x91, 0xb8, 0x1e, 0x5c, 0x8b, 0x9e, 0x67, 0x2e, 0x42, 0x59, 0x10, 0x58, 0x91, 0x52, 0x07, 0x23,
	0x17, 0x0f, 0xb2, 0xb0, 0x90, 0x04, 0x17, 0xbb, 0x73, 0x7e, 0x6e, 0x6e, 0x62, 0x5e, 0x0a, 0xd8,
	0x00, 0x96, 0x20, 0x18, 0x57, 0x48, 0x8c, 0x8b, 0x2d, 0x28, 0x31, 0x2f, 0x25, 0x3f, 0x57, 0x82,
	0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xca, 0x13, 0x92, 0xe2, 0xe2, 0x70, 0x4c, 0x49, 0x29, 0x72,
	0x2b, 0xca, 0xcf, 0x95, 0x60, 0x06, 0xcb, 0xc0, 0xf9, 0x20, 0x3d, 0x20, 0x76, 0x48, 0xbe, 0x04,
	0x0b, 0x44, 0x0f, 0x84, 0x27, 0x24, 0xc4, 0xc5, 0x12, 0x92, 0x99, 0x9b, 0x2a, 0xc1, 0xaa, 0xc0,
	0xa8, 0xc1, 0x1c, 0x04, 0x66, 0x3b, 0xc9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xeb, 0xe9, 0xc3, 0x1d, 0x9f, 0xc4,
	0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x55, 0x4e, 0xaf, 0xd4, 0x21, 0x01, 0x00,
	0x00,
}

func (m *ImDataChainClientBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainClientBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainClientBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainClientbase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImClientBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImClientBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImClientBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Time != 0 {
		i = encodeVarintImdatachainClientbase(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x28
	}
	if len(m.AddrTo) > 0 {
		i -= len(m.AddrTo)
		copy(dAtA[i:], m.AddrTo)
		i = encodeVarintImdatachainClientbase(dAtA, i, uint64(len(m.AddrTo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddrFrom) > 0 {
		i -= len(m.AddrFrom)
		copy(dAtA[i:], m.AddrFrom)
		i = encodeVarintImdatachainClientbase(dAtA, i, uint64(len(m.AddrFrom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Random) > 0 {
		i -= len(m.Random)
		copy(dAtA[i:], m.Random)
		i = encodeVarintImdatachainClientbase(dAtA, i, uint64(len(m.Random)))
		i--
		dAtA[i] = 0x12
	}
	if m.Command != 0 {
		i = encodeVarintImdatachainClientbase(dAtA, i, uint64(m.Command))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainClientbase(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainClientbase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainClientBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainClientbase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImClientBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Command != 0 {
		n += 1 + sovImdatachainClientbase(uint64(m.Command))
	}
	l = len(m.Random)
	if l > 0 {
		n += 1 + l + sovImdatachainClientbase(uint64(l))
	}
	l = len(m.AddrFrom)
	if l > 0 {
		n += 1 + l + sovImdatachainClientbase(uint64(l))
	}
	l = len(m.AddrTo)
	if l > 0 {
		n += 1 + l + sovImdatachainClientbase(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovImdatachainClientbase(uint64(m.Time))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainClientbase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainClientbase(x uint64) (n int) {
	return sovImdatachainClientbase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainClientBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainClientbase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainClientBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainClientBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImClientBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainClientbase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImClientBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainClientbase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImClientBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImClientBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Random = append(m.Random[:0], dAtA[iNdEx:postIndex]...)
			if m.Random == nil {
				m.Random = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrFrom = append(m.AddrFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrFrom == nil {
				m.AddrFrom = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrTo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrTo = append(m.AddrTo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrTo == nil {
				m.AddrTo = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainClientbase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainClientbase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainClientbase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainClientbase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientbase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainClientbase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainClientbase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainClientbase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainClientbase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainClientbase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainClientbase = fmt.Errorf("proto: unexpected end of group")
)
