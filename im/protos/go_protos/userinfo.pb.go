// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: userinfo.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserInfoList struct {
	UserList             []*UserInfo `protobuf:"bytes,1,rep,name=userList,proto3" json:"userList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserInfoList) Reset()         { *m = UserInfoList{} }
func (m *UserInfoList) String() string { return proto.CompactTextString(m) }
func (*UserInfoList) ProtoMessage()    {}
func (*UserInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_785a78c34699a93d, []int{0}
}
func (m *UserInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfoList.Merge(m, src)
}
func (m *UserInfoList) XXX_Size() int {
	return m.Size()
}
func (m *UserInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfoList proto.InternalMessageInfo

func (m *UserInfoList) GetUserList() []*UserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

type UserInfo struct {
	Addr                 []byte        `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Nickname             []byte        `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	RemarksName          []byte        `protobuf:"bytes,3,opt,name=RemarksName,proto3" json:"RemarksName,omitempty"`
	HeadNum              uint64        `protobuf:"varint,4,opt,name=HeadNum,proto3" json:"HeadNum,omitempty"`
	Status               uint64        `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	Time                 int64         `protobuf:"varint,6,opt,name=Time,proto3" json:"Time,omitempty"`
	ClassList            []*ClassCount `protobuf:"bytes,7,rep,name=ClassList,proto3" json:"ClassList,omitempty"`
	Tray                 bool          `protobuf:"varint,8,opt,name=Tray,proto3" json:"Tray,omitempty"`
	Proxy                [][]byte      `protobuf:"bytes,9,rep,name=Proxy,proto3" json:"Proxy,omitempty"`
	IsGroup              bool          `protobuf:"varint,10,opt,name=IsGroup,proto3" json:"IsGroup,omitempty"`
	GroupId              []byte        `protobuf:"bytes,11,opt,name=GroupId,proto3" json:"GroupId,omitempty"`
	AddrAdmin            []byte        `protobuf:"bytes,12,opt,name=AddrAdmin,proto3" json:"AddrAdmin,omitempty"`
	GroupSign            []byte        `protobuf:"bytes,13,opt,name=GroupSign,proto3" json:"GroupSign,omitempty"`
	GroupAcceptTime      int64         `protobuf:"varint,14,opt,name=GroupAcceptTime,proto3" json:"GroupAcceptTime,omitempty"`
	GroupSignPuk         []byte        `protobuf:"bytes,15,opt,name=GroupSignPuk,proto3" json:"GroupSignPuk,omitempty"`
	GroupShareKey        []byte        `protobuf:"bytes,16,opt,name=GroupShareKey,proto3" json:"GroupShareKey,omitempty"`
	GroupDHPuk           []byte        `protobuf:"bytes,17,opt,name=GroupDHPuk,proto3" json:"GroupDHPuk,omitempty"`
	Admin                bool          `protobuf:"varint,18,opt,name=Admin,proto3" json:"Admin,omitempty"`
	Token                []byte        `protobuf:"bytes,19,opt,name=Token,proto3" json:"Token,omitempty"`
	Notes                []byte        `protobuf:"bytes,20,opt,name=Notes,proto3" json:"Notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_785a78c34699a93d, []int{1}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *UserInfo) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *UserInfo) GetRemarksName() []byte {
	if m != nil {
		return m.RemarksName
	}
	return nil
}

func (m *UserInfo) GetHeadNum() uint64 {
	if m != nil {
		return m.HeadNum
	}
	return 0
}

func (m *UserInfo) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *UserInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *UserInfo) GetClassList() []*ClassCount {
	if m != nil {
		return m.ClassList
	}
	return nil
}

func (m *UserInfo) GetTray() bool {
	if m != nil {
		return m.Tray
	}
	return false
}

func (m *UserInfo) GetProxy() [][]byte {
	if m != nil {
		return m.Proxy
	}
	return nil
}

func (m *UserInfo) GetIsGroup() bool {
	if m != nil {
		return m.IsGroup
	}
	return false
}

func (m *UserInfo) GetGroupId() []byte {
	if m != nil {
		return m.GroupId
	}
	return nil
}

func (m *UserInfo) GetAddrAdmin() []byte {
	if m != nil {
		return m.AddrAdmin
	}
	return nil
}

func (m *UserInfo) GetGroupSign() []byte {
	if m != nil {
		return m.GroupSign
	}
	return nil
}

func (m *UserInfo) GetGroupAcceptTime() int64 {
	if m != nil {
		return m.GroupAcceptTime
	}
	return 0
}

func (m *UserInfo) GetGroupSignPuk() []byte {
	if m != nil {
		return m.GroupSignPuk
	}
	return nil
}

func (m *UserInfo) GetGroupShareKey() []byte {
	if m != nil {
		return m.GroupShareKey
	}
	return nil
}

func (m *UserInfo) GetGroupDHPuk() []byte {
	if m != nil {
		return m.GroupDHPuk
	}
	return nil
}

func (m *UserInfo) GetAdmin() bool {
	if m != nil {
		return m.Admin
	}
	return false
}

func (m *UserInfo) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *UserInfo) GetNotes() []byte {
	if m != nil {
		return m.Notes
	}
	return nil
}

type ClassCount struct {
	Name                 []byte   `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Size_                uint64   `protobuf:"varint,2,opt,name=Size,proto3" json:"Size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ClassCount) Reset()         { *m = ClassCount{} }
func (m *ClassCount) String() string { return proto.CompactTextString(m) }
func (*ClassCount) ProtoMessage()    {}
func (*ClassCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_785a78c34699a93d, []int{2}
}
func (m *ClassCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClassCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClassCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClassCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClassCount.Merge(m, src)
}
func (m *ClassCount) XXX_Size() int {
	return m.Size()
}
func (m *ClassCount) XXX_DiscardUnknown() {
	xxx_messageInfo_ClassCount.DiscardUnknown(m)
}

var xxx_messageInfo_ClassCount proto.InternalMessageInfo

func (m *ClassCount) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ClassCount) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func init() {
	proto.RegisterType((*UserInfoList)(nil), "go_protos.UserInfoList")
	proto.RegisterType((*UserInfo)(nil), "go_protos.UserInfo")
	proto.RegisterType((*ClassCount)(nil), "go_protos.ClassCount")
}

func init() { proto.RegisterFile("userinfo.proto", fileDescriptor_785a78c34699a93d) }

var fileDescriptor_785a78c34699a93d = []byte{
	// 440 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x66, 0x89, 0x9b, 0x3a, 0x13, 0xb7, 0x85, 0x69, 0x41, 0x23, 0x04, 0x96, 0x15, 0x71, 0xf0,
	0x29, 0x95, 0x28, 0x77, 0x14, 0x8a, 0x44, 0x23, 0x50, 0x54, 0x6d, 0xca, 0x85, 0x0b, 0x32, 0xf1,
	0xb6, 0x58, 0xc1, 0xde, 0x68, 0xd7, 0x96, 0x08, 0x4f, 0xc2, 0x1b, 0xc1, 0x91, 0x47, 0x40, 0xe1,
	0x45, 0xd0, 0xce, 0xd6, 0x4e, 0xca, 0xc9, 0xdf, 0x9f, 0x57, 0xfb, 0xcd, 0x0e, 0x1c, 0x36, 0x56,
	0x99, 0xa2, 0xba, 0xd6, 0xe3, 0x95, 0xd1, 0xb5, 0xc6, 0xc1, 0x8d, 0xfe, 0xc4, 0xc8, 0x8e, 0x5e,
	0x41, 0xf4, 0xc1, 0x2a, 0x33, 0xad, 0xae, 0xf5, 0xfb, 0xc2, 0xd6, 0x78, 0x0a, 0xa1, 0x0b, 0x3b,
	0x4c, 0x22, 0xe9, 0xa5, 0xc3, 0x17, 0xc7, 0xe3, 0x2e, 0x3d, 0x6e, 0xa3, 0xb2, 0x0b, 0x8d, 0x7e,
	0x06, 0x10, 0xb6, 0x32, 0x22, 0x04, 0x93, 0x3c, 0x37, 0x24, 0x12, 0x91, 0x46, 0x92, 0x31, 0x3e,
	0x81, 0x70, 0x56, 0x2c, 0x96, 0x55, 0x56, 0x2a, 0xba, 0xcf, 0x7a, 0xc7, 0x31, 0x81, 0xa1, 0x54,
	0x65, 0x66, 0x96, 0x76, 0xe6, 0xec, 0x1e, 0xdb, 0xbb, 0x12, 0x12, 0xec, 0x5f, 0xa8, 0x2c, 0x9f,
	0x35, 0x25, 0x05, 0x89, 0x48, 0x03, 0xd9, 0x52, 0x7c, 0x0c, 0xfd, 0x79, 0x9d, 0xd5, 0x8d, 0xa5,
	0x3d, 0x36, 0x6e, 0x99, 0xbb, 0xc3, 0x55, 0x51, 0x2a, 0xea, 0x27, 0x22, 0xed, 0x49, 0xc6, 0x78,
	0x06, 0x83, 0xf3, 0xaf, 0x99, 0xb5, 0x5c, 0x6b, 0x9f, 0x6b, 0x3d, 0xda, 0xa9, 0xc5, 0xde, 0xb9,
	0x6e, 0xaa, 0x5a, 0x6e, 0x73, 0x7c, 0x90, 0xc9, 0xd6, 0x14, 0x26, 0x22, 0x0d, 0x25, 0x63, 0x3c,
	0x81, 0xbd, 0x4b, 0xa3, 0xbf, 0xad, 0x69, 0x90, 0xf4, 0xd2, 0x48, 0x7a, 0xe2, 0x2e, 0x39, 0xb5,
	0x6f, 0x8d, 0x6e, 0x56, 0x04, 0x1c, 0x6e, 0xa9, 0x73, 0x18, 0x4c, 0x73, 0x1a, 0x72, 0xb9, 0x96,
	0xe2, 0x53, 0x18, 0xb8, 0xf1, 0x4c, 0xf2, 0xb2, 0xa8, 0x28, 0x62, 0x6f, 0x2b, 0x38, 0x97, 0x83,
	0xf3, 0xe2, 0xa6, 0xa2, 0x03, 0xef, 0x76, 0x02, 0xa6, 0x70, 0xc4, 0x64, 0xb2, 0x58, 0xa8, 0x55,
	0xcd, 0x6d, 0x0f, 0xb9, 0xed, 0xff, 0x32, 0x8e, 0x20, 0xea, 0x7e, 0xbb, 0x6c, 0x96, 0x74, 0xc4,
	0x47, 0xdd, 0xd1, 0xf0, 0x39, 0x1c, 0x78, 0xfe, 0x25, 0x33, 0xea, 0x9d, 0x5a, 0xd3, 0x03, 0x0e,
	0xdd, 0x15, 0x31, 0x06, 0x60, 0xe1, 0xcd, 0x85, 0x3b, 0xe7, 0x21, 0x47, 0x76, 0x14, 0x37, 0x19,
	0xdf, 0x05, 0x79, 0x02, 0x9e, 0x38, 0xf5, 0x4a, 0x2f, 0x55, 0x45, 0xc7, 0xfc, 0x83, 0x27, 0x4e,
	0x9d, 0xe9, 0x5a, 0x59, 0x3a, 0xf1, 0x2a, 0x93, 0xd1, 0x4b, 0x80, 0xed, 0x43, 0xb8, 0xe9, 0xf3,
	0x4e, 0xdc, 0xae, 0x12, 0x2f, 0x03, 0x42, 0x30, 0x2f, 0xbe, 0xfb, 0x35, 0x0a, 0x24, 0xe3, 0xd7,
	0xcf, 0x7e, 0x6d, 0x62, 0xf1, 0x7b, 0x13, 0x8b, 0x3f, 0x9b, 0x58, 0xfc, 0xf8, 0x1b, 0xdf, 0xfb,
	0x38, 0x1c, 0x9f, 0x76, 0x4f, 0xfb, 0xb9, 0xcf, 0xdf, 0xb3, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xb5, 0x27, 0x14, 0x9e, 0x03, 0x03, 0x00, 0x00,
}

func (m *UserInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.Admin {
		i--
		if m.Admin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.GroupDHPuk) > 0 {
		i -= len(m.GroupDHPuk)
		copy(dAtA[i:], m.GroupDHPuk)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.GroupDHPuk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.GroupShareKey) > 0 {
		i -= len(m.GroupShareKey)
		copy(dAtA[i:], m.GroupShareKey)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.GroupShareKey)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if len(m.GroupSignPuk) > 0 {
		i -= len(m.GroupSignPuk)
		copy(dAtA[i:], m.GroupSignPuk)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.GroupSignPuk)))
		i--
		dAtA[i] = 0x7a
	}
	if m.GroupAcceptTime != 0 {
		i = encodeVarintUserinfo(dAtA, i, uint64(m.GroupAcceptTime))
		i--
		dAtA[i] = 0x70
	}
	if len(m.GroupSign) > 0 {
		i -= len(m.GroupSign)
		copy(dAtA[i:], m.GroupSign)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.GroupSign)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.AddrAdmin) > 0 {
		i -= len(m.AddrAdmin)
		copy(dAtA[i:], m.AddrAdmin)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.AddrAdmin)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.IsGroup {
		i--
		if m.IsGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.Proxy) > 0 {
		for iNdEx := len(m.Proxy) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proxy[iNdEx])
			copy(dAtA[i:], m.Proxy[iNdEx])
			i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Proxy[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.Tray {
		i--
		if m.Tray {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.ClassList) > 0 {
		for iNdEx := len(m.ClassList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClassList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintUserinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Time != 0 {
		i = encodeVarintUserinfo(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintUserinfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.HeadNum != 0 {
		i = encodeVarintUserinfo(dAtA, i, uint64(m.HeadNum))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RemarksName) > 0 {
		i -= len(m.RemarksName)
		copy(dAtA[i:], m.RemarksName)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.RemarksName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ClassCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClassCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClassCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintUserinfo(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintUserinfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintUserinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovUserinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovUserinfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	l = len(m.RemarksName)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	if m.HeadNum != 0 {
		n += 1 + sovUserinfo(uint64(m.HeadNum))
	}
	if m.Status != 0 {
		n += 1 + sovUserinfo(uint64(m.Status))
	}
	if m.Time != 0 {
		n += 1 + sovUserinfo(uint64(m.Time))
	}
	if len(m.ClassList) > 0 {
		for _, e := range m.ClassList {
			l = e.Size()
			n += 1 + l + sovUserinfo(uint64(l))
		}
	}
	if m.Tray {
		n += 2
	}
	if len(m.Proxy) > 0 {
		for _, b := range m.Proxy {
			l = len(b)
			n += 1 + l + sovUserinfo(uint64(l))
		}
	}
	if m.IsGroup {
		n += 2
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	l = len(m.AddrAdmin)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	l = len(m.GroupSign)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	if m.GroupAcceptTime != 0 {
		n += 1 + sovUserinfo(uint64(m.GroupAcceptTime))
	}
	l = len(m.GroupSignPuk)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	l = len(m.GroupShareKey)
	if l > 0 {
		n += 2 + l + sovUserinfo(uint64(l))
	}
	l = len(m.GroupDHPuk)
	if l > 0 {
		n += 2 + l + sovUserinfo(uint64(l))
	}
	if m.Admin {
		n += 3
	}
	l = len(m.Token)
	if l > 0 {
		n += 2 + l + sovUserinfo(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 2 + l + sovUserinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ClassCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovUserinfo(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovUserinfo(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovUserinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozUserinfo(x uint64) (n int) {
	return sovUserinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &UserInfo{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemarksName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemarksName = append(m.RemarksName[:0], dAtA[iNdEx:postIndex]...)
			if m.RemarksName == nil {
				m.RemarksName = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeadNum", wireType)
			}
			m.HeadNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeadNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClassList = append(m.ClassList, &ClassCount{})
			if err := m.ClassList[len(m.ClassList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tray", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Tray = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proxy", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proxy = append(m.Proxy, make([]byte, postIndex-iNdEx))
			copy(m.Proxy[len(m.Proxy)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroup = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = append(m.GroupId[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupId == nil {
				m.GroupId = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrAdmin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrAdmin = append(m.AddrAdmin[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrAdmin == nil {
				m.AddrAdmin = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSign = append(m.GroupSign[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSign == nil {
				m.GroupSign = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupAcceptTime", wireType)
			}
			m.GroupAcceptTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupAcceptTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupSignPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupSignPuk = append(m.GroupSignPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupSignPuk == nil {
				m.GroupSignPuk = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupShareKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupShareKey = append(m.GroupShareKey[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupShareKey == nil {
				m.GroupShareKey = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupDHPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupDHPuk = append(m.GroupDHPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupDHPuk == nil {
				m.GroupDHPuk = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admin = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = append(m.Notes[:0], dAtA[iNdEx:postIndex]...)
			if m.Notes == nil {
				m.Notes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipUserinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClassCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowUserinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClassCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClassCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthUserinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthUserinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipUserinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthUserinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipUserinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowUserinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowUserinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthUserinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupUserinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthUserinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthUserinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowUserinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupUserinfo = fmt.Errorf("proto: unexpected end of group")
)
