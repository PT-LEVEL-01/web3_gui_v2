// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: im_group_shot.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GroupShot struct {
	GroupID              []byte   `protobuf:"bytes,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	GroupKnit            []byte   `protobuf:"bytes,2,opt,name=GroupKnit,proto3" json:"GroupKnit,omitempty"`
	SendIndex            []byte   `protobuf:"bytes,3,opt,name=SendIndex,proto3" json:"SendIndex,omitempty"`
	PreHash              []byte   `protobuf:"bytes,4,opt,name=PreHash,proto3" json:"PreHash,omitempty"`
	IndexParse           []byte   `protobuf:"bytes,5,opt,name=IndexParse,proto3" json:"IndexParse,omitempty"`
	AddrAdmin            []byte   `protobuf:"bytes,6,opt,name=addrAdmin,proto3" json:"addrAdmin,omitempty"`
	AddrKnitProxys       []byte   `protobuf:"bytes,7,opt,name=addrKnitProxys,proto3" json:"addrKnitProxys,omitempty"`
	Members              [][]byte `protobuf:"bytes,8,rep,name=members,proto3" json:"members,omitempty"`
	MembersProxys        [][]byte `protobuf:"bytes,9,rep,name=membersProxys,proto3" json:"membersProxys,omitempty"`
	ShoutUp              bool     `protobuf:"varint,10,opt,name=shoutUp,proto3" json:"shoutUp,omitempty"`
	ShareKey             []byte   `protobuf:"bytes,11,opt,name=ShareKey,proto3" json:"ShareKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupShot) Reset()         { *m = GroupShot{} }
func (m *GroupShot) String() string { return proto.CompactTextString(m) }
func (*GroupShot) ProtoMessage()    {}
func (*GroupShot) Descriptor() ([]byte, []int) {
	return fileDescriptor_992c82d6ded402ec, []int{0}
}
func (m *GroupShot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupShot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupShot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupShot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupShot.Merge(m, src)
}
func (m *GroupShot) XXX_Size() int {
	return m.Size()
}
func (m *GroupShot) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupShot.DiscardUnknown(m)
}

var xxx_messageInfo_GroupShot proto.InternalMessageInfo

func (m *GroupShot) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *GroupShot) GetGroupKnit() []byte {
	if m != nil {
		return m.GroupKnit
	}
	return nil
}

func (m *GroupShot) GetSendIndex() []byte {
	if m != nil {
		return m.SendIndex
	}
	return nil
}

func (m *GroupShot) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *GroupShot) GetIndexParse() []byte {
	if m != nil {
		return m.IndexParse
	}
	return nil
}

func (m *GroupShot) GetAddrAdmin() []byte {
	if m != nil {
		return m.AddrAdmin
	}
	return nil
}

func (m *GroupShot) GetAddrKnitProxys() []byte {
	if m != nil {
		return m.AddrKnitProxys
	}
	return nil
}

func (m *GroupShot) GetMembers() [][]byte {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *GroupShot) GetMembersProxys() [][]byte {
	if m != nil {
		return m.MembersProxys
	}
	return nil
}

func (m *GroupShot) GetShoutUp() bool {
	if m != nil {
		return m.ShoutUp
	}
	return false
}

func (m *GroupShot) GetShareKey() []byte {
	if m != nil {
		return m.ShareKey
	}
	return nil
}

func init() {
	proto.RegisterType((*GroupShot)(nil), "go_protos.GroupShot")
}

func init() { proto.RegisterFile("im_group_shot.proto", fileDescriptor_992c82d6ded402ec) }

var fileDescriptor_992c82d6ded402ec = []byte{
	// 276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xce, 0xcc, 0x8d, 0x4f,
	0x2f, 0xca, 0x2f, 0x2d, 0x88, 0x2f, 0xce, 0xc8, 0x2f, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0x95, 0xae, 0x33, 0x71, 0x71, 0xba, 0x83, 0xe4, 0x83,
	0x33, 0xf2, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0xc1, 0x1c, 0x4f, 0x17, 0x09, 0x46, 0x05, 0x46, 0x0d,
	0x9e, 0x20, 0x18, 0x57, 0x48, 0x06, 0xaa, 0xcc, 0x3b, 0x2f, 0xb3, 0x44, 0x82, 0x09, 0x2c, 0x87,
	0x10, 0x00, 0xc9, 0x06, 0xa7, 0xe6, 0xa5, 0x78, 0xe6, 0xa5, 0xa4, 0x56, 0x48, 0x30, 0x43, 0x64,
	0xe1, 0x02, 0x20, 0x53, 0x03, 0x8a, 0x52, 0x3d, 0x12, 0x8b, 0x33, 0x24, 0x58, 0x20, 0xa6, 0x42,
	0xb9, 0x42, 0x72, 0x5c, 0x5c, 0x60, 0x25, 0x01, 0x89, 0x45, 0xc5, 0xa9, 0x12, 0xac, 0x60, 0x49,
	0x24, 0x11, 0x90, 0xb9, 0x89, 0x29, 0x29, 0x45, 0x8e, 0x29, 0xb9, 0x99, 0x79, 0x12, 0x6c, 0x10,
	0x73, 0xe1, 0x02, 0x42, 0x6a, 0x5c, 0x7c, 0x20, 0x0e, 0xc8, 0x05, 0x01, 0x45, 0xf9, 0x15, 0x95,
	0xc5, 0x12, 0xec, 0x60, 0x25, 0x68, 0xa2, 0x20, 0xfb, 0x73, 0x53, 0x73, 0x93, 0x52, 0x8b, 0x8a,
	0x25, 0x38, 0x14, 0x98, 0x41, 0xf6, 0x43, 0xb9, 0x42, 0x2a, 0x5c, 0xbc, 0x50, 0x26, 0xd4, 0x00,
	0x4e, 0xb0, 0x3c, 0xaa, 0x20, 0x48, 0x7f, 0x71, 0x46, 0x7e, 0x69, 0x49, 0x68, 0x81, 0x04, 0x97,
	0x02, 0xa3, 0x06, 0x47, 0x10, 0x8c, 0x2b, 0x24, 0xc5, 0xc5, 0x11, 0x9c, 0x91, 0x58, 0x94, 0xea,
	0x9d, 0x5a, 0x29, 0xc1, 0x0d, 0xb6, 0x1b, 0xce, 0x77, 0x92, 0x3d, 0xf1, 0x48, 0x8e, 0xf1, 0xc2,
	0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0xd6, 0xd3, 0x87,
	0x07, 0x7c, 0x12, 0x1b, 0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x59, 0x47, 0x8c, 0xb0,
	0xa1, 0x01, 0x00, 0x00,
}

func (m *GroupShot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupShot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupShot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.ShareKey) > 0 {
		i -= len(m.ShareKey)
		copy(dAtA[i:], m.ShareKey)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.ShareKey)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ShoutUp {
		i--
		if m.ShoutUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if len(m.MembersProxys) > 0 {
		for iNdEx := len(m.MembersProxys) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersProxys[iNdEx])
			copy(dAtA[i:], m.MembersProxys[iNdEx])
			i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.MembersProxys[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Members[iNdEx])
			copy(dAtA[i:], m.Members[iNdEx])
			i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.Members[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.AddrKnitProxys) > 0 {
		i -= len(m.AddrKnitProxys)
		copy(dAtA[i:], m.AddrKnitProxys)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.AddrKnitProxys)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AddrAdmin) > 0 {
		i -= len(m.AddrAdmin)
		copy(dAtA[i:], m.AddrAdmin)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.AddrAdmin)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.IndexParse) > 0 {
		i -= len(m.IndexParse)
		copy(dAtA[i:], m.IndexParse)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.IndexParse)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreHash) > 0 {
		i -= len(m.PreHash)
		copy(dAtA[i:], m.PreHash)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.PreHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SendIndex) > 0 {
		i -= len(m.SendIndex)
		copy(dAtA[i:], m.SendIndex)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.SendIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupKnit) > 0 {
		i -= len(m.GroupKnit)
		copy(dAtA[i:], m.GroupKnit)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.GroupKnit)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.GroupID) > 0 {
		i -= len(m.GroupID)
		copy(dAtA[i:], m.GroupID)
		i = encodeVarintImGroupShot(dAtA, i, uint64(len(m.GroupID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImGroupShot(dAtA []byte, offset int, v uint64) int {
	offset -= sovImGroupShot(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GroupShot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.GroupKnit)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.SendIndex)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.PreHash)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.IndexParse)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.AddrAdmin)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	l = len(m.AddrKnitProxys)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	if len(m.Members) > 0 {
		for _, b := range m.Members {
			l = len(b)
			n += 1 + l + sovImGroupShot(uint64(l))
		}
	}
	if len(m.MembersProxys) > 0 {
		for _, b := range m.MembersProxys {
			l = len(b)
			n += 1 + l + sovImGroupShot(uint64(l))
		}
	}
	if m.ShoutUp {
		n += 2
	}
	l = len(m.ShareKey)
	if l > 0 {
		n += 1 + l + sovImGroupShot(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImGroupShot(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImGroupShot(x uint64) (n int) {
	return sovImGroupShot(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GroupShot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImGroupShot
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupShot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupShot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupKnit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupKnit = append(m.GroupKnit[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupKnit == nil {
				m.GroupKnit = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendIndex = append(m.SendIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.SendIndex == nil {
				m.SendIndex = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreHash = append(m.PreHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreHash == nil {
				m.PreHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IndexParse", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IndexParse = append(m.IndexParse[:0], dAtA[iNdEx:postIndex]...)
			if m.IndexParse == nil {
				m.IndexParse = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrAdmin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrAdmin = append(m.AddrAdmin[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrAdmin == nil {
				m.AddrAdmin = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrKnitProxys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrKnitProxys = append(m.AddrKnitProxys[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrKnitProxys == nil {
				m.AddrKnitProxys = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, make([]byte, postIndex-iNdEx))
			copy(m.Members[len(m.Members)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersProxys", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersProxys = append(m.MembersProxys, make([]byte, postIndex-iNdEx))
			copy(m.MembersProxys[len(m.MembersProxys)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShoutUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShoutUp = bool(v != 0)
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShareKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImGroupShot
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShareKey = append(m.ShareKey[:0], dAtA[iNdEx:postIndex]...)
			if m.ShareKey == nil {
				m.ShareKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImGroupShot(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImGroupShot
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImGroupShot(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImGroupShot
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImGroupShot
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImGroupShot
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImGroupShot
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImGroupShot
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImGroupShot        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImGroupShot          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImGroupShot = fmt.Errorf("proto: unexpected end of group")
)
