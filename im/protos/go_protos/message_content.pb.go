// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_content.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageContentList struct {
	List                 []*MessageContent `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *MessageContentList) Reset()         { *m = MessageContentList{} }
func (m *MessageContentList) String() string { return proto.CompactTextString(m) }
func (*MessageContentList) ProtoMessage()    {}
func (*MessageContentList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fdd14432c5ac9d2, []int{0}
}
func (m *MessageContentList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageContentList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageContentList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageContentList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageContentList.Merge(m, src)
}
func (m *MessageContentList) XXX_Size() int {
	return m.Size()
}
func (m *MessageContentList) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageContentList.DiscardUnknown(m)
}

var xxx_messageInfo_MessageContentList proto.InternalMessageInfo

func (m *MessageContentList) GetList() []*MessageContent {
	if m != nil {
		return m.List
	}
	return nil
}

type MessageContent struct {
	Type                 uint64   `protobuf:"varint,1,opt,name=Type,proto3" json:"Type,omitempty"`
	FromIsSelf           bool     `protobuf:"varint,2,opt,name=FromIsSelf,proto3" json:"FromIsSelf,omitempty"`
	From                 []byte   `protobuf:"bytes,3,opt,name=From,proto3" json:"From,omitempty"`
	To                   []byte   `protobuf:"bytes,4,opt,name=To,proto3" json:"To,omitempty"`
	Content              []byte   `protobuf:"bytes,5,opt,name=Content,proto3" json:"Content,omitempty"`
	Time                 uint64   `protobuf:"varint,6,opt,name=Time,proto3" json:"Time,omitempty"`
	PullAndPushID        uint64   `protobuf:"varint,7,opt,name=PullAndPushID,proto3" json:"PullAndPushID,omitempty"`
	SendID               []byte   `protobuf:"bytes,8,opt,name=SendID,proto3" json:"SendID,omitempty"`
	RecvID               []byte   `protobuf:"bytes,9,opt,name=RecvID,proto3" json:"RecvID,omitempty"`
	QuoteID              []byte   `protobuf:"bytes,10,opt,name=QuoteID,proto3" json:"QuoteID,omitempty"`
	State                uint32   `protobuf:"varint,11,opt,name=State,proto3" json:"State,omitempty"`
	Index                []byte   `protobuf:"bytes,12,opt,name=Index,proto3" json:"Index,omitempty"`
	EncryptType          uint32   `protobuf:"varint,13,opt,name=EncryptType,proto3" json:"EncryptType,omitempty"`
	IsGroup              bool     `protobuf:"varint,14,opt,name=IsGroup,proto3" json:"IsGroup,omitempty"`
	FileMimeType         []byte   `protobuf:"bytes,15,opt,name=FileMimeType,proto3" json:"FileMimeType,omitempty"`
	FileSendTime         uint64   `protobuf:"varint,16,opt,name=FileSendTime,proto3" json:"FileSendTime,omitempty"`
	FileName             []byte   `protobuf:"bytes,17,opt,name=FileName,proto3" json:"FileName,omitempty"`
	FileType             uint64   `protobuf:"varint,18,opt,name=FileType,proto3" json:"FileType,omitempty"`
	FileSize             uint64   `protobuf:"varint,19,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	FileHash             []byte   `protobuf:"bytes,20,opt,name=FileHash,proto3" json:"FileHash,omitempty"`
	FileBlockTotal       uint64   `protobuf:"varint,21,opt,name=FileBlockTotal,proto3" json:"FileBlockTotal,omitempty"`
	FileBlockIndex       uint64   `protobuf:"varint,22,opt,name=FileBlockIndex,proto3" json:"FileBlockIndex,omitempty"`
	FileContent          [][]byte `protobuf:"bytes,23,rep,name=FileContent,proto3" json:"FileContent,omitempty"`
	TransProgress        uint64   `protobuf:"varint,24,opt,name=TransProgress,proto3" json:"TransProgress,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageContent) Reset()         { *m = MessageContent{} }
func (m *MessageContent) String() string { return proto.CompactTextString(m) }
func (*MessageContent) ProtoMessage()    {}
func (*MessageContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_2fdd14432c5ac9d2, []int{1}
}
func (m *MessageContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageContent.Merge(m, src)
}
func (m *MessageContent) XXX_Size() int {
	return m.Size()
}
func (m *MessageContent) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageContent.DiscardUnknown(m)
}

var xxx_messageInfo_MessageContent proto.InternalMessageInfo

func (m *MessageContent) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *MessageContent) GetFromIsSelf() bool {
	if m != nil {
		return m.FromIsSelf
	}
	return false
}

func (m *MessageContent) GetFrom() []byte {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *MessageContent) GetTo() []byte {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *MessageContent) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *MessageContent) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MessageContent) GetPullAndPushID() uint64 {
	if m != nil {
		return m.PullAndPushID
	}
	return 0
}

func (m *MessageContent) GetSendID() []byte {
	if m != nil {
		return m.SendID
	}
	return nil
}

func (m *MessageContent) GetRecvID() []byte {
	if m != nil {
		return m.RecvID
	}
	return nil
}

func (m *MessageContent) GetQuoteID() []byte {
	if m != nil {
		return m.QuoteID
	}
	return nil
}

func (m *MessageContent) GetState() uint32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *MessageContent) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *MessageContent) GetEncryptType() uint32 {
	if m != nil {
		return m.EncryptType
	}
	return 0
}

func (m *MessageContent) GetIsGroup() bool {
	if m != nil {
		return m.IsGroup
	}
	return false
}

func (m *MessageContent) GetFileMimeType() []byte {
	if m != nil {
		return m.FileMimeType
	}
	return nil
}

func (m *MessageContent) GetFileSendTime() uint64 {
	if m != nil {
		return m.FileSendTime
	}
	return 0
}

func (m *MessageContent) GetFileName() []byte {
	if m != nil {
		return m.FileName
	}
	return nil
}

func (m *MessageContent) GetFileType() uint64 {
	if m != nil {
		return m.FileType
	}
	return 0
}

func (m *MessageContent) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *MessageContent) GetFileHash() []byte {
	if m != nil {
		return m.FileHash
	}
	return nil
}

func (m *MessageContent) GetFileBlockTotal() uint64 {
	if m != nil {
		return m.FileBlockTotal
	}
	return 0
}

func (m *MessageContent) GetFileBlockIndex() uint64 {
	if m != nil {
		return m.FileBlockIndex
	}
	return 0
}

func (m *MessageContent) GetFileContent() [][]byte {
	if m != nil {
		return m.FileContent
	}
	return nil
}

func (m *MessageContent) GetTransProgress() uint64 {
	if m != nil {
		return m.TransProgress
	}
	return 0
}

func init() {
	proto.RegisterType((*MessageContentList)(nil), "go_protos.MessageContentList")
	proto.RegisterType((*MessageContent)(nil), "go_protos.MessageContent")
}

func init() { proto.RegisterFile("message_content.proto", fileDescriptor_2fdd14432c5ac9d2) }

var fileDescriptor_2fdd14432c5ac9d2 = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc7, 0x71, 0xbe, 0x3b, 0xf9, 0x00, 0x96, 0xb6, 0x0c, 0x48, 0x58, 0x56, 0x84, 0x90, 0x2f,
	0x04, 0x09, 0x9e, 0x80, 0x36, 0x14, 0x2c, 0x51, 0x14, 0x1c, 0x9f, 0xb8, 0x54, 0x26, 0x19, 0x52,
	0x0b, 0xdb, 0x1b, 0x79, 0x37, 0x88, 0xf2, 0x24, 0x3c, 0x0d, 0x67, 0x8e, 0x3c, 0x02, 0x0a, 0x2f,
	0x82, 0x76, 0x36, 0x76, 0xe3, 0x9c, 0x3c, 0xff, 0xdf, 0xfc, 0x67, 0xc6, 0x3b, 0x1a, 0x38, 0xc9,
	0x48, 0xa9, 0x78, 0x45, 0x57, 0x0b, 0x99, 0x6b, 0xca, 0xf5, 0x64, 0x5d, 0x48, 0x2d, 0xc5, 0xd1,
	0x4a, 0x5e, 0x71, 0xa4, 0xc6, 0xe7, 0x20, 0x2e, 0xad, 0xe7, 0xdc, 0x5a, 0xde, 0x27, 0x4a, 0x8b,
	0xe7, 0xd0, 0x4a, 0x13, 0xa5, 0xd1, 0xf1, 0x9a, 0x7e, 0xff, 0xe5, 0xa3, 0x49, 0xe5, 0x9f, 0xd4,
	0xcd, 0x21, 0xdb, 0xc6, 0xbf, 0xda, 0x30, 0xaa, 0x27, 0x84, 0x80, 0x56, 0x74, 0xb3, 0x26, 0x74,
	0x3c, 0xc7, 0x6f, 0x85, 0x1c, 0x0b, 0x17, 0xe0, 0xa2, 0x90, 0x59, 0xa0, 0xe6, 0x94, 0x7e, 0xc1,
	0x86, 0xe7, 0xf8, 0xbd, 0x70, 0x8f, 0x98, 0x1a, 0xa3, 0xb0, 0xe9, 0x39, 0xfe, 0x20, 0xe4, 0x58,
	0x8c, 0xa0, 0x11, 0x49, 0x6c, 0x31, 0x69, 0x44, 0x52, 0x20, 0x74, 0x77, 0x23, 0xb0, 0xcd, 0xb0,
	0xbb, 0x3f, 0x31, 0xc9, 0x08, 0x3b, 0xbb, 0x89, 0x49, 0x46, 0xe2, 0x29, 0x0c, 0x67, 0x9b, 0x34,
	0x7d, 0x9d, 0x2f, 0x67, 0x1b, 0x75, 0x1d, 0x4c, 0xb1, 0xcb, 0xc9, 0x3a, 0x14, 0xa7, 0xd0, 0x99,
	0x53, 0xbe, 0x0c, 0xa6, 0xd8, 0xe3, 0x96, 0x3b, 0x65, 0x78, 0x48, 0x8b, 0x6f, 0xc1, 0x14, 0x8f,
	0x2c, 0xb7, 0xca, 0xfc, 0xc3, 0xc7, 0x8d, 0xd4, 0x14, 0x4c, 0x11, 0xec, 0x3f, 0xec, 0xa4, 0x38,
	0x86, 0xf6, 0x5c, 0xc7, 0x9a, 0xb0, 0xef, 0x39, 0xfe, 0x30, 0xb4, 0xc2, 0xd0, 0x20, 0x5f, 0xd2,
	0x77, 0x1c, 0xb0, 0xdb, 0x0a, 0xe1, 0x41, 0xff, 0x4d, 0xbe, 0x28, 0x6e, 0xd6, 0x9a, 0x17, 0x35,
	0xe4, 0x8a, 0x7d, 0x64, 0xe6, 0x04, 0xea, 0x6d, 0x21, 0x37, 0x6b, 0x1c, 0xf1, 0xb2, 0x4a, 0x29,
	0xc6, 0x30, 0xb8, 0x48, 0x52, 0xba, 0x4c, 0x32, 0xe2, 0xe2, 0xbb, 0xdc, 0xb8, 0xc6, 0x4a, 0x8f,
	0x79, 0x0b, 0xef, 0xe5, 0x1e, 0x3f, 0xbd, 0xc6, 0xc4, 0x63, 0xe8, 0x19, 0xfd, 0x21, 0xce, 0x08,
	0xef, 0x73, 0x8f, 0x4a, 0x97, 0x39, 0xee, 0x2f, 0xb8, 0xb6, 0xd2, 0x65, 0x6e, 0x9e, 0xfc, 0x20,
	0x7c, 0x70, 0x9b, 0x33, 0xba, 0xcc, 0xbd, 0x8b, 0xd5, 0x35, 0x1e, 0xdf, 0xf6, 0x34, 0x5a, 0x3c,
	0x83, 0x91, 0x89, 0xcf, 0x52, 0xb9, 0xf8, 0x1a, 0x49, 0x1d, 0xa7, 0x78, 0xc2, 0xd5, 0x07, 0xb4,
	0xe6, 0xb3, 0xab, 0x3b, 0x3d, 0xf0, 0x55, 0x3b, 0x34, 0xa4, 0xbc, 0x88, 0x87, 0x5e, 0xd3, 0x1f,
	0x84, 0xfb, 0xc8, 0x5c, 0x40, 0x54, 0xc4, 0xb9, 0x9a, 0x15, 0x72, 0x55, 0x90, 0x52, 0x88, 0xf6,
	0x02, 0x6a, 0xf0, 0xec, 0xc9, 0xef, 0xad, 0xeb, 0xfc, 0xd9, 0xba, 0xce, 0xdf, 0xad, 0xeb, 0xfc,
	0xfc, 0xe7, 0xde, 0xf9, 0xd4, 0x9f, 0xbc, 0xa8, 0x8e, 0xfe, 0x73, 0x87, 0xbf, 0xaf, 0xfe, 0x07,
	0x00, 0x00, 0xff, 0xff, 0x59, 0x9e, 0x58, 0x9d, 0x4f, 0x03, 0x00, 0x00,
}

func (m *MessageContentList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageContentList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContentList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessageContent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MessageContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.TransProgress != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.TransProgress))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if len(m.FileContent) > 0 {
		for iNdEx := len(m.FileContent) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FileContent[iNdEx])
			copy(dAtA[i:], m.FileContent[iNdEx])
			i = encodeVarintMessageContent(dAtA, i, uint64(len(m.FileContent[iNdEx])))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
	}
	if m.FileBlockIndex != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.FileBlockIndex))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.FileBlockTotal != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.FileBlockTotal))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.FileHash) > 0 {
		i -= len(m.FileHash)
		copy(dAtA[i:], m.FileHash)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.FileHash)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.FileSize != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.FileType != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.FileType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.FileName) > 0 {
		i -= len(m.FileName)
		copy(dAtA[i:], m.FileName)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.FileName)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.FileSendTime != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.FileSendTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.FileMimeType) > 0 {
		i -= len(m.FileMimeType)
		copy(dAtA[i:], m.FileMimeType)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.FileMimeType)))
		i--
		dAtA[i] = 0x7a
	}
	if m.IsGroup {
		i--
		if m.IsGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.EncryptType != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.EncryptType))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x62
	}
	if m.State != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x58
	}
	if len(m.QuoteID) > 0 {
		i -= len(m.QuoteID)
		copy(dAtA[i:], m.QuoteID)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.QuoteID)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.RecvID) > 0 {
		i -= len(m.RecvID)
		copy(dAtA[i:], m.RecvID)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.RecvID)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SendID) > 0 {
		i -= len(m.SendID)
		copy(dAtA[i:], m.SendID)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.SendID)))
		i--
		dAtA[i] = 0x42
	}
	if m.PullAndPushID != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.PullAndPushID))
		i--
		dAtA[i] = 0x38
	}
	if m.Time != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintMessageContent(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if m.FromIsSelf {
		i--
		if m.FromIsSelf {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintMessageContent(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageContent(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageContent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageContentList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovMessageContent(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovMessageContent(uint64(m.Type))
	}
	if m.FromIsSelf {
		n += 2
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovMessageContent(uint64(m.Time))
	}
	if m.PullAndPushID != 0 {
		n += 1 + sovMessageContent(uint64(m.PullAndPushID))
	}
	l = len(m.SendID)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	l = len(m.RecvID)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	l = len(m.QuoteID)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	if m.State != 0 {
		n += 1 + sovMessageContent(uint64(m.State))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	if m.EncryptType != 0 {
		n += 1 + sovMessageContent(uint64(m.EncryptType))
	}
	if m.IsGroup {
		n += 2
	}
	l = len(m.FileMimeType)
	if l > 0 {
		n += 1 + l + sovMessageContent(uint64(l))
	}
	if m.FileSendTime != 0 {
		n += 2 + sovMessageContent(uint64(m.FileSendTime))
	}
	l = len(m.FileName)
	if l > 0 {
		n += 2 + l + sovMessageContent(uint64(l))
	}
	if m.FileType != 0 {
		n += 2 + sovMessageContent(uint64(m.FileType))
	}
	if m.FileSize != 0 {
		n += 2 + sovMessageContent(uint64(m.FileSize))
	}
	l = len(m.FileHash)
	if l > 0 {
		n += 2 + l + sovMessageContent(uint64(l))
	}
	if m.FileBlockTotal != 0 {
		n += 2 + sovMessageContent(uint64(m.FileBlockTotal))
	}
	if m.FileBlockIndex != 0 {
		n += 2 + sovMessageContent(uint64(m.FileBlockIndex))
	}
	if len(m.FileContent) > 0 {
		for _, b := range m.FileContent {
			l = len(b)
			n += 2 + l + sovMessageContent(uint64(l))
		}
	}
	if m.TransProgress != 0 {
		n += 2 + sovMessageContent(uint64(m.TransProgress))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageContent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageContent(x uint64) (n int) {
	return sovMessageContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageContentList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageContentList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageContentList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &MessageContent{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromIsSelf", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.FromIsSelf = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = append(m.From[:0], dAtA[iNdEx:postIndex]...)
			if m.From == nil {
				m.From = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = append(m.To[:0], dAtA[iNdEx:postIndex]...)
			if m.To == nil {
				m.To = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullAndPushID", wireType)
			}
			m.PullAndPushID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PullAndPushID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendID = append(m.SendID[:0], dAtA[iNdEx:postIndex]...)
			if m.SendID == nil {
				m.SendID = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvID = append(m.RecvID[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvID == nil {
				m.RecvID = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteID = append(m.QuoteID[:0], dAtA[iNdEx:postIndex]...)
			if m.QuoteID == nil {
				m.QuoteID = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptType", wireType)
			}
			m.EncryptType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroup = bool(v != 0)
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileMimeType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileMimeType = append(m.FileMimeType[:0], dAtA[iNdEx:postIndex]...)
			if m.FileMimeType == nil {
				m.FileMimeType = []byte{}
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSendTime", wireType)
			}
			m.FileSendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSendTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileName = append(m.FileName[:0], dAtA[iNdEx:postIndex]...)
			if m.FileName == nil {
				m.FileName = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileType", wireType)
			}
			m.FileType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHash = append(m.FileHash[:0], dAtA[iNdEx:postIndex]...)
			if m.FileHash == nil {
				m.FileHash = []byte{}
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileBlockTotal", wireType)
			}
			m.FileBlockTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileBlockTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileBlockIndex", wireType)
			}
			m.FileBlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileBlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileContent", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageContent
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageContent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileContent = append(m.FileContent, make([]byte, postIndex-iNdEx))
			copy(m.FileContent[len(m.FileContent)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransProgress", wireType)
			}
			m.TransProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransProgress |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessageContent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageContent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageContent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageContent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageContent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageContent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageContent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageContent = fmt.Errorf("proto: unexpected end of group")
)
