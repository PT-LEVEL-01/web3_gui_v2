// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: improxyinfo.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImProxyInfoList struct {
	List                 []*ImProxyInfo `protobuf:"bytes,1,rep,name=List,proto3" json:"List,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ImProxyInfoList) Reset()         { *m = ImProxyInfoList{} }
func (m *ImProxyInfoList) String() string { return proto.CompactTextString(m) }
func (*ImProxyInfoList) ProtoMessage()    {}
func (*ImProxyInfoList) Descriptor() ([]byte, []int) {
	return fileDescriptor_b36b804575580b39, []int{0}
}
func (m *ImProxyInfoList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImProxyInfoList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImProxyInfoList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImProxyInfoList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImProxyInfoList.Merge(m, src)
}
func (m *ImProxyInfoList) XXX_Size() int {
	return m.Size()
}
func (m *ImProxyInfoList) XXX_DiscardUnknown() {
	xxx_messageInfo_ImProxyInfoList.DiscardUnknown(m)
}

var xxx_messageInfo_ImProxyInfoList proto.InternalMessageInfo

func (m *ImProxyInfoList) GetList() []*ImProxyInfo {
	if m != nil {
		return m.List
	}
	return nil
}

type ImProxyInfo struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Nickname             []byte   `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Price                uint64   `protobuf:"varint,3,opt,name=Price,proto3" json:"Price,omitempty"`
	Count                uint64   `protobuf:"varint,4,opt,name=Count,proto3" json:"Count,omitempty"`
	Open                 bool     `protobuf:"varint,5,opt,name=Open,proto3" json:"Open,omitempty"`
	Selling              uint64   `protobuf:"varint,6,opt,name=Selling,proto3" json:"Selling,omitempty"`
	SellingLock          uint64   `protobuf:"varint,7,opt,name=SellingLock,proto3" json:"SellingLock,omitempty"`
	Sold                 uint64   `protobuf:"varint,8,opt,name=Sold,proto3" json:"Sold,omitempty"`
	UseTimeMax           uint64   `protobuf:"varint,9,opt,name=UseTimeMax,proto3" json:"UseTimeMax,omitempty"`
	RenewalTime          uint64   `protobuf:"varint,10,opt,name=RenewalTime,proto3" json:"RenewalTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImProxyInfo) Reset()         { *m = ImProxyInfo{} }
func (m *ImProxyInfo) String() string { return proto.CompactTextString(m) }
func (*ImProxyInfo) ProtoMessage()    {}
func (*ImProxyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b36b804575580b39, []int{1}
}
func (m *ImProxyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImProxyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImProxyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImProxyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImProxyInfo.Merge(m, src)
}
func (m *ImProxyInfo) XXX_Size() int {
	return m.Size()
}
func (m *ImProxyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ImProxyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ImProxyInfo proto.InternalMessageInfo

func (m *ImProxyInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *ImProxyInfo) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *ImProxyInfo) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ImProxyInfo) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *ImProxyInfo) GetOpen() bool {
	if m != nil {
		return m.Open
	}
	return false
}

func (m *ImProxyInfo) GetSelling() uint64 {
	if m != nil {
		return m.Selling
	}
	return 0
}

func (m *ImProxyInfo) GetSellingLock() uint64 {
	if m != nil {
		return m.SellingLock
	}
	return 0
}

func (m *ImProxyInfo) GetSold() uint64 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *ImProxyInfo) GetUseTimeMax() uint64 {
	if m != nil {
		return m.UseTimeMax
	}
	return 0
}

func (m *ImProxyInfo) GetRenewalTime() uint64 {
	if m != nil {
		return m.RenewalTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ImProxyInfoList)(nil), "go_protos.ImProxyInfoList")
	proto.RegisterType((*ImProxyInfo)(nil), "go_protos.ImProxyInfo")
}

func init() { proto.RegisterFile("improxyinfo.proto", fileDescriptor_b36b804575580b39) }

var fileDescriptor_b36b804575580b39 = []byte{
	// 283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x9d, 0x36, 0xfd, 0xbb, 0x11, 0xc4, 0x41, 0xe4, 0x22, 0x18, 0x42, 0x57, 0xc1, 0x45,
	0x04, 0x5d, 0xbb, 0x50, 0x57, 0x85, 0xaa, 0x25, 0xd5, 0x8d, 0x1b, 0x89, 0xc9, 0xb4, 0x0c, 0x4d,
	0x66, 0x42, 0x12, 0xb1, 0x3e, 0x85, 0x5b, 0x1f, 0xc9, 0xa5, 0x8f, 0x20, 0xf1, 0x45, 0x64, 0x6e,
	0x34, 0xcc, 0xea, 0x9e, 0xf3, 0x9d, 0xc3, 0x59, 0x5c, 0xd8, 0x97, 0x79, 0x51, 0xea, 0xed, 0x9b,
	0x54, 0x2b, 0x1d, 0x16, 0xa5, 0xae, 0x35, 0x9f, 0xac, 0xf5, 0x13, 0xa9, 0x6a, 0x7a, 0x01, 0x7b,
	0xb3, 0x7c, 0x61, 0xf2, 0x99, 0x5a, 0xe9, 0xb9, 0xac, 0x6a, 0x7e, 0x02, 0x8e, 0xb9, 0xc8, 0xfc,
	0x7e, 0xe0, 0x9e, 0x1d, 0x86, 0x5d, 0x39, 0xb4, 0x9a, 0x11, 0x75, 0xa6, 0xef, 0x3d, 0x70, 0x2d,
	0xca, 0x39, 0x38, 0x97, 0x69, 0x5a, 0x22, 0xf3, 0x59, 0xb0, 0x1b, 0x91, 0xe6, 0x47, 0x30, 0xbe,
	0x95, 0xc9, 0x46, 0xc5, 0xb9, 0xc0, 0x1e, 0xf1, 0xce, 0xf3, 0x03, 0x18, 0x2c, 0x4a, 0x99, 0x08,
	0xec, 0xfb, 0x2c, 0x70, 0xa2, 0xd6, 0x18, 0x7a, 0xad, 0x5f, 0x54, 0x8d, 0x4e, 0x4b, 0xc9, 0x98,
	0xed, 0xbb, 0x42, 0x28, 0x1c, 0xf8, 0x2c, 0x18, 0x47, 0xa4, 0x39, 0xc2, 0x68, 0x29, 0xb2, 0x4c,
	0xaa, 0x35, 0x0e, 0xa9, 0xfb, 0x6f, 0xb9, 0x0f, 0xee, 0x9f, 0x9c, 0xeb, 0x64, 0x83, 0x23, 0x4a,
	0x6d, 0x64, 0xf6, 0x96, 0x3a, 0x4b, 0x71, 0x4c, 0x11, 0x69, 0xee, 0x01, 0x3c, 0x54, 0xe2, 0x5e,
	0xe6, 0xe2, 0x26, 0xde, 0xe2, 0x84, 0x12, 0x8b, 0x98, 0xd5, 0x48, 0x28, 0xf1, 0x1a, 0x67, 0x86,
	0x20, 0xb4, 0xab, 0x16, 0xba, 0x3a, 0xfe, 0x6c, 0x3c, 0xf6, 0xd5, 0x78, 0xec, 0xbb, 0xf1, 0xd8,
	0xc7, 0x8f, 0xb7, 0xf3, 0xe8, 0x86, 0xa7, 0xdd, 0x0b, 0x9f, 0x87, 0x74, 0xcf, 0x7f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x1c, 0x3b, 0x3a, 0xcc, 0x96, 0x01, 0x00, 0x00,
}

func (m *ImProxyInfoList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImProxyInfoList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImProxyInfoList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.List) > 0 {
		for iNdEx := len(m.List) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.List[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImproxyinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ImProxyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImProxyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImProxyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RenewalTime != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.RenewalTime))
		i--
		dAtA[i] = 0x50
	}
	if m.UseTimeMax != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.UseTimeMax))
		i--
		dAtA[i] = 0x48
	}
	if m.Sold != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.Sold))
		i--
		dAtA[i] = 0x40
	}
	if m.SellingLock != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.SellingLock))
		i--
		dAtA[i] = 0x38
	}
	if m.Selling != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.Selling))
		i--
		dAtA[i] = 0x30
	}
	if m.Open {
		i--
		if m.Open {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Count != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintImproxyinfo(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintImproxyinfo(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintImproxyinfo(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImproxyinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovImproxyinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImProxyInfoList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.List) > 0 {
		for _, e := range m.List {
			l = e.Size()
			n += 1 + l + sovImproxyinfo(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImProxyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovImproxyinfo(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovImproxyinfo(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovImproxyinfo(uint64(m.Price))
	}
	if m.Count != 0 {
		n += 1 + sovImproxyinfo(uint64(m.Count))
	}
	if m.Open {
		n += 2
	}
	if m.Selling != 0 {
		n += 1 + sovImproxyinfo(uint64(m.Selling))
	}
	if m.SellingLock != 0 {
		n += 1 + sovImproxyinfo(uint64(m.SellingLock))
	}
	if m.Sold != 0 {
		n += 1 + sovImproxyinfo(uint64(m.Sold))
	}
	if m.UseTimeMax != 0 {
		n += 1 + sovImproxyinfo(uint64(m.UseTimeMax))
	}
	if m.RenewalTime != 0 {
		n += 1 + sovImproxyinfo(uint64(m.RenewalTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImproxyinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImproxyinfo(x uint64) (n int) {
	return sovImproxyinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImProxyInfoList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImproxyinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImProxyInfoList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImProxyInfoList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field List", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.List = append(m.List, &ImProxyInfo{})
			if err := m.List[len(m.List)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImproxyinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImProxyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImproxyinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImProxyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImProxyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Open", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Open = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selling", wireType)
			}
			m.Selling = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selling |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingLock", wireType)
			}
			m.SellingLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellingLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sold", wireType)
			}
			m.Sold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTimeMax", wireType)
			}
			m.UseTimeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTimeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewalTime", wireType)
			}
			m.RenewalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenewalTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImproxyinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImproxyinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImproxyinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImproxyinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImproxyinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImproxyinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImproxyinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImproxyinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImproxyinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImproxyinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImproxyinfo = fmt.Errorf("proto: unexpected end of group")
)
