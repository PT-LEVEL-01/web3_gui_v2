// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_proxy_group_create.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImProxyGroupCreate struct {
	Base                  *ImProxyBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	ProxyMajor            []byte       `protobuf:"bytes,2,opt,name=ProxyMajor,proto3" json:"ProxyMajor,omitempty"`
	ShoutUp               bool         `protobuf:"varint,3,opt,name=ShoutUp,proto3" json:"ShoutUp,omitempty"`
	Nickname              []byte       `protobuf:"bytes,4,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	CreateTime            int64        `protobuf:"varint,5,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	MemberAddrsMerkleRoot []byte       `protobuf:"bytes,6,opt,name=MemberAddrsMerkleRoot,proto3" json:"MemberAddrsMerkleRoot,omitempty"`
	MembersAddr           [][]byte     `protobuf:"bytes,7,rep,name=MembersAddr,proto3" json:"MembersAddr,omitempty"`
	MembersTime           []int64      `protobuf:"varint,8,rep,packed,name=MembersTime,proto3" json:"MembersTime,omitempty"`
	MembersSign           [][]byte     `protobuf:"bytes,9,rep,name=MembersSign,proto3" json:"MembersSign,omitempty"`
	MembersSignPuk        [][]byte     `protobuf:"bytes,10,rep,name=MembersSignPuk,proto3" json:"MembersSignPuk,omitempty"`
	MembersShareKey       [][]byte     `protobuf:"bytes,11,rep,name=MembersShareKey,proto3" json:"MembersShareKey,omitempty"`
	MembersDHPuk          [][]byte     `protobuf:"bytes,12,rep,name=MembersDHPuk,proto3" json:"MembersDHPuk,omitempty"`
	Status                int64        `protobuf:"varint,13,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}     `json:"-"`
	XXX_unrecognized      []byte       `json:"-"`
	XXX_sizecache         int32        `json:"-"`
}

func (m *ImProxyGroupCreate) Reset()         { *m = ImProxyGroupCreate{} }
func (m *ImProxyGroupCreate) String() string { return proto.CompactTextString(m) }
func (*ImProxyGroupCreate) ProtoMessage()    {}
func (*ImProxyGroupCreate) Descriptor() ([]byte, []int) {
	return fileDescriptor_13511345928a0824, []int{0}
}
func (m *ImProxyGroupCreate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImProxyGroupCreate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImProxyGroupCreate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImProxyGroupCreate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImProxyGroupCreate.Merge(m, src)
}
func (m *ImProxyGroupCreate) XXX_Size() int {
	return m.Size()
}
func (m *ImProxyGroupCreate) XXX_DiscardUnknown() {
	xxx_messageInfo_ImProxyGroupCreate.DiscardUnknown(m)
}

var xxx_messageInfo_ImProxyGroupCreate proto.InternalMessageInfo

func (m *ImProxyGroupCreate) GetBase() *ImProxyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ImProxyGroupCreate) GetProxyMajor() []byte {
	if m != nil {
		return m.ProxyMajor
	}
	return nil
}

func (m *ImProxyGroupCreate) GetShoutUp() bool {
	if m != nil {
		return m.ShoutUp
	}
	return false
}

func (m *ImProxyGroupCreate) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *ImProxyGroupCreate) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ImProxyGroupCreate) GetMemberAddrsMerkleRoot() []byte {
	if m != nil {
		return m.MemberAddrsMerkleRoot
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersAddr() [][]byte {
	if m != nil {
		return m.MembersAddr
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersTime() []int64 {
	if m != nil {
		return m.MembersTime
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersSign() [][]byte {
	if m != nil {
		return m.MembersSign
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersSignPuk() [][]byte {
	if m != nil {
		return m.MembersSignPuk
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersShareKey() [][]byte {
	if m != nil {
		return m.MembersShareKey
	}
	return nil
}

func (m *ImProxyGroupCreate) GetMembersDHPuk() [][]byte {
	if m != nil {
		return m.MembersDHPuk
	}
	return nil
}

func (m *ImProxyGroupCreate) GetStatus() int64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*ImProxyGroupCreate)(nil), "go_protos.ImProxyGroupCreate")
}

func init() {
	proto.RegisterFile("imdatachain_proxy_group_create.proto", fileDescriptor_13511345928a0824)
}

var fileDescriptor_13511345928a0824 = []byte{
	// 353 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0xdf, 0x4a, 0xe3, 0x40,
	0x1c, 0x85, 0x77, 0x36, 0xdd, 0xfe, 0xf9, 0x25, 0xbb, 0x0b, 0x03, 0x96, 0xa1, 0x62, 0x08, 0x45,
	0x24, 0x78, 0x11, 0x41, 0x7d, 0x01, 0xab, 0xa0, 0x22, 0x95, 0x32, 0xd5, 0x1b, 0x6f, 0xc2, 0xb4,
	0x1d, 0xda, 0x58, 0xd3, 0x09, 0x93, 0x09, 0xd8, 0x37, 0xf1, 0x91, 0xbc, 0xf4, 0x11, 0x4a, 0x7d,
	0x11, 0x99, 0x69, 0x5a, 0xa6, 0xd5, 0xab, 0xe4, 0x7c, 0xe7, 0x9b, 0x93, 0x90, 0xc0, 0x61, 0x92,
	0x8e, 0x98, 0x62, 0xc3, 0x09, 0x4b, 0x66, 0x71, 0x26, 0xc5, 0xeb, 0x3c, 0x1e, 0x4b, 0x51, 0x64,
	0xf1, 0x50, 0x72, 0xa6, 0x78, 0x94, 0x49, 0xa1, 0x04, 0x6e, 0x8c, 0x45, 0x6c, 0xee, 0xf2, 0xd6,
	0xfe, 0xb7, 0x03, 0x03, 0x96, 0x97, 0x5e, 0x7b, 0xe1, 0x00, 0xbe, 0x4d, 0x7b, 0x9a, 0x5e, 0xeb,
	0x95, 0x4b, 0x33, 0x82, 0x8f, 0xa1, 0xd2, 0x61, 0x39, 0x27, 0x28, 0x40, 0xa1, 0x7b, 0xda, 0x8c,
	0x36, 0x6b, 0x51, 0x29, 0xeb, 0x96, 0x1a, 0x07, 0xfb, 0x00, 0x06, 0x75, 0xd9, 0xb3, 0x90, 0xe4,
	0x77, 0x80, 0x42, 0x8f, 0x5a, 0x04, 0x13, 0xa8, 0xf5, 0x27, 0xa2, 0x50, 0x8f, 0x19, 0x71, 0x02,
	0x14, 0xd6, 0xe9, 0x3a, 0xe2, 0x16, 0xd4, 0xef, 0x93, 0xe1, 0x74, 0xc6, 0x52, 0x4e, 0x2a, 0xe6,
	0xdc, 0x26, 0xeb, 0xd5, 0xd5, 0xbb, 0x3c, 0x24, 0x29, 0x27, 0x7f, 0x02, 0x14, 0x3a, 0xd4, 0x22,
	0xf8, 0x1c, 0xf6, 0xba, 0x3c, 0x1d, 0x70, 0x79, 0x31, 0x1a, 0xc9, 0xbc, 0xcb, 0xe5, 0xf4, 0x85,
	0x53, 0x21, 0x14, 0xa9, 0x9a, 0xa1, 0x9f, 0x4b, 0x1c, 0x80, 0xbb, 0x2a, 0x72, 0xdd, 0x90, 0x5a,
	0xe0, 0x84, 0x1e, 0xb5, 0x91, 0x65, 0x98, 0x07, 0xd7, 0x03, 0x27, 0x74, 0xa8, 0x8d, 0x2c, 0xa3,
	0x9f, 0x8c, 0x67, 0xa4, 0xb1, 0xb5, 0xa1, 0x11, 0x3e, 0x82, 0x7f, 0x56, 0xec, 0x15, 0x53, 0x02,
	0x46, 0xda, 0xa1, 0x38, 0x84, 0xff, 0x6b, 0x32, 0x61, 0x92, 0xdf, 0xf1, 0x39, 0x71, 0x8d, 0xb8,
	0x8b, 0x71, 0x1b, 0xbc, 0x12, 0x5d, 0xdd, 0xe8, 0x3d, 0xcf, 0x68, 0x5b, 0x0c, 0x37, 0xa1, 0xda,
	0x57, 0x4c, 0x15, 0x39, 0xf9, 0x6b, 0xbe, 0x56, 0x99, 0x3a, 0x07, 0xef, 0x4b, 0x1f, 0x7d, 0x2c,
	0x7d, 0xb4, 0x58, 0xfa, 0xe8, 0xed, 0xd3, 0xff, 0xf5, 0xe4, 0x46, 0x27, 0x9b, 0x1f, 0x3a, 0xa8,
	0x9a, 0xeb, 0xd9, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0xce, 0x31, 0x79, 0xa4, 0x58, 0x02, 0x00,
	0x00,
}

func (m *ImProxyGroupCreate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImProxyGroupCreate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImProxyGroupCreate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x68
	}
	if len(m.MembersDHPuk) > 0 {
		for iNdEx := len(m.MembersDHPuk) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersDHPuk[iNdEx])
			copy(dAtA[i:], m.MembersDHPuk[iNdEx])
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MembersDHPuk[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.MembersShareKey) > 0 {
		for iNdEx := len(m.MembersShareKey) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersShareKey[iNdEx])
			copy(dAtA[i:], m.MembersShareKey[iNdEx])
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MembersShareKey[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.MembersSignPuk) > 0 {
		for iNdEx := len(m.MembersSignPuk) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersSignPuk[iNdEx])
			copy(dAtA[i:], m.MembersSignPuk[iNdEx])
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MembersSignPuk[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.MembersSign) > 0 {
		for iNdEx := len(m.MembersSign) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersSign[iNdEx])
			copy(dAtA[i:], m.MembersSign[iNdEx])
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MembersSign[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.MembersTime) > 0 {
		dAtA2 := make([]byte, len(m.MembersTime)*10)
		var j1 int
		for _, num1 := range m.MembersTime {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MembersAddr) > 0 {
		for iNdEx := len(m.MembersAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MembersAddr[iNdEx])
			copy(dAtA[i:], m.MembersAddr[iNdEx])
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MembersAddr[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.MemberAddrsMerkleRoot) > 0 {
		i -= len(m.MemberAddrsMerkleRoot)
		copy(dAtA[i:], m.MemberAddrsMerkleRoot)
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.MemberAddrsMerkleRoot)))
		i--
		dAtA[i] = 0x32
	}
	if m.CreateTime != 0 {
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x22
	}
	if m.ShoutUp {
		i--
		if m.ShoutUp {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.ProxyMajor) > 0 {
		i -= len(m.ProxyMajor)
		copy(dAtA[i:], m.ProxyMajor)
		i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(len(m.ProxyMajor)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainProxyGroupCreate(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainProxyGroupCreate(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainProxyGroupCreate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImProxyGroupCreate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
	}
	l = len(m.ProxyMajor)
	if l > 0 {
		n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
	}
	if m.ShoutUp {
		n += 2
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovImdatachainProxyGroupCreate(uint64(m.CreateTime))
	}
	l = len(m.MemberAddrsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
	}
	if len(m.MembersAddr) > 0 {
		for _, b := range m.MembersAddr {
			l = len(b)
			n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
		}
	}
	if len(m.MembersTime) > 0 {
		l = 0
		for _, e := range m.MembersTime {
			l += sovImdatachainProxyGroupCreate(uint64(e))
		}
		n += 1 + sovImdatachainProxyGroupCreate(uint64(l)) + l
	}
	if len(m.MembersSign) > 0 {
		for _, b := range m.MembersSign {
			l = len(b)
			n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
		}
	}
	if len(m.MembersSignPuk) > 0 {
		for _, b := range m.MembersSignPuk {
			l = len(b)
			n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
		}
	}
	if len(m.MembersShareKey) > 0 {
		for _, b := range m.MembersShareKey {
			l = len(b)
			n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
		}
	}
	if len(m.MembersDHPuk) > 0 {
		for _, b := range m.MembersDHPuk {
			l = len(b)
			n += 1 + l + sovImdatachainProxyGroupCreate(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovImdatachainProxyGroupCreate(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainProxyGroupCreate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainProxyGroupCreate(x uint64) (n int) {
	return sovImdatachainProxyGroupCreate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImProxyGroupCreate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainProxyGroupCreate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImProxyGroupCreate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImProxyGroupCreate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImProxyBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProxyMajor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProxyMajor = append(m.ProxyMajor[:0], dAtA[iNdEx:postIndex]...)
			if m.ProxyMajor == nil {
				m.ProxyMajor = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShoutUp", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShoutUp = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddrsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddrsMerkleRoot = append(m.MemberAddrsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberAddrsMerkleRoot == nil {
				m.MemberAddrsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersAddr = append(m.MembersAddr, make([]byte, postIndex-iNdEx))
			copy(m.MembersAddr[len(m.MembersAddr)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImdatachainProxyGroupCreate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MembersTime = append(m.MembersTime, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImdatachainProxyGroupCreate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImdatachainProxyGroupCreate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImdatachainProxyGroupCreate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MembersTime) == 0 {
					m.MembersTime = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImdatachainProxyGroupCreate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MembersTime = append(m.MembersTime, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersTime", wireType)
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersSign = append(m.MembersSign, make([]byte, postIndex-iNdEx))
			copy(m.MembersSign[len(m.MembersSign)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersSignPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersSignPuk = append(m.MembersSignPuk, make([]byte, postIndex-iNdEx))
			copy(m.MembersSignPuk[len(m.MembersSignPuk)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersShareKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersShareKey = append(m.MembersShareKey, make([]byte, postIndex-iNdEx))
			copy(m.MembersShareKey[len(m.MembersShareKey)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MembersDHPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MembersDHPuk = append(m.MembersDHPuk, make([]byte, postIndex-iNdEx))
			copy(m.MembersDHPuk[len(m.MembersDHPuk)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainProxyGroupCreate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainProxyGroupCreate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainProxyGroupCreate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainProxyGroupCreate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainProxyGroupCreate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainProxyGroupCreate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainProxyGroupCreate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainProxyGroupCreate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainProxyGroupCreate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainProxyGroupCreate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainProxyGroupCreate = fmt.Errorf("proto: unexpected end of group")
)
