// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_proxybase.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainProxyBase struct {
	Base                 *ImProxyBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ImDataChainProxyBase) Reset()         { *m = ImDataChainProxyBase{} }
func (m *ImDataChainProxyBase) String() string { return proto.CompactTextString(m) }
func (*ImDataChainProxyBase) ProtoMessage()    {}
func (*ImDataChainProxyBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_1edb1515736d07d2, []int{0}
}
func (m *ImDataChainProxyBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainProxyBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainProxyBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainProxyBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainProxyBase.Merge(m, src)
}
func (m *ImDataChainProxyBase) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainProxyBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainProxyBase.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainProxyBase proto.InternalMessageInfo

func (m *ImDataChainProxyBase) GetBase() *ImProxyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

type ImProxyBase struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	SendID               []byte   `protobuf:"bytes,2,opt,name=SendID,proto3" json:"SendID,omitempty"`
	PreHash              []byte   `protobuf:"bytes,3,opt,name=PreHash,proto3" json:"PreHash,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	Command              uint64   `protobuf:"varint,5,opt,name=Command,proto3" json:"Command,omitempty"`
	Index                []byte   `protobuf:"bytes,6,opt,name=Index,proto3" json:"Index,omitempty"`
	SendIndex            []byte   `protobuf:"bytes,7,opt,name=SendIndex,proto3" json:"SendIndex,omitempty"`
	AddrFrom             []byte   `protobuf:"bytes,8,opt,name=AddrFrom,proto3" json:"AddrFrom,omitempty"`
	AddrTo               []byte   `protobuf:"bytes,9,opt,name=AddrTo,proto3" json:"AddrTo,omitempty"`
	AddrProxyServer      []byte   `protobuf:"bytes,10,opt,name=AddrProxyServer,proto3" json:"AddrProxyServer,omitempty"`
	GroupID              []byte   `protobuf:"bytes,11,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	EncryptType          uint64   `protobuf:"varint,12,opt,name=EncryptType,proto3" json:"EncryptType,omitempty"`
	Content              []byte   `protobuf:"bytes,13,opt,name=Content,proto3" json:"Content,omitempty"`
	Sign                 []byte   `protobuf:"bytes,14,opt,name=Sign,proto3" json:"Sign,omitempty"`
	Status               uint64   `protobuf:"varint,15,opt,name=Status,proto3" json:"Status,omitempty"`
	DhPuk                []byte   `protobuf:"bytes,16,opt,name=DhPuk,proto3" json:"DhPuk,omitempty"`
	SendTime             int64    `protobuf:"varint,17,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	RecvTime             int64    `protobuf:"varint,18,opt,name=RecvTime,proto3" json:"RecvTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ImProxyBase) Reset()         { *m = ImProxyBase{} }
func (m *ImProxyBase) String() string { return proto.CompactTextString(m) }
func (*ImProxyBase) ProtoMessage()    {}
func (*ImProxyBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_1edb1515736d07d2, []int{1}
}
func (m *ImProxyBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImProxyBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImProxyBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImProxyBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImProxyBase.Merge(m, src)
}
func (m *ImProxyBase) XXX_Size() int {
	return m.Size()
}
func (m *ImProxyBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ImProxyBase.DiscardUnknown(m)
}

var xxx_messageInfo_ImProxyBase proto.InternalMessageInfo

func (m *ImProxyBase) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *ImProxyBase) GetSendID() []byte {
	if m != nil {
		return m.SendID
	}
	return nil
}

func (m *ImProxyBase) GetPreHash() []byte {
	if m != nil {
		return m.PreHash
	}
	return nil
}

func (m *ImProxyBase) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ImProxyBase) GetCommand() uint64 {
	if m != nil {
		return m.Command
	}
	return 0
}

func (m *ImProxyBase) GetIndex() []byte {
	if m != nil {
		return m.Index
	}
	return nil
}

func (m *ImProxyBase) GetSendIndex() []byte {
	if m != nil {
		return m.SendIndex
	}
	return nil
}

func (m *ImProxyBase) GetAddrFrom() []byte {
	if m != nil {
		return m.AddrFrom
	}
	return nil
}

func (m *ImProxyBase) GetAddrTo() []byte {
	if m != nil {
		return m.AddrTo
	}
	return nil
}

func (m *ImProxyBase) GetAddrProxyServer() []byte {
	if m != nil {
		return m.AddrProxyServer
	}
	return nil
}

func (m *ImProxyBase) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ImProxyBase) GetEncryptType() uint64 {
	if m != nil {
		return m.EncryptType
	}
	return 0
}

func (m *ImProxyBase) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ImProxyBase) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *ImProxyBase) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ImProxyBase) GetDhPuk() []byte {
	if m != nil {
		return m.DhPuk
	}
	return nil
}

func (m *ImProxyBase) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ImProxyBase) GetRecvTime() int64 {
	if m != nil {
		return m.RecvTime
	}
	return 0
}

func init() {
	proto.RegisterType((*ImDataChainProxyBase)(nil), "go_protos.ImDataChainProxyBase")
	proto.RegisterType((*ImProxyBase)(nil), "go_protos.ImProxyBase")
}

func init() { proto.RegisterFile("imdatachain_proxybase.proto", fileDescriptor_1edb1515736d07d2) }

var fileDescriptor_1edb1515736d07d2 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4d, 0xae, 0xda, 0x30,
	0x14, 0x85, 0x1b, 0x08, 0x7f, 0x0e, 0x85, 0xd6, 0x42, 0xe8, 0xaa, 0x3f, 0x51, 0xc4, 0x28, 0xea,
	0x20, 0x95, 0xda, 0x15, 0x14, 0xd2, 0x9f, 0xcc, 0x50, 0x60, 0xd4, 0x09, 0x32, 0xc4, 0x82, 0xa8,
	0x8a, 0x1d, 0x39, 0x06, 0xc1, 0x4e, 0xba, 0xa4, 0x0e, 0xbb, 0x83, 0x56, 0xbc, 0x8d, 0x3c, 0xf9,
	0x3a, 0xe4, 0xa1, 0x37, 0xf2, 0xfd, 0xce, 0x39, 0x06, 0xdf, 0xa3, 0x90, 0xb7, 0x79, 0x91, 0x31,
	0xcd, 0x76, 0x07, 0x96, 0x8b, 0x4d, 0xa9, 0xe4, 0xf9, 0xb2, 0x65, 0x15, 0x8f, 0x4a, 0x25, 0xb5,
	0xa4, 0x83, 0xbd, 0xdc, 0xe0, 0x54, 0xcd, 0xe6, 0x64, 0x92, 0x14, 0x31, 0xd3, 0x6c, 0x61, 0x92,
	0x4b, 0x13, 0x9c, 0xb3, 0x8a, 0xd3, 0x0f, 0xc4, 0x35, 0x27, 0x38, 0x81, 0x13, 0x7a, 0x9f, 0xa6,
	0x51, 0x73, 0x23, 0x4a, 0x8a, 0x26, 0x95, 0x62, 0x66, 0xf6, 0xaf, 0x4d, 0xbc, 0x3b, 0x95, 0x8e,
	0x48, 0x2b, 0x89, 0xf1, 0xe6, 0x30, 0x6d, 0x25, 0x31, 0x9d, 0x92, 0xee, 0x8a, 0x8b, 0x2c, 0x89,
	0xa1, 0x85, 0x5a, 0x4d, 0x14, 0x48, 0x6f, 0xa9, 0xf8, 0x0f, 0x56, 0x1d, 0xa0, 0x8d, 0xc6, 0x0d,
	0x29, 0x25, 0x2e, 0xca, 0x2e, 0xca, 0x38, 0x9b, 0xf4, 0x42, 0x16, 0x05, 0x13, 0x19, 0x74, 0x02,
	0x27, 0x74, 0xd3, 0x1b, 0xd2, 0x09, 0xe9, 0x24, 0x22, 0xe3, 0x67, 0xe8, 0x62, 0xdc, 0x02, 0x7d,
	0x47, 0x06, 0xf8, 0x3f, 0xe8, 0xf4, 0xd0, 0x79, 0x12, 0xe8, 0x1b, 0xd2, 0xff, 0x92, 0x65, 0xea,
	0x9b, 0x92, 0x05, 0xf4, 0xd1, 0x6c, 0xd8, 0xbc, 0xd7, 0xcc, 0x6b, 0x09, 0x03, 0xfb, 0x5e, 0x4b,
	0x34, 0x24, 0x63, 0x33, 0xe1, 0xa2, 0x2b, 0xae, 0x4e, 0x5c, 0x01, 0xc1, 0xc0, 0x73, 0xd9, 0xbc,
	0xf5, 0xbb, 0x92, 0xc7, 0x32, 0x89, 0xc1, 0xb3, 0x9b, 0xd5, 0x48, 0x03, 0xe2, 0x7d, 0x15, 0x3b,
	0x75, 0x29, 0xf5, 0xfa, 0x52, 0x72, 0x18, 0xe2, 0x26, 0xf7, 0x92, 0xdd, 0x53, 0x68, 0x2e, 0x34,
	0xbc, 0xb4, 0x77, 0x6b, 0x34, 0xad, 0xac, 0xf2, 0xbd, 0x80, 0x91, 0x6d, 0xc5, 0xcc, 0xd8, 0xad,
	0x66, 0xfa, 0x58, 0xc1, 0x18, 0x7f, 0xaa, 0x26, 0xd3, 0x49, 0x7c, 0x58, 0x1e, 0x7f, 0xc1, 0x2b,
	0xdb, 0x09, 0x82, 0xd9, 0xda, 0x54, 0xb0, 0xce, 0x0b, 0x0e, 0xaf, 0x03, 0x27, 0x6c, 0xa7, 0x0d,
	0x1b, 0x2f, 0xe5, 0xbb, 0x13, 0x7a, 0xd4, 0x7a, 0x37, 0x9e, 0xbf, 0xff, 0x73, 0xf5, 0x9d, 0xbf,
	0x57, 0xdf, 0xf9, 0x7f, 0xf5, 0x9d, 0xdf, 0x0f, 0xfe, 0x8b, 0x9f, 0x5e, 0xf4, 0xb1, 0xf9, 0x24,
	0xb6, 0x5d, 0x3c, 0x3f, 0x3f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x39, 0xac, 0x05, 0x24, 0x75, 0x02,
	0x00, 0x00,
}

func (m *ImDataChainProxyBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainProxyBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainProxyBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainProxybase(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ImProxyBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImProxyBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImProxyBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RecvTime != 0 {
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(m.RecvTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.SendTime != 0 {
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.DhPuk) > 0 {
		i -= len(m.DhPuk)
		copy(dAtA[i:], m.DhPuk)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.DhPuk)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.Status != 0 {
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x78
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x6a
	}
	if m.EncryptType != 0 {
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(m.EncryptType))
		i--
		dAtA[i] = 0x60
	}
	if len(m.GroupID) > 0 {
		i -= len(m.GroupID)
		copy(dAtA[i:], m.GroupID)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.GroupID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.AddrProxyServer) > 0 {
		i -= len(m.AddrProxyServer)
		copy(dAtA[i:], m.AddrProxyServer)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.AddrProxyServer)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.AddrTo) > 0 {
		i -= len(m.AddrTo)
		copy(dAtA[i:], m.AddrTo)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.AddrTo)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.AddrFrom) > 0 {
		i -= len(m.AddrFrom)
		copy(dAtA[i:], m.AddrFrom)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.AddrFrom)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.SendIndex) > 0 {
		i -= len(m.SendIndex)
		copy(dAtA[i:], m.SendIndex)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.SendIndex)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x32
	}
	if m.Command != 0 {
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(m.Command))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PreHash) > 0 {
		i -= len(m.PreHash)
		copy(dAtA[i:], m.PreHash)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.PreHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SendID) > 0 {
		i -= len(m.SendID)
		copy(dAtA[i:], m.SendID)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.SendID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintImdatachainProxybase(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainProxybase(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainProxybase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainProxyBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ImProxyBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.SendID)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.PreHash)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	if m.Command != 0 {
		n += 1 + sovImdatachainProxybase(uint64(m.Command))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.SendIndex)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.AddrFrom)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.AddrTo)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.AddrProxyServer)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	if m.EncryptType != 0 {
		n += 1 + sovImdatachainProxybase(uint64(m.EncryptType))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovImdatachainProxybase(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImdatachainProxybase(uint64(m.Status))
	}
	l = len(m.DhPuk)
	if l > 0 {
		n += 2 + l + sovImdatachainProxybase(uint64(l))
	}
	if m.SendTime != 0 {
		n += 2 + sovImdatachainProxybase(uint64(m.SendTime))
	}
	if m.RecvTime != 0 {
		n += 2 + sovImdatachainProxybase(uint64(m.RecvTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainProxybase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainProxybase(x uint64) (n int) {
	return sovImdatachainProxybase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainProxyBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainProxybase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainProxyBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainProxyBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImProxyBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainProxybase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ImProxyBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainProxybase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImProxyBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImProxyBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendID = append(m.SendID[:0], dAtA[iNdEx:postIndex]...)
			if m.SendID == nil {
				m.SendID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreHash = append(m.PreHash[:0], dAtA[iNdEx:postIndex]...)
			if m.PreHash == nil {
				m.PreHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Command", wireType)
			}
			m.Command = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Command |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = append(m.Index[:0], dAtA[iNdEx:postIndex]...)
			if m.Index == nil {
				m.Index = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendIndex", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendIndex = append(m.SendIndex[:0], dAtA[iNdEx:postIndex]...)
			if m.SendIndex == nil {
				m.SendIndex = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrFrom", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrFrom = append(m.AddrFrom[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrFrom == nil {
				m.AddrFrom = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrTo", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrTo = append(m.AddrTo[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrTo == nil {
				m.AddrTo = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrProxyServer", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrProxyServer = append(m.AddrProxyServer[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrProxyServer == nil {
				m.AddrProxyServer = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncryptType", wireType)
			}
			m.EncryptType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncryptType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DhPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DhPuk = append(m.DhPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.DhPuk == nil {
				m.DhPuk = []byte{}
			}
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvTime", wireType)
			}
			m.RecvTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainProxybase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainProxybase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainProxybase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainProxybase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainProxybase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainProxybase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainProxybase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainProxybase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainProxybase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainProxybase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainProxybase = fmt.Errorf("proto: unexpected end of group")
)
