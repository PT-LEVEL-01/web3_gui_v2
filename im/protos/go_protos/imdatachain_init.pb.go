// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_init.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FirendListInit struct {
	Base                  *ImProxyBase   `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Version               uint64         `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	PreVersion            uint64         `protobuf:"varint,3,opt,name=PreVersion,proto3" json:"PreVersion,omitempty"`
	FirendAddrsMerkleRoot []byte         `protobuf:"bytes,4,opt,name=FirendAddrsMerkleRoot,proto3" json:"FirendAddrsMerkleRoot,omitempty"`
	FirendAddrs           [][]byte       `protobuf:"bytes,5,rep,name=FirendAddrs,proto3" json:"FirendAddrs,omitempty"`
	UserList              []*UserInfo    `protobuf:"bytes,6,rep,name=UserList,proto3" json:"UserList,omitempty"`
	GroupIDsMerkleRoot    []byte         `protobuf:"bytes,7,opt,name=GroupIDsMerkleRoot,proto3" json:"GroupIDsMerkleRoot,omitempty"`
	GroupIDs              [][]byte       `protobuf:"bytes,8,rep,name=GroupIDs,proto3" json:"GroupIDs,omitempty"`
	GroupVersions         []uint64       `protobuf:"varint,9,rep,packed,name=GroupVersions,proto3" json:"GroupVersions,omitempty"`
	GroupMembers          []*GroupMember `protobuf:"bytes,10,rep,name=GroupMembers,proto3" json:"GroupMembers,omitempty"`
	Sign                  []byte         `protobuf:"bytes,11,opt,name=Sign,proto3" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}       `json:"-"`
	XXX_unrecognized      []byte         `json:"-"`
	XXX_sizecache         int32          `json:"-"`
}

func (m *FirendListInit) Reset()         { *m = FirendListInit{} }
func (m *FirendListInit) String() string { return proto.CompactTextString(m) }
func (*FirendListInit) ProtoMessage()    {}
func (*FirendListInit) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc5c61af4544d00f, []int{0}
}
func (m *FirendListInit) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirendListInit) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FirendListInit.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FirendListInit) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirendListInit.Merge(m, src)
}
func (m *FirendListInit) XXX_Size() int {
	return m.Size()
}
func (m *FirendListInit) XXX_DiscardUnknown() {
	xxx_messageInfo_FirendListInit.DiscardUnknown(m)
}

var xxx_messageInfo_FirendListInit proto.InternalMessageInfo

func (m *FirendListInit) GetBase() *ImProxyBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *FirendListInit) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *FirendListInit) GetPreVersion() uint64 {
	if m != nil {
		return m.PreVersion
	}
	return 0
}

func (m *FirendListInit) GetFirendAddrsMerkleRoot() []byte {
	if m != nil {
		return m.FirendAddrsMerkleRoot
	}
	return nil
}

func (m *FirendListInit) GetFirendAddrs() [][]byte {
	if m != nil {
		return m.FirendAddrs
	}
	return nil
}

func (m *FirendListInit) GetUserList() []*UserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *FirendListInit) GetGroupIDsMerkleRoot() []byte {
	if m != nil {
		return m.GroupIDsMerkleRoot
	}
	return nil
}

func (m *FirendListInit) GetGroupIDs() [][]byte {
	if m != nil {
		return m.GroupIDs
	}
	return nil
}

func (m *FirendListInit) GetGroupVersions() []uint64 {
	if m != nil {
		return m.GroupVersions
	}
	return nil
}

func (m *FirendListInit) GetGroupMembers() []*GroupMember {
	if m != nil {
		return m.GroupMembers
	}
	return nil
}

func (m *FirendListInit) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

type GroupMember struct {
	GroupID               []byte      `protobuf:"bytes,1,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	Version               uint64      `protobuf:"varint,2,opt,name=Version,proto3" json:"Version,omitempty"`
	PreVersion            uint64      `protobuf:"varint,3,opt,name=PreVersion,proto3" json:"PreVersion,omitempty"`
	AdminAddr             []byte      `protobuf:"bytes,4,opt,name=AdminAddr,proto3" json:"AdminAddr,omitempty"`
	MemberAddrsMerkleRoot []byte      `protobuf:"bytes,5,opt,name=MemberAddrsMerkleRoot,proto3" json:"MemberAddrsMerkleRoot,omitempty"`
	MemberAddrs           [][]byte    `protobuf:"bytes,6,rep,name=MemberAddrs,proto3" json:"MemberAddrs,omitempty"`
	GroupIDsMerkleRoot    []byte      `protobuf:"bytes,7,opt,name=GroupIDsMerkleRoot,proto3" json:"GroupIDsMerkleRoot,omitempty"`
	UserList              []*UserInfo `protobuf:"bytes,8,rep,name=UserList,proto3" json:"UserList,omitempty"`
	Sign                  []byte      `protobuf:"bytes,9,opt,name=Sign,proto3" json:"Sign,omitempty"`
	Status                uint64      `protobuf:"varint,12,opt,name=Status,proto3" json:"Status,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}    `json:"-"`
	XXX_unrecognized      []byte      `json:"-"`
	XXX_sizecache         int32       `json:"-"`
}

func (m *GroupMember) Reset()         { *m = GroupMember{} }
func (m *GroupMember) String() string { return proto.CompactTextString(m) }
func (*GroupMember) ProtoMessage()    {}
func (*GroupMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_fc5c61af4544d00f, []int{1}
}
func (m *GroupMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMember.Merge(m, src)
}
func (m *GroupMember) XXX_Size() int {
	return m.Size()
}
func (m *GroupMember) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMember.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMember proto.InternalMessageInfo

func (m *GroupMember) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *GroupMember) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *GroupMember) GetPreVersion() uint64 {
	if m != nil {
		return m.PreVersion
	}
	return 0
}

func (m *GroupMember) GetAdminAddr() []byte {
	if m != nil {
		return m.AdminAddr
	}
	return nil
}

func (m *GroupMember) GetMemberAddrsMerkleRoot() []byte {
	if m != nil {
		return m.MemberAddrsMerkleRoot
	}
	return nil
}

func (m *GroupMember) GetMemberAddrs() [][]byte {
	if m != nil {
		return m.MemberAddrs
	}
	return nil
}

func (m *GroupMember) GetGroupIDsMerkleRoot() []byte {
	if m != nil {
		return m.GroupIDsMerkleRoot
	}
	return nil
}

func (m *GroupMember) GetUserList() []*UserInfo {
	if m != nil {
		return m.UserList
	}
	return nil
}

func (m *GroupMember) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func (m *GroupMember) GetStatus() uint64 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*FirendListInit)(nil), "go_protos.FirendListInit")
	proto.RegisterType((*GroupMember)(nil), "go_protos.GroupMember")
}

func init() { proto.RegisterFile("imdatachain_init.proto", fileDescriptor_fc5c61af4544d00f) }

var fileDescriptor_fc5c61af4544d00f = []byte{
	// 427 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x91, 0xcf, 0x8e, 0xd3, 0x30,
	0x10, 0xc6, 0xc9, 0x26, 0xdb, 0x4d, 0x26, 0x61, 0x0f, 0x46, 0x54, 0x56, 0x81, 0x28, 0x5a, 0x71,
	0x88, 0x38, 0x64, 0xa5, 0x85, 0x13, 0xb7, 0x5d, 0x21, 0x50, 0x24, 0x2a, 0x55, 0xae, 0xe0, 0xc0,
	0xa5, 0x4a, 0x89, 0x5b, 0x2c, 0x88, 0x5d, 0xd9, 0xae, 0x04, 0x6f, 0xc2, 0xeb, 0x70, 0xe3, 0xc8,
	0x23, 0xa0, 0xc2, 0x83, 0x20, 0x3b, 0x7f, 0xea, 0xa2, 0x1e, 0x40, 0x7b, 0xb2, 0xe7, 0xfb, 0x3e,
	0xd9, 0x33, 0xf3, 0x83, 0x31, 0x6b, 0xea, 0x4a, 0x57, 0xef, 0x3f, 0x54, 0x8c, 0x2f, 0x18, 0x67,
	0xba, 0xd8, 0x48, 0xa1, 0x05, 0x8a, 0xd6, 0x62, 0x61, 0x6f, 0x6a, 0xf2, 0xc0, 0x8d, 0x6c, 0xa4,
	0xf8, 0xfc, 0x65, 0x59, 0x29, 0xda, 0xe6, 0x26, 0xe7, 0x5b, 0x45, 0x25, 0xe3, 0x2b, 0xd1, 0xd6,
	0x17, 0xdf, 0x7c, 0x38, 0x7f, 0xc9, 0x24, 0xe5, 0xf5, 0x6b, 0xa6, 0x74, 0xc9, 0x99, 0x46, 0x4f,
	0x20, 0xb8, 0xa9, 0x14, 0xc5, 0x5e, 0xe6, 0xe5, 0xf1, 0xd5, 0xb8, 0x18, 0x5e, 0x2e, 0xca, 0x66,
	0x66, 0x9e, 0x33, 0x2e, 0xb1, 0x19, 0x84, 0xe1, 0xec, 0x2d, 0x95, 0x8a, 0x09, 0x8e, 0x4f, 0x32,
	0x2f, 0x0f, 0x48, 0x5f, 0xa2, 0x14, 0x60, 0x26, 0x69, 0x6f, 0xfa, 0xd6, 0x74, 0x14, 0xf4, 0x0c,
	0xee, 0xb7, 0xff, 0x5e, 0xd7, 0xb5, 0x54, 0x53, 0x2a, 0x3f, 0x7e, 0xa2, 0x44, 0x08, 0x8d, 0x83,
	0xcc, 0xcb, 0x13, 0x72, 0xdc, 0x44, 0x19, 0xc4, 0x8e, 0x81, 0x4f, 0x33, 0x3f, 0x4f, 0x88, 0x2b,
	0xa1, 0x4b, 0x08, 0xdf, 0x28, 0x2a, 0xcd, 0x34, 0x78, 0x94, 0xf9, 0x79, 0x7c, 0x75, 0xcf, 0x99,
	0xc0, 0x58, 0x25, 0x5f, 0x09, 0x32, 0x84, 0x50, 0x01, 0xe8, 0x95, 0x14, 0xdb, 0x4d, 0xf9, 0xc2,
	0xed, 0xe2, 0xcc, 0x76, 0x71, 0xc4, 0x41, 0x13, 0x08, 0x7b, 0x15, 0x87, 0xf6, 0xff, 0xa1, 0x46,
	0x8f, 0xe1, 0xae, 0xbd, 0x77, 0x43, 0x2a, 0x1c, 0x65, 0x7e, 0x1e, 0x90, 0x43, 0x11, 0x3d, 0x87,
	0xc4, 0x0a, 0x53, 0xda, 0x2c, 0xa9, 0x54, 0x18, 0x6c, 0x9b, 0xee, 0xa2, 0x1d, 0x9b, 0x1c, 0x64,
	0x11, 0x82, 0x60, 0xce, 0xd6, 0x1c, 0xc7, 0xb6, 0x3f, 0x7b, 0xbf, 0xf8, 0x7d, 0x02, 0xb1, 0x13,
	0x32, 0x50, 0xba, 0x8e, 0x2c, 0xc3, 0x84, 0xf4, 0xe5, 0x2d, 0x70, 0x3d, 0x84, 0xe8, 0xba, 0x6e,
	0x18, 0x37, 0x4b, 0xee, 0x10, 0xed, 0x05, 0x03, 0xb3, 0xfd, 0xfb, 0x6f, 0x98, 0xa7, 0x2d, 0xcc,
	0xa3, 0xa6, 0x81, 0xe9, 0x18, 0x96, 0x56, 0x42, 0x5c, 0xe9, 0xbf, 0xd9, 0xb8, 0xf0, 0xc3, 0x7f,
	0x81, 0xdf, 0xaf, 0x33, 0xda, 0xaf, 0x13, 0x8d, 0x61, 0x34, 0xd7, 0x95, 0xde, 0x2a, 0x9c, 0xd8,
	0x35, 0x74, 0xd5, 0xcd, 0xa3, 0xef, 0xbb, 0xd4, 0xfb, 0xb1, 0x4b, 0xbd, 0x9f, 0xbb, 0xd4, 0xfb,
	0xfa, 0x2b, 0xbd, 0xf3, 0x2e, 0x2e, 0x2e, 0x87, 0xd7, 0x97, 0x23, 0x7b, 0x3e, 0xfd, 0x13, 0x00,
	0x00, 0xff, 0xff, 0x3a, 0xc5, 0x22, 0xdb, 0xa2, 0x03, 0x00, 0x00,
}

func (m *FirendListInit) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirendListInit) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirendListInit) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.GroupMembers) > 0 {
		for iNdEx := len(m.GroupMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImdatachainInit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.GroupVersions) > 0 {
		dAtA2 := make([]byte, len(m.GroupVersions)*10)
		var j1 int
		for _, num := range m.GroupVersions {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintImdatachainInit(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.GroupIDs) > 0 {
		for iNdEx := len(m.GroupIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.GroupIDs[iNdEx])
			copy(dAtA[i:], m.GroupIDs[iNdEx])
			i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.GroupIDs[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.GroupIDsMerkleRoot) > 0 {
		i -= len(m.GroupIDsMerkleRoot)
		copy(dAtA[i:], m.GroupIDsMerkleRoot)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.GroupIDsMerkleRoot)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImdatachainInit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.FirendAddrs) > 0 {
		for iNdEx := len(m.FirendAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FirendAddrs[iNdEx])
			copy(dAtA[i:], m.FirendAddrs[iNdEx])
			i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.FirendAddrs[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.FirendAddrsMerkleRoot) > 0 {
		i -= len(m.FirendAddrsMerkleRoot)
		copy(dAtA[i:], m.FirendAddrsMerkleRoot)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.FirendAddrsMerkleRoot)))
		i--
		dAtA[i] = 0x22
	}
	if m.PreVersion != 0 {
		i = encodeVarintImdatachainInit(dAtA, i, uint64(m.PreVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintImdatachainInit(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainInit(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Status != 0 {
		i = encodeVarintImdatachainInit(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.UserList) > 0 {
		for iNdEx := len(m.UserList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UserList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintImdatachainInit(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.GroupIDsMerkleRoot) > 0 {
		i -= len(m.GroupIDsMerkleRoot)
		copy(dAtA[i:], m.GroupIDsMerkleRoot)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.GroupIDsMerkleRoot)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MemberAddrs) > 0 {
		for iNdEx := len(m.MemberAddrs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MemberAddrs[iNdEx])
			copy(dAtA[i:], m.MemberAddrs[iNdEx])
			i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.MemberAddrs[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.MemberAddrsMerkleRoot) > 0 {
		i -= len(m.MemberAddrsMerkleRoot)
		copy(dAtA[i:], m.MemberAddrsMerkleRoot)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.MemberAddrsMerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminAddr) > 0 {
		i -= len(m.AdminAddr)
		copy(dAtA[i:], m.AdminAddr)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.AdminAddr)))
		i--
		dAtA[i] = 0x22
	}
	if m.PreVersion != 0 {
		i = encodeVarintImdatachainInit(dAtA, i, uint64(m.PreVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Version != 0 {
		i = encodeVarintImdatachainInit(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupID) > 0 {
		i -= len(m.GroupID)
		copy(dAtA[i:], m.GroupID)
		i = encodeVarintImdatachainInit(dAtA, i, uint64(len(m.GroupID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainInit(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainInit(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FirendListInit) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovImdatachainInit(uint64(m.Version))
	}
	if m.PreVersion != 0 {
		n += 1 + sovImdatachainInit(uint64(m.PreVersion))
	}
	l = len(m.FirendAddrsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if len(m.FirendAddrs) > 0 {
		for _, b := range m.FirendAddrs {
			l = len(b)
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	l = len(m.GroupIDsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if len(m.GroupIDs) > 0 {
		for _, b := range m.GroupIDs {
			l = len(b)
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	if len(m.GroupVersions) > 0 {
		l = 0
		for _, e := range m.GroupVersions {
			l += sovImdatachainInit(uint64(e))
		}
		n += 1 + sovImdatachainInit(uint64(l)) + l
	}
	if len(m.GroupMembers) > 0 {
		for _, e := range m.GroupMembers {
			l = e.Size()
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if m.Version != 0 {
		n += 1 + sovImdatachainInit(uint64(m.Version))
	}
	if m.PreVersion != 0 {
		n += 1 + sovImdatachainInit(uint64(m.PreVersion))
	}
	l = len(m.AdminAddr)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	l = len(m.MemberAddrsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if len(m.MemberAddrs) > 0 {
		for _, b := range m.MemberAddrs {
			l = len(b)
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	l = len(m.GroupIDsMerkleRoot)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if len(m.UserList) > 0 {
		for _, e := range m.UserList {
			l = e.Size()
			n += 1 + l + sovImdatachainInit(uint64(l))
		}
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovImdatachainInit(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovImdatachainInit(uint64(m.Status))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainInit(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainInit(x uint64) (n int) {
	return sovImdatachainInit(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FirendListInit) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirendListInit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirendListInit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImProxyBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreVersion", wireType)
			}
			m.PreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirendAddrsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirendAddrsMerkleRoot = append(m.FirendAddrsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.FirendAddrsMerkleRoot == nil {
				m.FirendAddrsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirendAddrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirendAddrs = append(m.FirendAddrs, make([]byte, postIndex-iNdEx))
			copy(m.FirendAddrs[len(m.FirendAddrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &UserInfo{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIDsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIDsMerkleRoot = append(m.GroupIDsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupIDsMerkleRoot == nil {
				m.GroupIDsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIDs = append(m.GroupIDs, make([]byte, postIndex-iNdEx))
			copy(m.GroupIDs[len(m.GroupIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImdatachainInit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.GroupVersions = append(m.GroupVersions, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowImdatachainInit
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthImdatachainInit
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthImdatachainInit
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.GroupVersions) == 0 {
					m.GroupVersions = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowImdatachainInit
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.GroupVersions = append(m.GroupVersions, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupVersions", wireType)
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupMembers = append(m.GroupMembers, &GroupMember{})
			if err := m.GroupMembers[len(m.GroupMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainInit
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreVersion", wireType)
			}
			m.PreVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreVersion |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddr = append(m.AdminAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminAddr == nil {
				m.AdminAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddrsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddrsMerkleRoot = append(m.MemberAddrsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.MemberAddrsMerkleRoot == nil {
				m.MemberAddrsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemberAddrs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MemberAddrs = append(m.MemberAddrs, make([]byte, postIndex-iNdEx))
			copy(m.MemberAddrs[len(m.MemberAddrs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupIDsMerkleRoot", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupIDsMerkleRoot = append(m.GroupIDsMerkleRoot[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupIDsMerkleRoot == nil {
				m.GroupIDsMerkleRoot = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserList = append(m.UserList, &UserInfo{})
			if err := m.UserList[len(m.UserList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainInit(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainInit
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainInit(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainInit
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainInit
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainInit
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainInit
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainInit
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainInit        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainInit          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainInit = fmt.Errorf("proto: unexpected end of group")
)
