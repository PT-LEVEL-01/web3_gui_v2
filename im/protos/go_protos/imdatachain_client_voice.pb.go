// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_client_voice.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainVoice struct {
	Base                 *ImClientBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Name                 []byte        `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	MimeType             []byte        `protobuf:"bytes,3,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	Second               int64         `protobuf:"varint,4,opt,name=Second,proto3" json:"Second,omitempty"`
	BlockBinary          []byte        `protobuf:"bytes,5,opt,name=BlockBinary,proto3" json:"BlockBinary,omitempty"`
	BlockCoding          string        `protobuf:"bytes,6,opt,name=BlockCoding,proto3" json:"BlockCoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImDataChainVoice) Reset()         { *m = ImDataChainVoice{} }
func (m *ImDataChainVoice) String() string { return proto.CompactTextString(m) }
func (*ImDataChainVoice) ProtoMessage()    {}
func (*ImDataChainVoice) Descriptor() ([]byte, []int) {
	return fileDescriptor_5908facfca6530bc, []int{0}
}
func (m *ImDataChainVoice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainVoice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainVoice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainVoice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainVoice.Merge(m, src)
}
func (m *ImDataChainVoice) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainVoice) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainVoice.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainVoice proto.InternalMessageInfo

func (m *ImDataChainVoice) GetBase() *ImClientBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ImDataChainVoice) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ImDataChainVoice) GetMimeType() []byte {
	if m != nil {
		return m.MimeType
	}
	return nil
}

func (m *ImDataChainVoice) GetSecond() int64 {
	if m != nil {
		return m.Second
	}
	return 0
}

func (m *ImDataChainVoice) GetBlockBinary() []byte {
	if m != nil {
		return m.BlockBinary
	}
	return nil
}

func (m *ImDataChainVoice) GetBlockCoding() string {
	if m != nil {
		return m.BlockCoding
	}
	return ""
}

func init() {
	proto.RegisterType((*ImDataChainVoice)(nil), "go_protos.ImDataChainVoice")
}

func init() { proto.RegisterFile("imdatachain_client_voice.proto", fileDescriptor_5908facfca6530bc) }

var fileDescriptor_5908facfca6530bc = []byte{
	// 241 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xcc, 0x4d, 0x49,
	0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0x2f,
	0xcb, 0xcf, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07,
	0xb3, 0x8a, 0xa5, 0x64, 0x30, 0x95, 0x26, 0x25, 0x16, 0x43, 0x15, 0x2a, 0x9d, 0x66, 0xe4, 0x12,
	0xf0, 0xcc, 0x75, 0x49, 0x2c, 0x49, 0x74, 0x06, 0x29, 0x08, 0x03, 0x99, 0x21, 0xa4, 0xcd, 0xc5,
	0xe2, 0x94, 0x58, 0x9c, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0x24, 0xae, 0x07, 0x37, 0x4c,
	0xcf, 0x33, 0xd7, 0x19, 0x6c, 0x02, 0x48, 0x3a, 0x08, 0xac, 0x48, 0x48, 0x88, 0x8b, 0xc5, 0x2f,
	0x31, 0x37, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x27, 0x08, 0xcc, 0x16, 0x92, 0xe2, 0xe2, 0xf0,
	0xcd, 0xcc, 0x4d, 0x0d, 0xa9, 0x2c, 0x48, 0x95, 0x60, 0x06, 0x8b, 0xc3, 0xf9, 0x42, 0x62, 0x5c,
	0x6c, 0xc1, 0xa9, 0xc9, 0xf9, 0x79, 0x29, 0x12, 0x2c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x50, 0x9e,
	0x90, 0x02, 0x17, 0xb7, 0x53, 0x4e, 0x7e, 0x72, 0xb6, 0x53, 0x66, 0x5e, 0x62, 0x51, 0xa5, 0x04,
	0x2b, 0x58, 0x1b, 0xb2, 0x10, 0x5c, 0x85, 0x73, 0x7e, 0x4a, 0x66, 0x5e, 0xba, 0x04, 0x9b, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0xb2, 0x90, 0x93, 0xec, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe3, 0xb1, 0x1c, 0x43, 0x14, 0xb7, 0x9e, 0x3e, 0xdc, 0xf5, 0x49,
	0x6c, 0x60, 0xda, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xef, 0x08, 0x1b, 0x7e, 0x3e, 0x01, 0x00,
	0x00,
}

func (m *ImDataChainVoice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainVoice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainVoice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BlockCoding) > 0 {
		i -= len(m.BlockCoding)
		copy(dAtA[i:], m.BlockCoding)
		i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(len(m.BlockCoding)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BlockBinary) > 0 {
		i -= len(m.BlockBinary)
		copy(dAtA[i:], m.BlockBinary)
		i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(len(m.BlockBinary)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Second != 0 {
		i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(m.Second))
		i--
		dAtA[i] = 0x20
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainClientVoice(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainClientVoice(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainClientVoice(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainVoice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainClientVoice(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImdatachainClientVoice(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImdatachainClientVoice(uint64(l))
	}
	if m.Second != 0 {
		n += 1 + sovImdatachainClientVoice(uint64(m.Second))
	}
	l = len(m.BlockBinary)
	if l > 0 {
		n += 1 + l + sovImdatachainClientVoice(uint64(l))
	}
	l = len(m.BlockCoding)
	if l > 0 {
		n += 1 + l + sovImdatachainClientVoice(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainClientVoice(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainClientVoice(x uint64) (n int) {
	return sovImdatachainClientVoice(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainVoice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainClientVoice
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainVoice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainVoice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImClientBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = append(m.MimeType[:0], dAtA[iNdEx:postIndex]...)
			if m.MimeType == nil {
				m.MimeType = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Second", wireType)
			}
			m.Second = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Second |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockBinary", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockBinary = append(m.BlockBinary[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockBinary == nil {
				m.BlockBinary = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockCoding", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockCoding = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainClientVoice(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainClientVoice
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainClientVoice(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainClientVoice
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientVoice
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainClientVoice
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainClientVoice
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainClientVoice
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainClientVoice        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainClientVoice          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainClientVoice = fmt.Errorf("proto: unexpected end of group")
)
