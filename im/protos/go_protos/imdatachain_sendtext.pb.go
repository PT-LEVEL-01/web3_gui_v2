// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_sendtext.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainSendText struct {
	Base                 *ImClientBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Content              []byte        `protobuf:"bytes,2,opt,name=Content,proto3" json:"Content,omitempty"`
	SendTime             int64         `protobuf:"varint,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	QuoteID              []byte        `protobuf:"bytes,4,opt,name=QuoteID,proto3" json:"QuoteID,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImDataChainSendText) Reset()         { *m = ImDataChainSendText{} }
func (m *ImDataChainSendText) String() string { return proto.CompactTextString(m) }
func (*ImDataChainSendText) ProtoMessage()    {}
func (*ImDataChainSendText) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b446dccc89e6201, []int{0}
}
func (m *ImDataChainSendText) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainSendText) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainSendText.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainSendText) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainSendText.Merge(m, src)
}
func (m *ImDataChainSendText) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainSendText) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainSendText.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainSendText proto.InternalMessageInfo

func (m *ImDataChainSendText) GetBase() *ImClientBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ImDataChainSendText) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ImDataChainSendText) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ImDataChainSendText) GetQuoteID() []byte {
	if m != nil {
		return m.QuoteID
	}
	return nil
}

func init() {
	proto.RegisterType((*ImDataChainSendText)(nil), "go_protos.ImDataChainSendText")
}

func init() { proto.RegisterFile("imdatachain_sendtext.proto", fileDescriptor_8b446dccc89e6201) }

var fileDescriptor_8b446dccc89e6201 = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xca, 0xcc, 0x4d, 0x49,
	0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x2f, 0x4e, 0xcd, 0x4b, 0x29, 0x49, 0xad, 0x28,
	0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x64,
	0x90, 0x95, 0x25, 0xe7, 0x64, 0xa6, 0xe6, 0x95, 0x24, 0x25, 0x16, 0xa7, 0x42, 0x14, 0x2a, 0x4d,
	0x62, 0xe4, 0x12, 0xf6, 0xcc, 0x75, 0x49, 0x2c, 0x49, 0x74, 0x06, 0x29, 0x08, 0x4e, 0xcd, 0x4b,
	0x09, 0x49, 0xad, 0x28, 0x11, 0xd2, 0xe6, 0x62, 0x71, 0x4a, 0x2c, 0x4e, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x36, 0x12, 0xd7, 0x83, 0x9b, 0xa7, 0xe7, 0x99, 0xeb, 0x0c, 0x36, 0x04, 0x24, 0x1d,
	0x04, 0x56, 0x24, 0x24, 0xc1, 0xc5, 0xee, 0x9c, 0x9f, 0x57, 0x92, 0x9a, 0x57, 0x22, 0xc1, 0xa4,
	0xc0, 0xa8, 0xc1, 0x13, 0x04, 0xe3, 0x0a, 0x49, 0x71, 0x71, 0x80, 0x8d, 0xcc, 0xcc, 0x4d, 0x95,
	0x60, 0x56, 0x60, 0xd4, 0x60, 0x0e, 0x82, 0xf3, 0x41, 0xba, 0x02, 0x4b, 0xf3, 0x4b, 0x52, 0x3d,
	0x5d, 0x24, 0x58, 0x20, 0xba, 0xa0, 0x5c, 0x27, 0xd9, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92,
	0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x6e, 0x3d, 0x7d, 0xb8, 0x0b,
	0x92, 0xd8, 0xc0, 0xb4, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x8a, 0xe8, 0x6c, 0x29, 0x01, 0x01,
	0x00, 0x00,
}

func (m *ImDataChainSendText) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainSendText) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainSendText) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.QuoteID) > 0 {
		i -= len(m.QuoteID)
		copy(dAtA[i:], m.QuoteID)
		i = encodeVarintImdatachainSendtext(dAtA, i, uint64(len(m.QuoteID)))
		i--
		dAtA[i] = 0x22
	}
	if m.SendTime != 0 {
		i = encodeVarintImdatachainSendtext(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintImdatachainSendtext(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainSendtext(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainSendtext(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainSendtext(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainSendText) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainSendtext(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovImdatachainSendtext(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovImdatachainSendtext(uint64(m.SendTime))
	}
	l = len(m.QuoteID)
	if l > 0 {
		n += 1 + l + sovImdatachainSendtext(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainSendtext(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainSendtext(x uint64) (n int) {
	return sovImdatachainSendtext(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainSendText) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainSendtext
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainSendText: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainSendText: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImClientBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteID = append(m.QuoteID[:0], dAtA[iNdEx:postIndex]...)
			if m.QuoteID == nil {
				m.QuoteID = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainSendtext(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainSendtext
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainSendtext(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainSendtext
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainSendtext
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainSendtext
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainSendtext
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainSendtext
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainSendtext        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainSendtext          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainSendtext = fmt.Errorf("proto: unexpected end of group")
)
