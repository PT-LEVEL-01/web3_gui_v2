// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: im_send_file_info.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SendFileInfo struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	FileNameAbs          []byte   `protobuf:"bytes,2,opt,name=FileNameAbs,proto3" json:"FileNameAbs,omitempty"`
	SendTime             int64    `protobuf:"varint,3,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	Name                 []byte   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	MimeType             []byte   `protobuf:"bytes,5,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	FileSize             uint64   `protobuf:"varint,6,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	BlockSize            uint64   `protobuf:"varint,7,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	Hash                 []byte   `protobuf:"bytes,8,opt,name=Hash,proto3" json:"Hash,omitempty"`
	BlockTotal           uint64   `protobuf:"varint,9,opt,name=BlockTotal,proto3" json:"BlockTotal,omitempty"`
	BlockIndex           uint64   `protobuf:"varint,10,opt,name=BlockIndex,proto3" json:"BlockIndex,omitempty"`
	Block                []byte   `protobuf:"bytes,11,opt,name=Block,proto3" json:"Block,omitempty"`
	IsGroup              bool     `protobuf:"varint,12,opt,name=IsGroup,proto3" json:"IsGroup,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SendFileInfo) Reset()         { *m = SendFileInfo{} }
func (m *SendFileInfo) String() string { return proto.CompactTextString(m) }
func (*SendFileInfo) ProtoMessage()    {}
func (*SendFileInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e402ea41737145d9, []int{0}
}
func (m *SendFileInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendFileInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendFileInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendFileInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendFileInfo.Merge(m, src)
}
func (m *SendFileInfo) XXX_Size() int {
	return m.Size()
}
func (m *SendFileInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SendFileInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SendFileInfo proto.InternalMessageInfo

func (m *SendFileInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *SendFileInfo) GetFileNameAbs() []byte {
	if m != nil {
		return m.FileNameAbs
	}
	return nil
}

func (m *SendFileInfo) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *SendFileInfo) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *SendFileInfo) GetMimeType() []byte {
	if m != nil {
		return m.MimeType
	}
	return nil
}

func (m *SendFileInfo) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *SendFileInfo) GetBlockSize() uint64 {
	if m != nil {
		return m.BlockSize
	}
	return 0
}

func (m *SendFileInfo) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *SendFileInfo) GetBlockTotal() uint64 {
	if m != nil {
		return m.BlockTotal
	}
	return 0
}

func (m *SendFileInfo) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *SendFileInfo) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func (m *SendFileInfo) GetIsGroup() bool {
	if m != nil {
		return m.IsGroup
	}
	return false
}

func init() {
	proto.RegisterType((*SendFileInfo)(nil), "go_protos.SendFileInfo")
}

func init() { proto.RegisterFile("im_send_file_info.proto", fileDescriptor_e402ea41737145d9) }

var fileDescriptor_e402ea41737145d9 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xbd, 0x4e, 0x84, 0x40,
	0x14, 0x85, 0x9d, 0xfd, 0x85, 0x0b, 0xd5, 0xc4, 0xc4, 0x1b, 0xa3, 0x84, 0x58, 0x51, 0xad, 0x85,
	0x4f, 0xb0, 0x5b, 0xa8, 0x14, 0x5a, 0xb0, 0x54, 0x36, 0x84, 0x95, 0x41, 0x27, 0x02, 0x43, 0x60,
	0x4d, 0xd4, 0x27, 0xf1, 0x91, 0xac, 0x8c, 0x8f, 0x60, 0xf0, 0x45, 0xcc, 0xbd, 0x44, 0xa4, 0xe2,
	0x9c, 0xf3, 0x1d, 0xce, 0x4d, 0x06, 0x8e, 0x74, 0x99, 0xb4, 0xaa, 0xca, 0x92, 0x5c, 0x17, 0x2a,
	0xd1, 0x55, 0x6e, 0x56, 0x75, 0x63, 0xf6, 0x46, 0xda, 0x0f, 0x26, 0x61, 0xd5, 0x9e, 0x7d, 0x4e,
	0xc0, 0xdd, 0xaa, 0x2a, 0xbb, 0xd4, 0x85, 0x0a, 0xab, 0xdc, 0x48, 0x09, 0xb3, 0x75, 0x96, 0x35,
	0x28, 0x7c, 0x11, 0xb8, 0x11, 0x6b, 0xe9, 0x83, 0x43, 0xfc, 0x36, 0x2d, 0xd5, 0x7a, 0xd7, 0xe2,
	0x84, 0xd1, 0x38, 0x92, 0xc7, 0x60, 0xd1, 0x4a, 0xac, 0x4b, 0x85, 0x53, 0x5f, 0x04, 0xd3, 0x68,
	0xf0, 0xb4, 0x48, 0x35, 0x9c, 0xf5, 0x8b, 0xa4, 0xa9, 0x7f, 0xa3, 0x4b, 0x15, 0xbf, 0xd6, 0x0a,
	0xe7, 0x9c, 0x0f, 0x9e, 0x18, 0x4d, 0x6f, 0xf5, 0x9b, 0xc2, 0x85, 0x2f, 0x82, 0x59, 0x34, 0x78,
	0x79, 0x02, 0xf6, 0xa6, 0x30, 0xf7, 0x4f, 0x0c, 0x97, 0x0c, 0xff, 0x03, 0xba, 0x74, 0x9d, 0xb6,
	0x8f, 0x68, 0xf5, 0x97, 0x48, 0x4b, 0x0f, 0x80, 0x0b, 0xb1, 0xd9, 0xa7, 0x05, 0xda, 0xfc, 0xcb,
	0x28, 0x19, 0x78, 0x58, 0x65, 0xea, 0x05, 0x61, 0xc4, 0x39, 0x91, 0x87, 0x30, 0x67, 0x87, 0x0e,
	0x8f, 0xf6, 0x46, 0x22, 0x2c, 0xc3, 0xf6, 0xaa, 0x31, 0xcf, 0x35, 0xba, 0xbe, 0x08, 0xac, 0xe8,
	0xcf, 0x6e, 0x4e, 0x3f, 0x3a, 0x4f, 0x7c, 0x75, 0x9e, 0xf8, 0xee, 0x3c, 0xf1, 0xfe, 0xe3, 0x1d,
	0xdc, 0x39, 0xab, 0xf3, 0xe1, 0xbd, 0x77, 0x0b, 0xfe, 0x5e, 0xfc, 0x06, 0x00, 0x00, 0xff, 0xff,
	0xaf, 0x2f, 0x0d, 0x1d, 0x9c, 0x01, 0x00, 0x00,
}

func (m *SendFileInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendFileInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SendFileInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IsGroup {
		i--
		if m.IsGroup {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x5a
	}
	if m.BlockIndex != 0 {
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(m.BlockIndex))
		i--
		dAtA[i] = 0x50
	}
	if m.BlockTotal != 0 {
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(m.BlockTotal))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x42
	}
	if m.BlockSize != 0 {
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(m.BlockSize))
		i--
		dAtA[i] = 0x38
	}
	if m.FileSize != 0 {
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.SendTime != 0 {
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x18
	}
	if len(m.FileNameAbs) > 0 {
		i -= len(m.FileNameAbs)
		copy(dAtA[i:], m.FileNameAbs)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.FileNameAbs)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintImSendFileInfo(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImSendFileInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovImSendFileInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SendFileInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	l = len(m.FileNameAbs)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovImSendFileInfo(uint64(m.SendTime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	if m.FileSize != 0 {
		n += 1 + sovImSendFileInfo(uint64(m.FileSize))
	}
	if m.BlockSize != 0 {
		n += 1 + sovImSendFileInfo(uint64(m.BlockSize))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	if m.BlockTotal != 0 {
		n += 1 + sovImSendFileInfo(uint64(m.BlockTotal))
	}
	if m.BlockIndex != 0 {
		n += 1 + sovImSendFileInfo(uint64(m.BlockIndex))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovImSendFileInfo(uint64(l))
	}
	if m.IsGroup {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImSendFileInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImSendFileInfo(x uint64) (n int) {
	return sovImSendFileInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SendFileInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImSendFileInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendFileInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendFileInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileNameAbs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileNameAbs = append(m.FileNameAbs[:0], dAtA[iNdEx:postIndex]...)
			if m.FileNameAbs == nil {
				m.FileNameAbs = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = append(m.MimeType[:0], dAtA[iNdEx:postIndex]...)
			if m.MimeType == nil {
				m.MimeType = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockSize", wireType)
			}
			m.BlockSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTotal", wireType)
			}
			m.BlockTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsGroup", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsGroup = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipImSendFileInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImSendFileInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImSendFileInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImSendFileInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImSendFileInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImSendFileInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImSendFileInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImSendFileInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImSendFileInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImSendFileInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImSendFileInfo = fmt.Errorf("proto: unexpected end of group")
)
