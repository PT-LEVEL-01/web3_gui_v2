// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_client_file.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainFile struct {
	Base                 *ImClientBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	SendTime             uint64        `protobuf:"varint,2,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	Name                 []byte        `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	MimeType             []byte        `protobuf:"bytes,4,opt,name=MimeType,proto3" json:"MimeType,omitempty"`
	Size_                uint64        `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	Hash                 []byte        `protobuf:"bytes,6,opt,name=Hash,proto3" json:"Hash,omitempty"`
	BlockTotal           uint64        `protobuf:"varint,7,opt,name=BlockTotal,proto3" json:"BlockTotal,omitempty"`
	BlockIndex           uint64        `protobuf:"varint,8,opt,name=BlockIndex,proto3" json:"BlockIndex,omitempty"`
	Block                []byte        `protobuf:"bytes,9,opt,name=Block,proto3" json:"Block,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImDataChainFile) Reset()         { *m = ImDataChainFile{} }
func (m *ImDataChainFile) String() string { return proto.CompactTextString(m) }
func (*ImDataChainFile) ProtoMessage()    {}
func (*ImDataChainFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_d213c4cf36a8a124, []int{0}
}
func (m *ImDataChainFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainFile.Merge(m, src)
}
func (m *ImDataChainFile) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainFile) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainFile.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainFile proto.InternalMessageInfo

func (m *ImDataChainFile) GetBase() *ImClientBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ImDataChainFile) GetSendTime() uint64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ImDataChainFile) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *ImDataChainFile) GetMimeType() []byte {
	if m != nil {
		return m.MimeType
	}
	return nil
}

func (m *ImDataChainFile) GetSize_() uint64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *ImDataChainFile) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *ImDataChainFile) GetBlockTotal() uint64 {
	if m != nil {
		return m.BlockTotal
	}
	return 0
}

func (m *ImDataChainFile) GetBlockIndex() uint64 {
	if m != nil {
		return m.BlockIndex
	}
	return 0
}

func (m *ImDataChainFile) GetBlock() []byte {
	if m != nil {
		return m.Block
	}
	return nil
}

func init() {
	proto.RegisterType((*ImDataChainFile)(nil), "go_protos.ImDataChainFile")
}

func init() { proto.RegisterFile("imdatachain_client_file.proto", fileDescriptor_d213c4cf36a8a124) }

var fileDescriptor_d213c4cf36a8a124 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcd, 0xcc, 0x4d, 0x49,
	0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0x4f,
	0xcb, 0xcc, 0x49, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3,
	0x8a, 0xa5, 0x64, 0x30, 0x55, 0x26, 0x25, 0x16, 0x43, 0x15, 0x2a, 0x75, 0x30, 0x71, 0xf1, 0x7b,
	0xe6, 0xba, 0x24, 0x96, 0x24, 0x3a, 0x83, 0x14, 0xb8, 0x65, 0xe6, 0xa4, 0x0a, 0x69, 0x73, 0xb1,
	0x38, 0x25, 0x16, 0xa7, 0x4a, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x1b, 0x89, 0xeb, 0xc1, 0xcd, 0xd2,
	0xf3, 0xcc, 0x75, 0x06, 0x1b, 0x00, 0x92, 0x0e, 0x02, 0x2b, 0x12, 0x92, 0xe2, 0xe2, 0x08, 0x4e,
	0xcd, 0x4b, 0x09, 0xc9, 0xcc, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x09, 0x82, 0xf3, 0x85,
	0x84, 0xb8, 0x58, 0xfc, 0x12, 0x73, 0x53, 0x25, 0x98, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c,
	0x90, 0x7a, 0xdf, 0xcc, 0xdc, 0xd4, 0x90, 0xca, 0x82, 0x54, 0x09, 0x16, 0xb0, 0x38, 0x9c, 0x0f,
	0x52, 0x1f, 0x9c, 0x59, 0x95, 0x2a, 0xc1, 0x0a, 0x36, 0x07, 0xcc, 0x06, 0x89, 0x79, 0x24, 0x16,
	0x67, 0x48, 0xb0, 0x41, 0xcc, 0x00, 0xb1, 0x85, 0xe4, 0xb8, 0xb8, 0x9c, 0x72, 0xf2, 0x93, 0xb3,
	0x43, 0xf2, 0x4b, 0x12, 0x73, 0x24, 0xd8, 0xc1, 0xaa, 0x91, 0x44, 0xe0, 0xf2, 0x9e, 0x79, 0x29,
	0xa9, 0x15, 0x12, 0x1c, 0x48, 0xf2, 0x60, 0x11, 0x21, 0x11, 0x2e, 0x56, 0x30, 0x4f, 0x82, 0x13,
	0x6c, 0x28, 0x84, 0xe3, 0x24, 0x7b, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e,
	0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xad, 0xa7, 0x0f, 0xf7, 0x7b, 0x12, 0x1b, 0x98,
	0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x36, 0x4b, 0x2e, 0xf3, 0x7a, 0x01, 0x00, 0x00,
}

func (m *ImDataChainFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Block) > 0 {
		i -= len(m.Block)
		copy(dAtA[i:], m.Block)
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(len(m.Block)))
		i--
		dAtA[i] = 0x4a
	}
	if m.BlockIndex != 0 {
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(m.BlockIndex))
		i--
		dAtA[i] = 0x40
	}
	if m.BlockTotal != 0 {
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(m.BlockTotal))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Size_ != 0 {
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x28
	}
	if len(m.MimeType) > 0 {
		i -= len(m.MimeType)
		copy(dAtA[i:], m.MimeType)
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(len(m.MimeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SendTime != 0 {
		i = encodeVarintImdatachainClientFile(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainClientFile(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainClientFile(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainClientFile(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainClientFile(uint64(l))
	}
	if m.SendTime != 0 {
		n += 1 + sovImdatachainClientFile(uint64(m.SendTime))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovImdatachainClientFile(uint64(l))
	}
	l = len(m.MimeType)
	if l > 0 {
		n += 1 + l + sovImdatachainClientFile(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovImdatachainClientFile(uint64(m.Size_))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovImdatachainClientFile(uint64(l))
	}
	if m.BlockTotal != 0 {
		n += 1 + sovImdatachainClientFile(uint64(m.BlockTotal))
	}
	if m.BlockIndex != 0 {
		n += 1 + sovImdatachainClientFile(uint64(m.BlockIndex))
	}
	l = len(m.Block)
	if l > 0 {
		n += 1 + l + sovImdatachainClientFile(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainClientFile(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainClientFile(x uint64) (n int) {
	return sovImdatachainClientFile(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainClientFile
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImClientBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MimeType", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MimeType = append(m.MimeType[:0], dAtA[iNdEx:postIndex]...)
			if m.MimeType == nil {
				m.MimeType = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockTotal", wireType)
			}
			m.BlockTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockIndex", wireType)
			}
			m.BlockIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Block = append(m.Block[:0], dAtA[iNdEx:postIndex]...)
			if m.Block == nil {
				m.Block = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainClientFile(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainClientFile
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainClientFile(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainClientFile
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientFile
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainClientFile
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainClientFile
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainClientFile
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainClientFile        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainClientFile          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainClientFile = fmt.Errorf("proto: unexpected end of group")
)
