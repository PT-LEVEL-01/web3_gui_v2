// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_serverinfo.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StorageServerInfo struct {
	Addr                 []byte   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Nickname             []byte   `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	IsOpen               bool     `protobuf:"varint,3,opt,name=IsOpen,proto3" json:"IsOpen,omitempty"`
	Directory            []string `protobuf:"bytes,4,rep,name=Directory,proto3" json:"Directory,omitempty"`
	Selling              uint64   `protobuf:"varint,5,opt,name=Selling,proto3" json:"Selling,omitempty"`
	SellingLock          uint64   `protobuf:"varint,6,opt,name=SellingLock,proto3" json:"SellingLock,omitempty"`
	Sold                 uint64   `protobuf:"varint,7,opt,name=Sold,proto3" json:"Sold,omitempty"`
	PriceUnit            uint64   `protobuf:"varint,8,opt,name=PriceUnit,proto3" json:"PriceUnit,omitempty"`
	UserFreelimit        uint64   `protobuf:"varint,9,opt,name=UserFreelimit,proto3" json:"UserFreelimit,omitempty"`
	UserCanTotal         uint64   `protobuf:"varint,10,opt,name=UserCanTotal,proto3" json:"UserCanTotal,omitempty"`
	UseTimeMax           uint64   `protobuf:"varint,11,opt,name=UseTimeMax,proto3" json:"UseTimeMax,omitempty"`
	RenewalTime          uint64   `protobuf:"varint,12,opt,name=RenewalTime,proto3" json:"RenewalTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageServerInfo) Reset()         { *m = StorageServerInfo{} }
func (m *StorageServerInfo) String() string { return proto.CompactTextString(m) }
func (*StorageServerInfo) ProtoMessage()    {}
func (*StorageServerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_12683a6f9a4a0a82, []int{0}
}
func (m *StorageServerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageServerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageServerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageServerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageServerInfo.Merge(m, src)
}
func (m *StorageServerInfo) XXX_Size() int {
	return m.Size()
}
func (m *StorageServerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageServerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StorageServerInfo proto.InternalMessageInfo

func (m *StorageServerInfo) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *StorageServerInfo) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *StorageServerInfo) GetIsOpen() bool {
	if m != nil {
		return m.IsOpen
	}
	return false
}

func (m *StorageServerInfo) GetDirectory() []string {
	if m != nil {
		return m.Directory
	}
	return nil
}

func (m *StorageServerInfo) GetSelling() uint64 {
	if m != nil {
		return m.Selling
	}
	return 0
}

func (m *StorageServerInfo) GetSellingLock() uint64 {
	if m != nil {
		return m.SellingLock
	}
	return 0
}

func (m *StorageServerInfo) GetSold() uint64 {
	if m != nil {
		return m.Sold
	}
	return 0
}

func (m *StorageServerInfo) GetPriceUnit() uint64 {
	if m != nil {
		return m.PriceUnit
	}
	return 0
}

func (m *StorageServerInfo) GetUserFreelimit() uint64 {
	if m != nil {
		return m.UserFreelimit
	}
	return 0
}

func (m *StorageServerInfo) GetUserCanTotal() uint64 {
	if m != nil {
		return m.UserCanTotal
	}
	return 0
}

func (m *StorageServerInfo) GetUseTimeMax() uint64 {
	if m != nil {
		return m.UseTimeMax
	}
	return 0
}

func (m *StorageServerInfo) GetRenewalTime() uint64 {
	if m != nil {
		return m.RenewalTime
	}
	return 0
}

func init() {
	proto.RegisterType((*StorageServerInfo)(nil), "go_protos.StorageServerInfo")
}

func init() { proto.RegisterFile("storage_serverinfo.proto", fileDescriptor_12683a6f9a4a0a82) }

var fileDescriptor_12683a6f9a4a0a82 = []byte{
	// 311 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0x4b, 0x4e, 0x32, 0x41,
	0x14, 0x85, 0xff, 0x02, 0x7e, 0xa0, 0x2f, 0x38, 0xb0, 0x06, 0xe6, 0xc6, 0x68, 0xa7, 0x43, 0x1c,
	0xf4, 0x08, 0x07, 0xae, 0xc0, 0x47, 0x4c, 0x48, 0x7c, 0xa5, 0x1b, 0x26, 0x4e, 0x48, 0xdb, 0x5c,
	0x48, 0x85, 0xa6, 0x8a, 0x54, 0x55, 0x7c, 0xec, 0xc4, 0x25, 0x39, 0x74, 0x09, 0x06, 0x97, 0xe0,
	0x06, 0x4c, 0x5f, 0x90, 0xc7, 0xa8, 0xce, 0xf9, 0xce, 0x49, 0xea, 0x24, 0x17, 0xd0, 0x79, 0x63,
	0xb3, 0x09, 0x0d, 0x1d, 0xd9, 0x67, 0xb2, 0x4a, 0x8f, 0x4d, 0x77, 0x6e, 0x8d, 0x37, 0x32, 0x98,
	0x98, 0x21, 0x2b, 0xd7, 0xf9, 0xa9, 0xc0, 0x7e, 0xba, 0xec, 0xa5, 0x5c, 0xeb, 0xe9, 0xb1, 0x91,
	0x12, 0x6a, 0xe7, 0xa3, 0x91, 0x45, 0x11, 0x89, 0xb8, 0x9d, 0xb0, 0x96, 0x87, 0xd0, 0xbc, 0x53,
	0xf9, 0x54, 0x67, 0x33, 0xc2, 0x0a, 0xf3, 0xb5, 0x97, 0x07, 0x50, 0xef, 0xb9, 0xfb, 0x39, 0x69,
	0xac, 0x46, 0x22, 0x6e, 0x26, 0x2b, 0x27, 0x8f, 0x20, 0xb8, 0x52, 0x96, 0x72, 0x6f, 0xec, 0x1b,
	0xd6, 0xa2, 0x6a, 0x1c, 0x24, 0x1b, 0x20, 0x11, 0x1a, 0x29, 0x15, 0x85, 0xd2, 0x13, 0xfc, 0x1f,
	0x89, 0xb8, 0x96, 0xfc, 0x59, 0x19, 0x41, 0x6b, 0x25, 0x6f, 0x4c, 0x3e, 0xc5, 0x3a, 0xa7, 0xdb,
	0xa8, 0x5c, 0x98, 0x9a, 0x62, 0x84, 0x0d, 0x8e, 0x58, 0x97, 0xbf, 0x3d, 0x58, 0x95, 0xd3, 0x40,
	0x2b, 0x8f, 0x4d, 0x0e, 0x36, 0x40, 0x9e, 0xc0, 0xde, 0xc0, 0x91, 0xbd, 0xb6, 0x44, 0x85, 0x9a,
	0x29, 0x8f, 0x01, 0x37, 0x76, 0xa1, 0xec, 0x40, 0xbb, 0x04, 0x97, 0x99, 0xee, 0x1b, 0x9f, 0x15,
	0x08, 0x5c, 0xda, 0x61, 0x32, 0x04, 0x18, 0x38, 0xea, 0xab, 0x19, 0xdd, 0x66, 0xaf, 0xd8, 0xe2,
	0xc6, 0x16, 0x29, 0xd7, 0x27, 0xa4, 0xe9, 0x25, 0x2b, 0x4a, 0x82, 0xed, 0xe5, 0xfa, 0x2d, 0x74,
	0x71, 0xfc, 0xb1, 0x08, 0xc5, 0xe7, 0x22, 0x14, 0x5f, 0x8b, 0x50, 0xbc, 0x7f, 0x87, 0xff, 0x1e,
	0x5b, 0xdd, 0xd3, 0xf5, 0x51, 0x9e, 0xea, 0xfc, 0x9e, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff, 0x49,
	0xa2, 0x1f, 0x80, 0xc2, 0x01, 0x00, 0x00,
}

func (m *StorageServerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageServerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageServerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.RenewalTime != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.RenewalTime))
		i--
		dAtA[i] = 0x60
	}
	if m.UseTimeMax != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.UseTimeMax))
		i--
		dAtA[i] = 0x58
	}
	if m.UserCanTotal != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.UserCanTotal))
		i--
		dAtA[i] = 0x50
	}
	if m.UserFreelimit != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.UserFreelimit))
		i--
		dAtA[i] = 0x48
	}
	if m.PriceUnit != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.PriceUnit))
		i--
		dAtA[i] = 0x40
	}
	if m.Sold != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.Sold))
		i--
		dAtA[i] = 0x38
	}
	if m.SellingLock != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.SellingLock))
		i--
		dAtA[i] = 0x30
	}
	if m.Selling != 0 {
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(m.Selling))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Directory) > 0 {
		for iNdEx := len(m.Directory) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Directory[iNdEx])
			copy(dAtA[i:], m.Directory[iNdEx])
			i = encodeVarintStorageServerinfo(dAtA, i, uint64(len(m.Directory[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.IsOpen {
		i--
		if m.IsOpen {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintStorageServerinfo(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageServerinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageServerinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageServerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovStorageServerinfo(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovStorageServerinfo(uint64(l))
	}
	if m.IsOpen {
		n += 2
	}
	if len(m.Directory) > 0 {
		for _, s := range m.Directory {
			l = len(s)
			n += 1 + l + sovStorageServerinfo(uint64(l))
		}
	}
	if m.Selling != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.Selling))
	}
	if m.SellingLock != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.SellingLock))
	}
	if m.Sold != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.Sold))
	}
	if m.PriceUnit != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.PriceUnit))
	}
	if m.UserFreelimit != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.UserFreelimit))
	}
	if m.UserCanTotal != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.UserCanTotal))
	}
	if m.UseTimeMax != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.UseTimeMax))
	}
	if m.RenewalTime != 0 {
		n += 1 + sovStorageServerinfo(uint64(m.RenewalTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStorageServerinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageServerinfo(x uint64) (n int) {
	return sovStorageServerinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StorageServerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageServerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageServerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageServerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOpen", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOpen = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Directory", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Directory = append(m.Directory, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selling", wireType)
			}
			m.Selling = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Selling |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SellingLock", wireType)
			}
			m.SellingLock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SellingLock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sold", wireType)
			}
			m.Sold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PriceUnit", wireType)
			}
			m.PriceUnit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PriceUnit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserFreelimit", wireType)
			}
			m.UserFreelimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserFreelimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserCanTotal", wireType)
			}
			m.UserCanTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserCanTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseTimeMax", wireType)
			}
			m.UseTimeMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseTimeMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RenewalTime", wireType)
			}
			m.RenewalTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RenewalTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageServerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageServerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageServerinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageServerinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageServerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageServerinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageServerinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageServerinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageServerinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageServerinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageServerinfo = fmt.Errorf("proto: unexpected end of group")
)
