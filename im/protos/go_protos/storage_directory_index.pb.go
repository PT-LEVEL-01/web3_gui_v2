// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_directory_index.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StorageDirectoryIndex struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ParentID             []byte   `protobuf:"bytes,2,opt,name=ParentID,proto3" json:"ParentID,omitempty"`
	Name                 string   `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Dirs                 [][]byte `protobuf:"bytes,4,rep,name=Dirs,proto3" json:"Dirs,omitempty"`
	Files                [][]byte `protobuf:"bytes,5,rep,name=Files,proto3" json:"Files,omitempty"`
	UserAddr             []byte   `protobuf:"bytes,6,opt,name=UserAddr,proto3" json:"UserAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageDirectoryIndex) Reset()         { *m = StorageDirectoryIndex{} }
func (m *StorageDirectoryIndex) String() string { return proto.CompactTextString(m) }
func (*StorageDirectoryIndex) ProtoMessage()    {}
func (*StorageDirectoryIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9513f6b1db79565, []int{0}
}
func (m *StorageDirectoryIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageDirectoryIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageDirectoryIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageDirectoryIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageDirectoryIndex.Merge(m, src)
}
func (m *StorageDirectoryIndex) XXX_Size() int {
	return m.Size()
}
func (m *StorageDirectoryIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageDirectoryIndex.DiscardUnknown(m)
}

var xxx_messageInfo_StorageDirectoryIndex proto.InternalMessageInfo

func (m *StorageDirectoryIndex) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *StorageDirectoryIndex) GetParentID() []byte {
	if m != nil {
		return m.ParentID
	}
	return nil
}

func (m *StorageDirectoryIndex) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *StorageDirectoryIndex) GetDirs() [][]byte {
	if m != nil {
		return m.Dirs
	}
	return nil
}

func (m *StorageDirectoryIndex) GetFiles() [][]byte {
	if m != nil {
		return m.Files
	}
	return nil
}

func (m *StorageDirectoryIndex) GetUserAddr() []byte {
	if m != nil {
		return m.UserAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*StorageDirectoryIndex)(nil), "go_protos.StorageDirectoryIndex")
}

func init() { proto.RegisterFile("storage_directory_index.proto", fileDescriptor_e9513f6b1db79565) }

var fileDescriptor_e9513f6b1db79565 = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0x2e, 0xc9, 0x2f,
	0x4a, 0x4c, 0x4f, 0x8d, 0x4f, 0xc9, 0x2c, 0x4a, 0x4d, 0x2e, 0xc9, 0x2f, 0xaa, 0x8c, 0xcf, 0xcc,
	0x4b, 0x49, 0xad, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3,
	0x8a, 0x95, 0xe6, 0x32, 0x72, 0x89, 0x06, 0x43, 0x14, 0xbb, 0xc0, 0xd4, 0x7a, 0x82, 0x94, 0x0a,
	0xf1, 0x71, 0x31, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0x31, 0x79, 0xba, 0x08,
	0x49, 0x71, 0x71, 0x04, 0x24, 0x16, 0xa5, 0xe6, 0x95, 0x78, 0xba, 0x48, 0x30, 0x81, 0x45, 0xe1,
	0x7c, 0x21, 0x21, 0x2e, 0x16, 0xbf, 0xc4, 0xdc, 0x54, 0x09, 0x66, 0x05, 0x46, 0x0d, 0xce, 0x20,
	0x30, 0x1b, 0x24, 0xe6, 0x92, 0x59, 0x54, 0x2c, 0xc1, 0xa2, 0xc0, 0xac, 0xc1, 0x13, 0x04, 0x66,
	0x0b, 0x89, 0x70, 0xb1, 0xba, 0x65, 0xe6, 0xa4, 0x16, 0x4b, 0xb0, 0x82, 0x05, 0x21, 0x1c, 0x90,
	0xc9, 0xa1, 0xc5, 0xa9, 0x45, 0x8e, 0x29, 0x29, 0x45, 0x12, 0x6c, 0x10, 0x93, 0x61, 0x7c, 0x27,
	0xd9, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63,
	0x39, 0x86, 0x28, 0x6e, 0x3d, 0x7d, 0xb8, 0xf3, 0x93, 0xd8, 0xc0, 0xb4, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0x48, 0x6d, 0x77, 0x59, 0xf1, 0x00, 0x00, 0x00,
}

func (m *StorageDirectoryIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageDirectoryIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageDirectoryIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Files) > 0 {
		for iNdEx := len(m.Files) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Files[iNdEx])
			copy(dAtA[i:], m.Files[iNdEx])
			i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.Files[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Dirs) > 0 {
		for iNdEx := len(m.Dirs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Dirs[iNdEx])
			copy(dAtA[i:], m.Dirs[iNdEx])
			i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.Dirs[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ParentID) > 0 {
		i -= len(m.ParentID)
		copy(dAtA[i:], m.ParentID)
		i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.ParentID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintStorageDirectoryIndex(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageDirectoryIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageDirectoryIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageDirectoryIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovStorageDirectoryIndex(uint64(l))
	}
	l = len(m.ParentID)
	if l > 0 {
		n += 1 + l + sovStorageDirectoryIndex(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovStorageDirectoryIndex(uint64(l))
	}
	if len(m.Dirs) > 0 {
		for _, b := range m.Dirs {
			l = len(b)
			n += 1 + l + sovStorageDirectoryIndex(uint64(l))
		}
	}
	if len(m.Files) > 0 {
		for _, b := range m.Files {
			l = len(b)
			n += 1 + l + sovStorageDirectoryIndex(uint64(l))
		}
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovStorageDirectoryIndex(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStorageDirectoryIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageDirectoryIndex(x uint64) (n int) {
	return sovStorageDirectoryIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StorageDirectoryIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageDirectoryIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageDirectoryIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageDirectoryIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentID = append(m.ParentID[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentID == nil {
				m.ParentID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dirs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dirs = append(m.Dirs, make([]byte, postIndex-iNdEx))
			copy(m.Dirs[len(m.Dirs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Files", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Files = append(m.Files, make([]byte, postIndex-iNdEx))
			copy(m.Files[len(m.Files)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = append(m.UserAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAddr == nil {
				m.UserAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageDirectoryIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageDirectoryIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageDirectoryIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageDirectoryIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageDirectoryIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageDirectoryIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageDirectoryIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageDirectoryIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageDirectoryIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageDirectoryIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageDirectoryIndex = fmt.Errorf("proto: unexpected end of group")
)
