// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: imdatachain_client_invitation.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ImDataChainInvitation struct {
	Base                 *ImClientBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GroupID              []byte        `protobuf:"bytes,2,opt,name=GroupID,proto3" json:"GroupID,omitempty"`
	AdminAddr            []byte        `protobuf:"bytes,3,opt,name=AdminAddr,proto3" json:"AdminAddr,omitempty"`
	Token                []byte        `protobuf:"bytes,4,opt,name=Token,proto3" json:"Token,omitempty"`
	Nickname             []byte        `protobuf:"bytes,5,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	GroupNickname        []byte        `protobuf:"bytes,6,opt,name=GroupNickname,proto3" json:"GroupNickname,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ImDataChainInvitation) Reset()         { *m = ImDataChainInvitation{} }
func (m *ImDataChainInvitation) String() string { return proto.CompactTextString(m) }
func (*ImDataChainInvitation) ProtoMessage()    {}
func (*ImDataChainInvitation) Descriptor() ([]byte, []int) {
	return fileDescriptor_62795b590d705a4a, []int{0}
}
func (m *ImDataChainInvitation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ImDataChainInvitation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ImDataChainInvitation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ImDataChainInvitation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ImDataChainInvitation.Merge(m, src)
}
func (m *ImDataChainInvitation) XXX_Size() int {
	return m.Size()
}
func (m *ImDataChainInvitation) XXX_DiscardUnknown() {
	xxx_messageInfo_ImDataChainInvitation.DiscardUnknown(m)
}

var xxx_messageInfo_ImDataChainInvitation proto.InternalMessageInfo

func (m *ImDataChainInvitation) GetBase() *ImClientBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ImDataChainInvitation) GetGroupID() []byte {
	if m != nil {
		return m.GroupID
	}
	return nil
}

func (m *ImDataChainInvitation) GetAdminAddr() []byte {
	if m != nil {
		return m.AdminAddr
	}
	return nil
}

func (m *ImDataChainInvitation) GetToken() []byte {
	if m != nil {
		return m.Token
	}
	return nil
}

func (m *ImDataChainInvitation) GetNickname() []byte {
	if m != nil {
		return m.Nickname
	}
	return nil
}

func (m *ImDataChainInvitation) GetGroupNickname() []byte {
	if m != nil {
		return m.GroupNickname
	}
	return nil
}

func init() {
	proto.RegisterType((*ImDataChainInvitation)(nil), "go_protos.ImDataChainInvitation")
}

func init() {
	proto.RegisterFile("imdatachain_client_invitation.proto", fileDescriptor_62795b590d705a4a)
}

var fileDescriptor_62795b590d705a4a = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xce, 0xcc, 0x4d, 0x49,
	0x2c, 0x49, 0x4c, 0xce, 0x48, 0xcc, 0xcc, 0x8b, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x89, 0xcf,
	0xcc, 0x2b, 0xcb, 0x2c, 0x49, 0x2c, 0xc9, 0xcc, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x64, 0x30, 0xd5, 0x27, 0x25, 0x16, 0xa7, 0x42,
	0x14, 0x2a, 0x5d, 0x61, 0xe4, 0x12, 0xf5, 0xcc, 0x75, 0x49, 0x2c, 0x49, 0x74, 0x06, 0x29, 0xf0,
	0x84, 0x1b, 0x24, 0xa4, 0xcd, 0xc5, 0xe2, 0x94, 0x58, 0x9c, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1,
	0x6d, 0x24, 0xae, 0x07, 0x37, 0x51, 0xcf, 0x33, 0xd7, 0x19, 0x6c, 0x0c, 0x48, 0x3a, 0x08, 0xac,
	0x48, 0x48, 0x82, 0x8b, 0xdd, 0xbd, 0x28, 0xbf, 0xb4, 0xc0, 0xd3, 0x45, 0x82, 0x49, 0x81, 0x51,
	0x83, 0x27, 0x08, 0xc6, 0x15, 0x92, 0xe1, 0xe2, 0x74, 0x4c, 0xc9, 0xcd, 0xcc, 0x73, 0x4c, 0x49,
	0x29, 0x92, 0x60, 0x06, 0xcb, 0x21, 0x04, 0x84, 0x44, 0xb8, 0x58, 0x43, 0xf2, 0xb3, 0x53, 0xf3,
	0x24, 0x58, 0xc0, 0x32, 0x10, 0x8e, 0x90, 0x14, 0x17, 0x87, 0x5f, 0x66, 0x72, 0x76, 0x5e, 0x62,
	0x6e, 0xaa, 0x04, 0x2b, 0x58, 0x02, 0xce, 0x17, 0x52, 0xe1, 0xe2, 0x05, 0x1b, 0x0d, 0x57, 0xc0,
	0x06, 0x56, 0x80, 0x2a, 0xe8, 0x24, 0x7b, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xad, 0xa7, 0x0f, 0xf7, 0x41, 0x12, 0x1b,
	0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x07, 0xe6, 0xf6, 0xdf, 0x4c, 0x01, 0x00, 0x00,
}

func (m *ImDataChainInvitation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ImDataChainInvitation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ImDataChainInvitation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GroupNickname) > 0 {
		i -= len(m.GroupNickname)
		copy(dAtA[i:], m.GroupNickname)
		i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(len(m.GroupNickname)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Token) > 0 {
		i -= len(m.Token)
		copy(dAtA[i:], m.Token)
		i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(len(m.Token)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AdminAddr) > 0 {
		i -= len(m.AdminAddr)
		copy(dAtA[i:], m.AdminAddr)
		i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(len(m.AdminAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GroupID) > 0 {
		i -= len(m.GroupID)
		copy(dAtA[i:], m.GroupID)
		i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(len(m.GroupID)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintImdatachainClientInvitation(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintImdatachainClientInvitation(dAtA []byte, offset int, v uint64) int {
	offset -= sovImdatachainClientInvitation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ImDataChainInvitation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	l = len(m.GroupID)
	if l > 0 {
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	l = len(m.AdminAddr)
	if l > 0 {
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	l = len(m.GroupNickname)
	if l > 0 {
		n += 1 + l + sovImdatachainClientInvitation(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovImdatachainClientInvitation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozImdatachainClientInvitation(x uint64) (n int) {
	return sovImdatachainClientInvitation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ImDataChainInvitation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowImdatachainClientInvitation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ImDataChainInvitation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ImDataChainInvitation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ImClientBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupID = append(m.GroupID[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupID == nil {
				m.GroupID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddr = append(m.AdminAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.AdminAddr == nil {
				m.AdminAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = append(m.Token[:0], dAtA[iNdEx:postIndex]...)
			if m.Token == nil {
				m.Token = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = append(m.Nickname[:0], dAtA[iNdEx:postIndex]...)
			if m.Nickname == nil {
				m.Nickname = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupNickname", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupNickname = append(m.GroupNickname[:0], dAtA[iNdEx:postIndex]...)
			if m.GroupNickname == nil {
				m.GroupNickname = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipImdatachainClientInvitation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthImdatachainClientInvitation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipImdatachainClientInvitation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowImdatachainClientInvitation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowImdatachainClientInvitation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthImdatachainClientInvitation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupImdatachainClientInvitation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthImdatachainClientInvitation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthImdatachainClientInvitation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowImdatachainClientInvitation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupImdatachainClientInvitation = fmt.Errorf("proto: unexpected end of group")
)
