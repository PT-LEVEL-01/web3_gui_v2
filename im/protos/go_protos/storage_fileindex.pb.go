// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_fileindex.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StorageDownloadStep struct {
	DBID                 []byte            `protobuf:"bytes,1,opt,name=DBID,proto3" json:"DBID,omitempty"`
	ServerAddr           []byte            `protobuf:"bytes,2,opt,name=ServerAddr,proto3" json:"ServerAddr,omitempty"`
	FileIndex            *StorageFileIndex `protobuf:"bytes,3,opt,name=FileIndex,proto3" json:"FileIndex,omitempty"`
	LocalPath            string            `protobuf:"bytes,4,opt,name=LocalPath,proto3" json:"LocalPath,omitempty"`
	Status               uint32            `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
	CreateTime           int64             `protobuf:"varint,6,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	FinishTime           int64             `protobuf:"varint,7,opt,name=FinishTime,proto3" json:"FinishTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StorageDownloadStep) Reset()         { *m = StorageDownloadStep{} }
func (m *StorageDownloadStep) String() string { return proto.CompactTextString(m) }
func (*StorageDownloadStep) ProtoMessage()    {}
func (*StorageDownloadStep) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b3d540708406df9, []int{0}
}
func (m *StorageDownloadStep) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageDownloadStep) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageDownloadStep.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageDownloadStep) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageDownloadStep.Merge(m, src)
}
func (m *StorageDownloadStep) XXX_Size() int {
	return m.Size()
}
func (m *StorageDownloadStep) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageDownloadStep.DiscardUnknown(m)
}

var xxx_messageInfo_StorageDownloadStep proto.InternalMessageInfo

func (m *StorageDownloadStep) GetDBID() []byte {
	if m != nil {
		return m.DBID
	}
	return nil
}

func (m *StorageDownloadStep) GetServerAddr() []byte {
	if m != nil {
		return m.ServerAddr
	}
	return nil
}

func (m *StorageDownloadStep) GetFileIndex() *StorageFileIndex {
	if m != nil {
		return m.FileIndex
	}
	return nil
}

func (m *StorageDownloadStep) GetLocalPath() string {
	if m != nil {
		return m.LocalPath
	}
	return ""
}

func (m *StorageDownloadStep) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *StorageDownloadStep) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *StorageDownloadStep) GetFinishTime() int64 {
	if m != nil {
		return m.FinishTime
	}
	return 0
}

type StorageFileIndex struct {
	ID                   []byte   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Hash                 []byte   `protobuf:"bytes,2,opt,name=Hash,proto3" json:"Hash,omitempty"`
	DirID                [][]byte `protobuf:"bytes,3,rep,name=DirID,proto3" json:"DirID,omitempty"`
	UserAddr             [][]byte `protobuf:"bytes,4,rep,name=UserAddr,proto3" json:"UserAddr,omitempty"`
	Pwds                 [][]byte `protobuf:"bytes,5,rep,name=Pwds,proto3" json:"Pwds,omitempty"`
	Version              uint32   `protobuf:"varint,6,opt,name=Version,proto3" json:"Version,omitempty"`
	Name                 []string `protobuf:"bytes,7,rep,name=Name,proto3" json:"Name,omitempty"`
	FileSize             uint64   `protobuf:"varint,8,opt,name=FileSize,proto3" json:"FileSize,omitempty"`
	ChunkCount           uint32   `protobuf:"varint,9,opt,name=ChunkCount,proto3" json:"ChunkCount,omitempty"`
	ChunkOneSize         uint64   `protobuf:"varint,10,opt,name=ChunkOneSize,proto3" json:"ChunkOneSize,omitempty"`
	Chunks               [][]byte `protobuf:"bytes,11,rep,name=Chunks,proto3" json:"Chunks,omitempty"`
	PullIDs              [][]byte `protobuf:"bytes,12,rep,name=PullIDs,proto3" json:"PullIDs,omitempty"`
	PermissionType       []uint32 `protobuf:"varint,13,rep,packed,name=PermissionType,proto3" json:"PermissionType,omitempty"`
	Time                 []int64  `protobuf:"varint,14,rep,packed,name=Time,proto3" json:"Time,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StorageFileIndex) Reset()         { *m = StorageFileIndex{} }
func (m *StorageFileIndex) String() string { return proto.CompactTextString(m) }
func (*StorageFileIndex) ProtoMessage()    {}
func (*StorageFileIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b3d540708406df9, []int{1}
}
func (m *StorageFileIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageFileIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageFileIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageFileIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageFileIndex.Merge(m, src)
}
func (m *StorageFileIndex) XXX_Size() int {
	return m.Size()
}
func (m *StorageFileIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageFileIndex.DiscardUnknown(m)
}

var xxx_messageInfo_StorageFileIndex proto.InternalMessageInfo

func (m *StorageFileIndex) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *StorageFileIndex) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *StorageFileIndex) GetDirID() [][]byte {
	if m != nil {
		return m.DirID
	}
	return nil
}

func (m *StorageFileIndex) GetUserAddr() [][]byte {
	if m != nil {
		return m.UserAddr
	}
	return nil
}

func (m *StorageFileIndex) GetPwds() [][]byte {
	if m != nil {
		return m.Pwds
	}
	return nil
}

func (m *StorageFileIndex) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *StorageFileIndex) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *StorageFileIndex) GetFileSize() uint64 {
	if m != nil {
		return m.FileSize
	}
	return 0
}

func (m *StorageFileIndex) GetChunkCount() uint32 {
	if m != nil {
		return m.ChunkCount
	}
	return 0
}

func (m *StorageFileIndex) GetChunkOneSize() uint64 {
	if m != nil {
		return m.ChunkOneSize
	}
	return 0
}

func (m *StorageFileIndex) GetChunks() [][]byte {
	if m != nil {
		return m.Chunks
	}
	return nil
}

func (m *StorageFileIndex) GetPullIDs() [][]byte {
	if m != nil {
		return m.PullIDs
	}
	return nil
}

func (m *StorageFileIndex) GetPermissionType() []uint32 {
	if m != nil {
		return m.PermissionType
	}
	return nil
}

func (m *StorageFileIndex) GetTime() []int64 {
	if m != nil {
		return m.Time
	}
	return nil
}

func init() {
	proto.RegisterType((*StorageDownloadStep)(nil), "go_protos.StorageDownloadStep")
	proto.RegisterType((*StorageFileIndex)(nil), "go_protos.StorageFileIndex")
}

func init() { proto.RegisterFile("storage_fileindex.proto", fileDescriptor_1b3d540708406df9) }

var fileDescriptor_1b3d540708406df9 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x52, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0xd9, 0x34, 0xed, 0x4e, 0x7e, 0x84, 0x0c, 0x02, 0x8b, 0x9f, 0x95, 0x95, 0x03, 0xf2,
	0x29, 0x48, 0x70, 0xe2, 0x48, 0xbb, 0xaa, 0x58, 0x09, 0x41, 0xe4, 0x2d, 0x1c, 0xb8, 0x54, 0x86,
	0x35, 0x8d, 0xc5, 0x76, 0x1d, 0xd9, 0x0e, 0x05, 0x9e, 0x84, 0x47, 0xe2, 0xc8, 0x23, 0xa0, 0xf0,
	0x12, 0x88, 0x13, 0xf2, 0x64, 0xbb, 0x09, 0x39, 0xe5, 0xfb, 0x19, 0xcf, 0x7c, 0x33, 0x59, 0xb8,
	0xeb, 0x83, 0x75, 0xea, 0x42, 0x9f, 0x7f, 0x34, 0xb5, 0x36, 0x4d, 0xa5, 0xbf, 0xcc, 0x96, 0xce,
	0x06, 0x4b, 0xd3, 0x0b, 0x7b, 0x8e, 0xc8, 0x4f, 0xff, 0x12, 0xb8, 0x55, 0x6e, 0xca, 0x72, 0x7b,
	0xd5, 0xd4, 0x56, 0x55, 0x65, 0xd0, 0x4b, 0x4a, 0xa1, 0x9f, 0x1f, 0x17, 0x39, 0x23, 0x9c, 0x88,
	0x91, 0x44, 0x4c, 0x33, 0x80, 0x52, 0xbb, 0xcf, 0xda, 0x3d, 0xaf, 0x2a, 0xc7, 0x7a, 0xe8, 0xec,
	0x28, 0xf4, 0x19, 0xa4, 0xa7, 0xa6, 0xd6, 0x45, 0x9c, 0xc4, 0x12, 0x4e, 0xc4, 0xf0, 0xc9, 0xfd,
	0x59, 0x37, 0x6a, 0xd6, 0x8e, 0xe9, 0x4a, 0xe4, 0xb6, 0x9a, 0x3e, 0x80, 0xf4, 0xa5, 0xfd, 0xa0,
	0xea, 0xb9, 0x0a, 0x0b, 0xd6, 0xe7, 0x44, 0xa4, 0x72, 0x2b, 0xd0, 0x3b, 0x30, 0x28, 0x83, 0x0a,
	0x2b, 0xcf, 0x0e, 0x38, 0x11, 0x63, 0xd9, 0xb2, 0x18, 0xe8, 0xc4, 0x69, 0x15, 0xf4, 0x99, 0xb9,
	0xd4, 0x6c, 0xc0, 0x89, 0x48, 0xe4, 0x8e, 0x12, 0xfd, 0x53, 0xd3, 0x18, 0xbf, 0x40, 0xff, 0x70,
	0xe3, 0x6f, 0x95, 0xe9, 0x9f, 0x1e, 0xdc, 0xdc, 0x4f, 0x45, 0x27, 0xd0, 0xeb, 0xf6, 0xee, 0x15,
	0x79, 0xbc, 0xc4, 0x0b, 0xe5, 0x17, 0xed, 0xbe, 0x88, 0xe9, 0x6d, 0x38, 0xc8, 0x8d, 0x2b, 0x72,
	0x96, 0xf0, 0x44, 0x8c, 0xe4, 0x86, 0xd0, 0x7b, 0x70, 0xf4, 0xc6, 0xb7, 0xd7, 0xe9, 0xa3, 0xd1,
	0xf1, 0xd8, 0x65, 0x7e, 0x55, 0xc5, 0x05, 0xa2, 0x8e, 0x98, 0x32, 0x38, 0x7c, 0xab, 0x9d, 0x37,
	0xb6, 0xc1, 0xec, 0x63, 0x79, 0x4d, 0x63, 0xf5, 0x2b, 0x85, 0x91, 0x13, 0x91, 0x4a, 0xc4, 0xb1,
	0x7b, 0x0c, 0x59, 0x9a, 0x6f, 0x9a, 0x1d, 0x71, 0x22, 0xfa, 0xb2, 0xe3, 0x78, 0x88, 0xc5, 0xaa,
	0xf9, 0x74, 0x62, 0x57, 0x4d, 0x60, 0x29, 0x36, 0xdb, 0x51, 0xe8, 0x14, 0x46, 0xc8, 0x5e, 0x37,
	0x9b, 0xf7, 0x80, 0xef, 0xff, 0xd3, 0xe2, 0x91, 0x91, 0x7b, 0x36, 0xc4, 0x8c, 0x2d, 0x8b, 0x29,
	0xe7, 0xab, 0xba, 0x2e, 0x72, 0xcf, 0x46, 0x68, 0x5c, 0x53, 0xfa, 0x08, 0x26, 0x73, 0xed, 0x2e,
	0x8d, 0x8f, 0x99, 0xcf, 0xbe, 0x2e, 0x35, 0x1b, 0xf3, 0x44, 0x8c, 0xe5, 0x9e, 0x1a, 0xb7, 0xc1,
	0x3f, 0x60, 0xc2, 0x13, 0x91, 0x48, 0xc4, 0xc7, 0x0f, 0x7f, 0xac, 0x33, 0xf2, 0x73, 0x9d, 0x91,
	0x5f, 0xeb, 0x8c, 0x7c, 0xff, 0x9d, 0xdd, 0x78, 0x37, 0x9c, 0x3d, 0xee, 0xbe, 0x95, 0xf7, 0x03,
	0xfc, 0x7d, 0xfa, 0x2f, 0x00, 0x00, 0xff, 0xff, 0xe1, 0xd5, 0x72, 0xc7, 0xc3, 0x02, 0x00, 0x00,
}

func (m *StorageDownloadStep) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageDownloadStep) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageDownloadStep) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FinishTime != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.FinishTime))
		i--
		dAtA[i] = 0x38
	}
	if m.CreateTime != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Status != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.LocalPath) > 0 {
		i -= len(m.LocalPath)
		copy(dAtA[i:], m.LocalPath)
		i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.LocalPath)))
		i--
		dAtA[i] = 0x22
	}
	if m.FileIndex != nil {
		{
			size, err := m.FileIndex.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageFileindex(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DBID) > 0 {
		i -= len(m.DBID)
		copy(dAtA[i:], m.DBID)
		i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.DBID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageFileIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageFileIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageFileIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Time) > 0 {
		dAtA3 := make([]byte, len(m.Time)*10)
		var j2 int
		for _, num1 := range m.Time {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintStorageFileindex(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x72
	}
	if len(m.PermissionType) > 0 {
		dAtA5 := make([]byte, len(m.PermissionType)*10)
		var j4 int
		for _, num := range m.PermissionType {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintStorageFileindex(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.PullIDs) > 0 {
		for iNdEx := len(m.PullIDs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.PullIDs[iNdEx])
			copy(dAtA[i:], m.PullIDs[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.PullIDs[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.Chunks) > 0 {
		for iNdEx := len(m.Chunks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chunks[iNdEx])
			copy(dAtA[i:], m.Chunks[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.Chunks[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ChunkOneSize != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.ChunkOneSize))
		i--
		dAtA[i] = 0x50
	}
	if m.ChunkCount != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.ChunkCount))
		i--
		dAtA[i] = 0x48
	}
	if m.FileSize != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.FileSize))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Name) > 0 {
		for iNdEx := len(m.Name) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Name[iNdEx])
			copy(dAtA[i:], m.Name[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.Name[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Version != 0 {
		i = encodeVarintStorageFileindex(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Pwds) > 0 {
		for iNdEx := len(m.Pwds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Pwds[iNdEx])
			copy(dAtA[i:], m.Pwds[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.Pwds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UserAddr) > 0 {
		for iNdEx := len(m.UserAddr) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UserAddr[iNdEx])
			copy(dAtA[i:], m.UserAddr[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.UserAddr[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.DirID) > 0 {
		for iNdEx := len(m.DirID) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.DirID[iNdEx])
			copy(dAtA[i:], m.DirID[iNdEx])
			i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.DirID[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintStorageFileindex(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageFileindex(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageFileindex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageDownloadStep) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DBID)
	if l > 0 {
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	if m.FileIndex != nil {
		l = m.FileIndex.Size()
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	l = len(m.LocalPath)
	if l > 0 {
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovStorageFileindex(uint64(m.Status))
	}
	if m.CreateTime != 0 {
		n += 1 + sovStorageFileindex(uint64(m.CreateTime))
	}
	if m.FinishTime != 0 {
		n += 1 + sovStorageFileindex(uint64(m.FinishTime))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *StorageFileIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovStorageFileindex(uint64(l))
	}
	if len(m.DirID) > 0 {
		for _, b := range m.DirID {
			l = len(b)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if len(m.UserAddr) > 0 {
		for _, b := range m.UserAddr {
			l = len(b)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if len(m.Pwds) > 0 {
		for _, b := range m.Pwds {
			l = len(b)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovStorageFileindex(uint64(m.Version))
	}
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if m.FileSize != 0 {
		n += 1 + sovStorageFileindex(uint64(m.FileSize))
	}
	if m.ChunkCount != 0 {
		n += 1 + sovStorageFileindex(uint64(m.ChunkCount))
	}
	if m.ChunkOneSize != 0 {
		n += 1 + sovStorageFileindex(uint64(m.ChunkOneSize))
	}
	if len(m.Chunks) > 0 {
		for _, b := range m.Chunks {
			l = len(b)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if len(m.PullIDs) > 0 {
		for _, b := range m.PullIDs {
			l = len(b)
			n += 1 + l + sovStorageFileindex(uint64(l))
		}
	}
	if len(m.PermissionType) > 0 {
		l = 0
		for _, e := range m.PermissionType {
			l += sovStorageFileindex(uint64(e))
		}
		n += 1 + sovStorageFileindex(uint64(l)) + l
	}
	if len(m.Time) > 0 {
		l = 0
		for _, e := range m.Time {
			l += sovStorageFileindex(uint64(e))
		}
		n += 1 + sovStorageFileindex(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStorageFileindex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageFileindex(x uint64) (n int) {
	return sovStorageFileindex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StorageDownloadStep) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageFileindex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageDownloadStep: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageDownloadStep: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DBID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DBID = append(m.DBID[:0], dAtA[iNdEx:postIndex]...)
			if m.DBID == nil {
				m.DBID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = append(m.ServerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerAddr == nil {
				m.ServerAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileIndex", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FileIndex == nil {
				m.FileIndex = &StorageFileIndex{}
			}
			if err := m.FileIndex.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishTime", wireType)
			}
			m.FinishTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageFileindex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageFileIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageFileindex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageFileIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageFileIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = append(m.ID[:0], dAtA[iNdEx:postIndex]...)
			if m.ID == nil {
				m.ID = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DirID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DirID = append(m.DirID, make([]byte, postIndex-iNdEx))
			copy(m.DirID[len(m.DirID)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = append(m.UserAddr, make([]byte, postIndex-iNdEx))
			copy(m.UserAddr[len(m.UserAddr)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pwds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pwds = append(m.Pwds, make([]byte, postIndex-iNdEx))
			copy(m.Pwds[len(m.Pwds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileSize", wireType)
			}
			m.FileSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FileSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkCount", wireType)
			}
			m.ChunkCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChunkOneSize", wireType)
			}
			m.ChunkOneSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChunkOneSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chunks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chunks = append(m.Chunks, make([]byte, postIndex-iNdEx))
			copy(m.Chunks[len(m.Chunks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PullIDs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PullIDs = append(m.PullIDs, make([]byte, postIndex-iNdEx))
			copy(m.PullIDs[len(m.PullIDs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorageFileindex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PermissionType = append(m.PermissionType, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorageFileindex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStorageFileindex
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStorageFileindex
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PermissionType) == 0 {
					m.PermissionType = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorageFileindex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PermissionType = append(m.PermissionType, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PermissionType", wireType)
			}
		case 14:
			if wireType == 0 {
				var v int64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorageFileindex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Time = append(m.Time, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStorageFileindex
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthStorageFileindex
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthStorageFileindex
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Time) == 0 {
					m.Time = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStorageFileindex
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Time = append(m.Time, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageFileindex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageFileindex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageFileindex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageFileindex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageFileindex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageFileindex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageFileindex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageFileindex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageFileindex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageFileindex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageFileindex = fmt.Errorf("proto: unexpected end of group")
)
