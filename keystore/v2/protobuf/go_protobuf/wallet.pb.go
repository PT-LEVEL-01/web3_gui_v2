// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: wallet.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Wallet struct {
	AddrPre              string      `protobuf:"bytes,1,opt,name=AddrPre,proto3" json:"AddrPre,omitempty"`
	Keystore             []*Keystore `protobuf:"bytes,2,rep,name=Keystore,proto3" json:"Keystore,omitempty"`
	UseKeystore          uint64      `protobuf:"varint,3,opt,name=useKeystore,proto3" json:"useKeystore,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Wallet) Reset()         { *m = Wallet{} }
func (m *Wallet) String() string { return proto.CompactTextString(m) }
func (*Wallet) ProtoMessage()    {}
func (*Wallet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{0}
}
func (m *Wallet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Wallet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Wallet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Wallet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Wallet.Merge(m, src)
}
func (m *Wallet) XXX_Size() int {
	return m.Size()
}
func (m *Wallet) XXX_DiscardUnknown() {
	xxx_messageInfo_Wallet.DiscardUnknown(m)
}

var xxx_messageInfo_Wallet proto.InternalMessageInfo

func (m *Wallet) GetAddrPre() string {
	if m != nil {
		return m.AddrPre
	}
	return ""
}

func (m *Wallet) GetKeystore() []*Keystore {
	if m != nil {
		return m.Keystore
	}
	return nil
}

func (m *Wallet) GetUseKeystore() uint64 {
	if m != nil {
		return m.UseKeystore
	}
	return 0
}

type Keystore struct {
	Nickname             string         `protobuf:"bytes,1,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	AddrPre              string         `protobuf:"bytes,2,opt,name=AddrPre,proto3" json:"AddrPre,omitempty"`
	CryptedSeed          []byte         `protobuf:"bytes,3,opt,name=CryptedSeed,proto3" json:"CryptedSeed,omitempty"`
	Salt                 []byte         `protobuf:"bytes,4,opt,name=Salt,proto3" json:"Salt,omitempty"`
	Rounds               uint64         `protobuf:"varint,5,opt,name=Rounds,proto3" json:"Rounds,omitempty"`
	CheckHash            []byte         `protobuf:"bytes,6,opt,name=CheckHash,proto3" json:"CheckHash,omitempty"`
	CoinAddr             []*CoinAddress `protobuf:"bytes,7,rep,name=CoinAddr,proto3" json:"CoinAddr,omitempty"`
	NetAddr              []*CoinAddress `protobuf:"bytes,8,rep,name=NetAddr,proto3" json:"NetAddr,omitempty"`
	DHAddr               []*CoinAddress `protobuf:"bytes,9,rep,name=DHAddr,proto3" json:"DHAddr,omitempty"`
	CoinAddrOther        []*CoinAddress `protobuf:"bytes,10,rep,name=CoinAddrOther,proto3" json:"CoinAddrOther,omitempty"`
	Version              uint64         `protobuf:"varint,11,opt,name=Version,proto3" json:"Version,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Keystore) Reset()         { *m = Keystore{} }
func (m *Keystore) String() string { return proto.CompactTextString(m) }
func (*Keystore) ProtoMessage()    {}
func (*Keystore) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{1}
}
func (m *Keystore) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Keystore) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Keystore.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Keystore) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Keystore.Merge(m, src)
}
func (m *Keystore) XXX_Size() int {
	return m.Size()
}
func (m *Keystore) XXX_DiscardUnknown() {
	xxx_messageInfo_Keystore.DiscardUnknown(m)
}

var xxx_messageInfo_Keystore proto.InternalMessageInfo

func (m *Keystore) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *Keystore) GetAddrPre() string {
	if m != nil {
		return m.AddrPre
	}
	return ""
}

func (m *Keystore) GetCryptedSeed() []byte {
	if m != nil {
		return m.CryptedSeed
	}
	return nil
}

func (m *Keystore) GetSalt() []byte {
	if m != nil {
		return m.Salt
	}
	return nil
}

func (m *Keystore) GetRounds() uint64 {
	if m != nil {
		return m.Rounds
	}
	return 0
}

func (m *Keystore) GetCheckHash() []byte {
	if m != nil {
		return m.CheckHash
	}
	return nil
}

func (m *Keystore) GetCoinAddr() []*CoinAddress {
	if m != nil {
		return m.CoinAddr
	}
	return nil
}

func (m *Keystore) GetNetAddr() []*CoinAddress {
	if m != nil {
		return m.NetAddr
	}
	return nil
}

func (m *Keystore) GetDHAddr() []*CoinAddress {
	if m != nil {
		return m.DHAddr
	}
	return nil
}

func (m *Keystore) GetCoinAddrOther() []*CoinAddress {
	if m != nil {
		return m.CoinAddrOther
	}
	return nil
}

func (m *Keystore) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

type CoinAddress struct {
	Purpose              uint32   `protobuf:"varint,1,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	CoinType             uint32   `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	Account              uint32   `protobuf:"varint,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Change               uint32   `protobuf:"varint,4,opt,name=Change,proto3" json:"Change,omitempty"`
	Index                uint32   `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	Nickname             string   `protobuf:"bytes,6,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Addr                 []byte   `protobuf:"bytes,7,opt,name=Addr,proto3" json:"Addr,omitempty"`
	CryptedPuk           []byte   `protobuf:"bytes,8,opt,name=CryptedPuk,proto3" json:"CryptedPuk,omitempty"`
	CryptedPrk           []byte   `protobuf:"bytes,9,opt,name=CryptedPrk,proto3" json:"CryptedPrk,omitempty"`
	CheckHash            []byte   `protobuf:"bytes,10,opt,name=CheckHash,proto3" json:"CheckHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinAddress) Reset()         { *m = CoinAddress{} }
func (m *CoinAddress) String() string { return proto.CompactTextString(m) }
func (*CoinAddress) ProtoMessage()    {}
func (*CoinAddress) Descriptor() ([]byte, []int) {
	return fileDescriptor_b88fd140af4deb6f, []int{2}
}
func (m *CoinAddress) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoinAddress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoinAddress.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoinAddress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinAddress.Merge(m, src)
}
func (m *CoinAddress) XXX_Size() int {
	return m.Size()
}
func (m *CoinAddress) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinAddress.DiscardUnknown(m)
}

var xxx_messageInfo_CoinAddress proto.InternalMessageInfo

func (m *CoinAddress) GetPurpose() uint32 {
	if m != nil {
		return m.Purpose
	}
	return 0
}

func (m *CoinAddress) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

func (m *CoinAddress) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *CoinAddress) GetChange() uint32 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CoinAddress) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CoinAddress) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *CoinAddress) GetAddr() []byte {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *CoinAddress) GetCryptedPuk() []byte {
	if m != nil {
		return m.CryptedPuk
	}
	return nil
}

func (m *CoinAddress) GetCryptedPrk() []byte {
	if m != nil {
		return m.CryptedPrk
	}
	return nil
}

func (m *CoinAddress) GetCheckHash() []byte {
	if m != nil {
		return m.CheckHash
	}
	return nil
}

func init() {
	proto.RegisterType((*Wallet)(nil), "protobuf.Wallet")
	proto.RegisterType((*Keystore)(nil), "protobuf.Keystore")
	proto.RegisterType((*CoinAddress)(nil), "protobuf.CoinAddress")
}

func init() { proto.RegisterFile("wallet.proto", fileDescriptor_b88fd140af4deb6f) }

var fileDescriptor_b88fd140af4deb6f = []byte{
	// 430 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xc1, 0x8e, 0xd3, 0x30,
	0x14, 0x24, 0x6d, 0x37, 0x4d, 0x5f, 0x36, 0x97, 0x27, 0x40, 0x16, 0x42, 0x21, 0xea, 0xa9, 0x17,
	0xb2, 0x02, 0x8e, 0x9c, 0xa0, 0x1c, 0x16, 0x21, 0x2d, 0x95, 0x17, 0x81, 0xc4, 0x05, 0x65, 0x13,
	0xb3, 0xa9, 0x52, 0xe2, 0xc8, 0x76, 0x04, 0xfd, 0x11, 0x04, 0x7f, 0xc4, 0x91, 0x4f, 0x40, 0xe5,
	0x47, 0x56, 0x79, 0x8d, 0xd3, 0xa4, 0x87, 0x9e, 0x92, 0x79, 0x33, 0x63, 0x5b, 0x33, 0x0f, 0xce,
	0xbf, 0x27, 0x9b, 0x8d, 0x30, 0x71, 0xa5, 0xa4, 0x91, 0xe8, 0xd1, 0xe7, 0xa6, 0xfe, 0x3a, 0x37,
	0xe0, 0x7e, 0x22, 0x06, 0x19, 0x4c, 0x5f, 0x65, 0x99, 0x5a, 0x29, 0xc1, 0x9c, 0xc8, 0x59, 0xcc,
	0xb8, 0x85, 0x18, 0x83, 0xf7, 0x4e, 0x6c, 0xb5, 0x91, 0x4a, 0xb0, 0x51, 0x34, 0x5e, 0xf8, 0xcf,
	0x31, 0xb6, 0x07, 0xc4, 0x96, 0xe1, 0x9d, 0x06, 0x23, 0xf0, 0x6b, 0x2d, 0x3a, 0xcb, 0x38, 0x72,
	0x16, 0x13, 0xde, 0x1f, 0xcd, 0x7f, 0x8e, 0x0f, 0x47, 0xe2, 0x23, 0xf0, 0xae, 0xd6, 0x69, 0x51,
	0x26, 0xdf, 0xec, 0xcd, 0x1d, 0xee, 0x3f, 0x6a, 0x34, 0x7c, 0x54, 0x04, 0xfe, 0x52, 0x6d, 0x2b,
	0x23, 0xb2, 0x6b, 0x21, 0x32, 0xba, 0xe4, 0x9c, 0xf7, 0x47, 0x88, 0x30, 0xb9, 0x4e, 0x36, 0x86,
	0x4d, 0x88, 0xa2, 0x7f, 0x7c, 0x08, 0x2e, 0x97, 0x75, 0x99, 0x69, 0x76, 0x46, 0xaf, 0x6a, 0x11,
	0x3e, 0x86, 0xd9, 0x32, 0x17, 0x69, 0x71, 0x99, 0xe8, 0x9c, 0xb9, 0x64, 0x38, 0x0c, 0xf0, 0x19,
	0x78, 0x4b, 0xb9, 0x2e, 0x9b, 0xab, 0xd9, 0x94, 0x02, 0x78, 0x70, 0x08, 0xc0, 0x32, 0x42, 0x6b,
	0xde, 0xc9, 0xf0, 0x02, 0xa6, 0x57, 0xc2, 0x90, 0xc3, 0x3b, 0xe5, 0xb0, 0x2a, 0x7c, 0x0a, 0xee,
	0x9b, 0x4b, 0xd2, 0xcf, 0x4e, 0xe9, 0x5b, 0x11, 0xbe, 0x84, 0xc0, 0x8e, 0xdf, 0x9b, 0x5c, 0x28,
	0x06, 0xa7, 0x5c, 0x43, 0x6d, 0x93, 0xea, 0x47, 0xa1, 0xf4, 0x5a, 0x96, 0xcc, 0xa7, 0x18, 0x2c,
	0x9c, 0xff, 0x1e, 0x81, 0xdf, 0x33, 0x36, 0xca, 0x55, 0xad, 0x2a, 0xa9, 0xf7, 0xd5, 0x04, 0xdc,
	0xc2, 0xa6, 0xb5, 0x46, 0xf8, 0x61, 0x5b, 0xed, 0xab, 0x09, 0x78, 0x87, 0xa9, 0xb5, 0x34, 0x95,
	0x75, 0x69, 0xa8, 0x97, 0x80, 0x5b, 0xd8, 0xe4, 0xbf, 0xcc, 0x93, 0xf2, 0x56, 0x50, 0x2b, 0x01,
	0x6f, 0x11, 0xde, 0x87, 0xb3, 0xb7, 0x65, 0x26, 0x7e, 0x50, 0x2d, 0x01, 0xdf, 0x83, 0xc1, 0x66,
	0xb8, 0x47, 0x9b, 0x81, 0x30, 0x69, 0xfb, 0xa0, 0x76, 0x29, 0x94, 0x10, 0xa0, 0x5d, 0x80, 0x55,
	0x5d, 0x30, 0x8f, 0x98, 0xde, 0xa4, 0xcf, 0xab, 0x82, 0xcd, 0x86, 0xbc, 0x2a, 0x86, 0x5b, 0x00,
	0x47, 0x5b, 0xf0, 0xfa, 0xc9, 0x9f, 0x5d, 0xe8, 0xfc, 0xdd, 0x85, 0xce, 0xbf, 0x5d, 0xe8, 0xfc,
	0xfa, 0x1f, 0xde, 0xfb, 0x1c, 0xc4, 0x17, 0xb7, 0xf2, 0x8b, 0x4d, 0xfc, 0xc6, 0xa5, 0xbf, 0x17,
	0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x6c, 0xce, 0x55, 0x6c, 0x03, 0x00, 0x00,
}

func (m *Wallet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Wallet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Wallet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.UseKeystore != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.UseKeystore))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Keystore) > 0 {
		for iNdEx := len(m.Keystore) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Keystore[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AddrPre) > 0 {
		i -= len(m.AddrPre)
		copy(dAtA[i:], m.AddrPre)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.AddrPre)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Keystore) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Keystore) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Keystore) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Version != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x58
	}
	if len(m.CoinAddrOther) > 0 {
		for iNdEx := len(m.CoinAddrOther) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinAddrOther[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.DHAddr) > 0 {
		for iNdEx := len(m.DHAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DHAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.NetAddr) > 0 {
		for iNdEx := len(m.NetAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NetAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.CoinAddr) > 0 {
		for iNdEx := len(m.CoinAddr) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CoinAddr[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWallet(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.CheckHash) > 0 {
		i -= len(m.CheckHash)
		copy(dAtA[i:], m.CheckHash)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CheckHash)))
		i--
		dAtA[i] = 0x32
	}
	if m.Rounds != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Rounds))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Salt) > 0 {
		i -= len(m.Salt)
		copy(dAtA[i:], m.Salt)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Salt)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CryptedSeed) > 0 {
		i -= len(m.CryptedSeed)
		copy(dAtA[i:], m.CryptedSeed)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CryptedSeed)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AddrPre) > 0 {
		i -= len(m.AddrPre)
		copy(dAtA[i:], m.AddrPre)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.AddrPre)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoinAddress) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoinAddress) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoinAddress) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CheckHash) > 0 {
		i -= len(m.CheckHash)
		copy(dAtA[i:], m.CheckHash)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CheckHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.CryptedPrk) > 0 {
		i -= len(m.CryptedPrk)
		copy(dAtA[i:], m.CryptedPrk)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CryptedPrk)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.CryptedPuk) > 0 {
		i -= len(m.CryptedPuk)
		copy(dAtA[i:], m.CryptedPuk)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.CryptedPuk)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintWallet(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x32
	}
	if m.Index != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if m.Change != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x20
	}
	if m.Account != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x18
	}
	if m.CoinType != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x10
	}
	if m.Purpose != 0 {
		i = encodeVarintWallet(dAtA, i, uint64(m.Purpose))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWallet(dAtA []byte, offset int, v uint64) int {
	offset -= sovWallet(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Wallet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AddrPre)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.Keystore) > 0 {
		for _, e := range m.Keystore {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.UseKeystore != 0 {
		n += 1 + sovWallet(uint64(m.UseKeystore))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Keystore) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.AddrPre)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.CryptedSeed)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Salt)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.Rounds != 0 {
		n += 1 + sovWallet(uint64(m.Rounds))
	}
	l = len(m.CheckHash)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if len(m.CoinAddr) > 0 {
		for _, e := range m.CoinAddr {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.NetAddr) > 0 {
		for _, e := range m.NetAddr {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.DHAddr) > 0 {
		for _, e := range m.DHAddr {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if len(m.CoinAddrOther) > 0 {
		for _, e := range m.CoinAddrOther {
			l = e.Size()
			n += 1 + l + sovWallet(uint64(l))
		}
	}
	if m.Version != 0 {
		n += 1 + sovWallet(uint64(m.Version))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CoinAddress) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purpose != 0 {
		n += 1 + sovWallet(uint64(m.Purpose))
	}
	if m.CoinType != 0 {
		n += 1 + sovWallet(uint64(m.CoinType))
	}
	if m.Account != 0 {
		n += 1 + sovWallet(uint64(m.Account))
	}
	if m.Change != 0 {
		n += 1 + sovWallet(uint64(m.Change))
	}
	if m.Index != 0 {
		n += 1 + sovWallet(uint64(m.Index))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.CryptedPuk)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.CryptedPrk)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	l = len(m.CheckHash)
	if l > 0 {
		n += 1 + l + sovWallet(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWallet(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWallet(x uint64) (n int) {
	return sovWallet(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Wallet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Wallet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Wallet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrPre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrPre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keystore", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keystore = append(m.Keystore, &Keystore{})
			if err := m.Keystore[len(m.Keystore)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseKeystore", wireType)
			}
			m.UseKeystore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UseKeystore |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Keystore) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Keystore: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Keystore: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrPre", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrPre = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptedSeed", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CryptedSeed = append(m.CryptedSeed[:0], dAtA[iNdEx:postIndex]...)
			if m.CryptedSeed == nil {
				m.CryptedSeed = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Salt", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Salt = append(m.Salt[:0], dAtA[iNdEx:postIndex]...)
			if m.Salt == nil {
				m.Salt = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rounds", wireType)
			}
			m.Rounds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rounds |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckHash = append(m.CheckHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckHash == nil {
				m.CheckHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinAddr = append(m.CoinAddr, &CoinAddress{})
			if err := m.CoinAddr[len(m.CoinAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetAddr = append(m.NetAddr, &CoinAddress{})
			if err := m.NetAddr[len(m.NetAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DHAddr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DHAddr = append(m.DHAddr, &CoinAddress{})
			if err := m.DHAddr[len(m.DHAddr)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinAddrOther", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CoinAddrOther = append(m.CoinAddrOther, &CoinAddress{})
			if err := m.CoinAddrOther[len(m.CoinAddrOther)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoinAddress) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoinAddress: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoinAddress: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = append(m.Addr[:0], dAtA[iNdEx:postIndex]...)
			if m.Addr == nil {
				m.Addr = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptedPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CryptedPuk = append(m.CryptedPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.CryptedPuk == nil {
				m.CryptedPuk = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CryptedPrk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CryptedPrk = append(m.CryptedPrk[:0], dAtA[iNdEx:postIndex]...)
			if m.CryptedPrk == nil {
				m.CryptedPrk = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWallet
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWallet
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckHash = append(m.CheckHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CheckHash == nil {
				m.CheckHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWallet(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWallet
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWallet(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWallet
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWallet
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWallet
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWallet
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWallet
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWallet        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWallet          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWallet = fmt.Errorf("proto: unexpected end of group")
)
