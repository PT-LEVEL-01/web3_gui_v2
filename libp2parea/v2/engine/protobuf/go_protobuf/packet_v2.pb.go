// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: packet_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PacketV2 struct {
	MsgID                uint64   `protobuf:"varint,1,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	SendID               []byte   `protobuf:"bytes,2,opt,name=SendID,proto3" json:"SendID,omitempty"`
	ReplyID              []byte   `protobuf:"bytes,3,opt,name=ReplyID,proto3" json:"ReplyID,omitempty"`
	Data                 []byte   `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PacketV2) Reset()         { *m = PacketV2{} }
func (m *PacketV2) String() string { return proto.CompactTextString(m) }
func (*PacketV2) ProtoMessage()    {}
func (*PacketV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_e05fcd6cb0f5dc17, []int{0}
}
func (m *PacketV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PacketV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PacketV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PacketV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PacketV2.Merge(m, src)
}
func (m *PacketV2) XXX_Size() int {
	return m.Size()
}
func (m *PacketV2) XXX_DiscardUnknown() {
	xxx_messageInfo_PacketV2.DiscardUnknown(m)
}

var xxx_messageInfo_PacketV2 proto.InternalMessageInfo

func (m *PacketV2) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *PacketV2) GetSendID() []byte {
	if m != nil {
		return m.SendID
	}
	return nil
}

func (m *PacketV2) GetReplyID() []byte {
	if m != nil {
		return m.ReplyID
	}
	return nil
}

func (m *PacketV2) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*PacketV2)(nil), "go_protobuf.PacketV2")
}

func init() { proto.RegisterFile("packet_v2.proto", fileDescriptor_e05fcd6cb0f5dc17) }

var fileDescriptor_e05fcd6cb0f5dc17 = []byte{
	// 157 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0x48, 0x4c, 0xce,
	0x4e, 0x2d, 0x89, 0x2f, 0x33, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4e, 0xcf, 0x8f,
	0x07, 0xb3, 0x92, 0x4a, 0xd3, 0x94, 0xd2, 0xb8, 0x38, 0x02, 0xc0, 0xf2, 0x61, 0x46, 0x42, 0x22,
	0x5c, 0xac, 0xbe, 0xc5, 0xe9, 0x9e, 0x2e, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x10, 0x8e,
	0x90, 0x18, 0x17, 0x5b, 0x70, 0x6a, 0x5e, 0x8a, 0xa7, 0x8b, 0x04, 0x93, 0x02, 0xa3, 0x06, 0x4f,
	0x10, 0x94, 0x27, 0x24, 0xc1, 0xc5, 0x1e, 0x94, 0x5a, 0x90, 0x53, 0xe9, 0xe9, 0x22, 0xc1, 0x0c,
	0x96, 0x80, 0x71, 0x85, 0x84, 0xb8, 0x58, 0x5c, 0x12, 0x4b, 0x12, 0x25, 0x58, 0xc0, 0xc2, 0x60,
	0xb6, 0x93, 0xfc, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38,
	0xe3, 0xb1, 0x1c, 0x43, 0x14, 0xaf, 0x9e, 0x3e, 0x92, 0x43, 0x92, 0xd8, 0xc0, 0x2c, 0x63, 0x40,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x66, 0x5d, 0x40, 0x01, 0xaf, 0x00, 0x00, 0x00,
}

func (m *PacketV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PacketV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PacketV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPacketV2(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReplyID) > 0 {
		i -= len(m.ReplyID)
		copy(dAtA[i:], m.ReplyID)
		i = encodeVarintPacketV2(dAtA, i, uint64(len(m.ReplyID)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SendID) > 0 {
		i -= len(m.SendID)
		copy(dAtA[i:], m.SendID)
		i = encodeVarintPacketV2(dAtA, i, uint64(len(m.SendID)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgID != 0 {
		i = encodeVarintPacketV2(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPacketV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacketV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PacketV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgID != 0 {
		n += 1 + sovPacketV2(uint64(m.MsgID))
	}
	l = len(m.SendID)
	if l > 0 {
		n += 1 + l + sovPacketV2(uint64(l))
	}
	l = len(m.ReplyID)
	if l > 0 {
		n += 1 + l + sovPacketV2(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPacketV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPacketV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacketV2(x uint64) (n int) {
	return sovPacketV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PacketV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacketV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PacketV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PacketV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendID = append(m.SendID[:0], dAtA[iNdEx:postIndex]...)
			if m.SendID == nil {
				m.SendID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyID = append(m.ReplyID[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyID == nil {
				m.ReplyID = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPacketV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPacketV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacketV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacketV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacketV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacketV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacketV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacketV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacketV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacketV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacketV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacketV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacketV2 = fmt.Errorf("proto: unexpected end of group")
)
