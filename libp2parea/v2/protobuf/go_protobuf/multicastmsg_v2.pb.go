// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: multicastmsg_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MulticastMsgV2 struct {
	Nodes                []*NodeInfoV2 `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	MsgID                uint64        `protobuf:"varint,2,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	Content              string        `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *MulticastMsgV2) Reset()         { *m = MulticastMsgV2{} }
func (m *MulticastMsgV2) String() string { return proto.CompactTextString(m) }
func (*MulticastMsgV2) ProtoMessage()    {}
func (*MulticastMsgV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c91e7eee582718, []int{0}
}
func (m *MulticastMsgV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MulticastMsgV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MulticastMsgV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MulticastMsgV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MulticastMsgV2.Merge(m, src)
}
func (m *MulticastMsgV2) XXX_Size() int {
	return m.Size()
}
func (m *MulticastMsgV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MulticastMsgV2.DiscardUnknown(m)
}

var xxx_messageInfo_MulticastMsgV2 proto.InternalMessageInfo

func (m *MulticastMsgV2) GetNodes() []*NodeInfoV2 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *MulticastMsgV2) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *MulticastMsgV2) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

type NodeInfoV2 struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	MachineID            string   `protobuf:"bytes,2,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NodeInfoV2) Reset()         { *m = NodeInfoV2{} }
func (m *NodeInfoV2) String() string { return proto.CompactTextString(m) }
func (*NodeInfoV2) ProtoMessage()    {}
func (*NodeInfoV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_55c91e7eee582718, []int{1}
}
func (m *NodeInfoV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeInfoV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeInfoV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeInfoV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeInfoV2.Merge(m, src)
}
func (m *NodeInfoV2) XXX_Size() int {
	return m.Size()
}
func (m *NodeInfoV2) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeInfoV2.DiscardUnknown(m)
}

var xxx_messageInfo_NodeInfoV2 proto.InternalMessageInfo

func (m *NodeInfoV2) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *NodeInfoV2) GetMachineID() string {
	if m != nil {
		return m.MachineID
	}
	return ""
}

func init() {
	proto.RegisterType((*MulticastMsgV2)(nil), "protobuf.MulticastMsgV2")
	proto.RegisterType((*NodeInfoV2)(nil), "protobuf.NodeInfoV2")
}

func init() { proto.RegisterFile("multicastmsg_v2.proto", fileDescriptor_55c91e7eee582718) }

var fileDescriptor_55c91e7eee582718 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcd, 0x2d, 0xcd, 0x29,
	0xc9, 0x4c, 0x4e, 0x2c, 0x2e, 0xc9, 0x2d, 0x4e, 0x8f, 0x2f, 0x33, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5, 0x69, 0x4a, 0x39, 0x5c, 0x7c, 0xbe, 0x30, 0x25, 0xbe,
	0xc5, 0xe9, 0x61, 0x46, 0x42, 0x5a, 0x5c, 0xac, 0x79, 0xf9, 0x29, 0xa9, 0xc5, 0x12, 0x8c, 0x0a,
	0xcc, 0x1a, 0xdc, 0x46, 0x22, 0x7a, 0x30, 0xb5, 0x7a, 0x7e, 0xf9, 0x29, 0xa9, 0x9e, 0x79, 0x69,
	0xf9, 0x61, 0x46, 0x41, 0x10, 0x25, 0x42, 0x22, 0x5c, 0xac, 0xbe, 0xc5, 0xe9, 0x9e, 0x2e, 0x12,
	0x4c, 0x0a, 0x8c, 0x1a, 0x2c, 0x41, 0x10, 0x8e, 0x90, 0x04, 0x17, 0x7b, 0x72, 0x7e, 0x5e, 0x49,
	0x6a, 0x5e, 0x89, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x8c, 0xab, 0x64, 0xc5, 0xc5, 0x85,
	0x30, 0x44, 0x88, 0x8f, 0x8b, 0xc9, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x27, 0x88, 0xc9,
	0x33, 0x45, 0x48, 0x86, 0x8b, 0xd3, 0x37, 0x31, 0x39, 0x23, 0x33, 0x2f, 0x15, 0x6a, 0x22, 0x67,
	0x10, 0x42, 0xc0, 0x49, 0xfe, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x57, 0x4f, 0x3f, 0x3d, 0x3f, 0x1e, 0xe6, 0xbc, 0x24,
	0x36, 0x30, 0xcb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x74, 0x60, 0xb4, 0xba, 0xf4, 0x00, 0x00,
	0x00,
}

func (m *MulticastMsgV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MulticastMsgV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MulticastMsgV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMulticastmsgV2(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x1a
	}
	if m.MsgID != 0 {
		i = encodeVarintMulticastmsgV2(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMulticastmsgV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeInfoV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeInfoV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeInfoV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MachineID) > 0 {
		i -= len(m.MachineID)
		copy(dAtA[i:], m.MachineID)
		i = encodeVarintMulticastmsgV2(dAtA, i, uint64(len(m.MachineID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintMulticastmsgV2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintMulticastmsgV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovMulticastmsgV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MulticastMsgV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovMulticastmsgV2(uint64(l))
		}
	}
	if m.MsgID != 0 {
		n += 1 + sovMulticastmsgV2(uint64(m.MsgID))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMulticastmsgV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeInfoV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovMulticastmsgV2(uint64(l))
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovMulticastmsgV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMulticastmsgV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMulticastmsgV2(x uint64) (n int) {
	return sovMulticastmsgV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MulticastMsgV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticastmsgV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MulticastMsgV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MulticastMsgV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeInfoV2{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticastmsgV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeInfoV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMulticastmsgV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeInfoV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeInfoV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMulticastmsgV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMulticastmsgV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMulticastmsgV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMulticastmsgV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMulticastmsgV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMulticastmsgV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMulticastmsgV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMulticastmsgV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMulticastmsgV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMulticastmsgV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMulticastmsgV2 = fmt.Errorf("proto: unexpected end of group")
)
