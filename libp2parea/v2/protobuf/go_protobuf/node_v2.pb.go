// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: node_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NodeRepeatedV2 struct {
	Nodes                []*NodeV2 `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeRepeatedV2) Reset()         { *m = NodeRepeatedV2{} }
func (m *NodeRepeatedV2) String() string { return proto.CompactTextString(m) }
func (*NodeRepeatedV2) ProtoMessage()    {}
func (*NodeRepeatedV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_742162bb8bf32c29, []int{0}
}
func (m *NodeRepeatedV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeRepeatedV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeRepeatedV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeRepeatedV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeRepeatedV2.Merge(m, src)
}
func (m *NodeRepeatedV2) XXX_Size() int {
	return m.Size()
}
func (m *NodeRepeatedV2) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeRepeatedV2.DiscardUnknown(m)
}

var xxx_messageInfo_NodeRepeatedV2 proto.InternalMessageInfo

func (m *NodeRepeatedV2) GetNodes() []*NodeV2 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeV2 struct {
	Version              uint64    `protobuf:"varint,1,opt,name=Version,proto3" json:"Version,omitempty"`
	AreaName             []byte    `protobuf:"bytes,2,opt,name=AreaName,proto3" json:"AreaName,omitempty"`
	IdInfo               *IdInfoV2 `protobuf:"bytes,3,opt,name=IdInfo,proto3" json:"IdInfo,omitempty"`
	IsSuper              bool      `protobuf:"varint,4,opt,name=IsSuper,proto3" json:"IsSuper,omitempty"`
	MachineID            []byte    `protobuf:"bytes,5,opt,name=MachineID,proto3" json:"MachineID,omitempty"`
	RemoteMultiaddr      []byte    `protobuf:"bytes,6,opt,name=RemoteMultiaddr,proto3" json:"RemoteMultiaddr,omitempty"`
	Port                 uint32    `protobuf:"varint,7,opt,name=Port,proto3" json:"Port,omitempty"`
	MultiaddrLAN         [][]byte  `protobuf:"bytes,8,rep,name=MultiaddrLAN,proto3" json:"MultiaddrLAN,omitempty"`
	MultiaddrWAN         [][]byte  `protobuf:"bytes,9,rep,name=MultiaddrWAN,proto3" json:"MultiaddrWAN,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeV2) Reset()         { *m = NodeV2{} }
func (m *NodeV2) String() string { return proto.CompactTextString(m) }
func (*NodeV2) ProtoMessage()    {}
func (*NodeV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_742162bb8bf32c29, []int{1}
}
func (m *NodeV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeV2.Merge(m, src)
}
func (m *NodeV2) XXX_Size() int {
	return m.Size()
}
func (m *NodeV2) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeV2.DiscardUnknown(m)
}

var xxx_messageInfo_NodeV2 proto.InternalMessageInfo

func (m *NodeV2) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *NodeV2) GetAreaName() []byte {
	if m != nil {
		return m.AreaName
	}
	return nil
}

func (m *NodeV2) GetIdInfo() *IdInfoV2 {
	if m != nil {
		return m.IdInfo
	}
	return nil
}

func (m *NodeV2) GetIsSuper() bool {
	if m != nil {
		return m.IsSuper
	}
	return false
}

func (m *NodeV2) GetMachineID() []byte {
	if m != nil {
		return m.MachineID
	}
	return nil
}

func (m *NodeV2) GetRemoteMultiaddr() []byte {
	if m != nil {
		return m.RemoteMultiaddr
	}
	return nil
}

func (m *NodeV2) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *NodeV2) GetMultiaddrLAN() [][]byte {
	if m != nil {
		return m.MultiaddrLAN
	}
	return nil
}

func (m *NodeV2) GetMultiaddrWAN() [][]byte {
	if m != nil {
		return m.MultiaddrWAN
	}
	return nil
}

type IdInfoV2 struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	EPuk                 []byte   `protobuf:"bytes,2,opt,name=EPuk,proto3" json:"EPuk,omitempty"`
	CPuk                 []byte   `protobuf:"bytes,3,opt,name=CPuk,proto3" json:"CPuk,omitempty"`
	V                    uint32   `protobuf:"varint,4,opt,name=V,proto3" json:"V,omitempty"`
	Sign                 []byte   `protobuf:"bytes,5,opt,name=Sign,proto3" json:"Sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IdInfoV2) Reset()         { *m = IdInfoV2{} }
func (m *IdInfoV2) String() string { return proto.CompactTextString(m) }
func (*IdInfoV2) ProtoMessage()    {}
func (*IdInfoV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_742162bb8bf32c29, []int{2}
}
func (m *IdInfoV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IdInfoV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IdInfoV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IdInfoV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IdInfoV2.Merge(m, src)
}
func (m *IdInfoV2) XXX_Size() int {
	return m.Size()
}
func (m *IdInfoV2) XXX_DiscardUnknown() {
	xxx_messageInfo_IdInfoV2.DiscardUnknown(m)
}

var xxx_messageInfo_IdInfoV2 proto.InternalMessageInfo

func (m *IdInfoV2) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *IdInfoV2) GetEPuk() []byte {
	if m != nil {
		return m.EPuk
	}
	return nil
}

func (m *IdInfoV2) GetCPuk() []byte {
	if m != nil {
		return m.CPuk
	}
	return nil
}

func (m *IdInfoV2) GetV() uint32 {
	if m != nil {
		return m.V
	}
	return 0
}

func (m *IdInfoV2) GetSign() []byte {
	if m != nil {
		return m.Sign
	}
	return nil
}

func init() {
	proto.RegisterType((*NodeRepeatedV2)(nil), "protobuf.NodeRepeatedV2")
	proto.RegisterType((*NodeV2)(nil), "protobuf.NodeV2")
	proto.RegisterType((*IdInfoV2)(nil), "protobuf.IdInfoV2")
}

func init() { proto.RegisterFile("node_v2.proto", fileDescriptor_742162bb8bf32c29) }

var fileDescriptor_742162bb8bf32c29 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x90, 0x4f, 0x6a, 0xe3, 0x30,
	0x14, 0xc6, 0x47, 0x76, 0xe2, 0x38, 0x8a, 0x9d, 0x19, 0xb4, 0x12, 0xc3, 0xe0, 0x11, 0x5e, 0x14,
	0xd1, 0x85, 0x0b, 0xee, 0xa6, 0x5b, 0xf7, 0xcf, 0xc2, 0xd0, 0x98, 0xa0, 0x80, 0x03, 0xdd, 0x04,
	0xa7, 0x52, 0x52, 0xd3, 0xc6, 0x0a, 0x8e, 0xdd, 0xb3, 0xf4, 0x08, 0x3d, 0x4a, 0x97, 0x3d, 0x42,
	0x49, 0x2f, 0x52, 0x24, 0xc7, 0x09, 0xc9, 0x4a, 0xdf, 0xfb, 0xe9, 0x07, 0x1f, 0xef, 0x41, 0xb7,
	0x90, 0x5c, 0xcc, 0x5e, 0xc3, 0x60, 0x5d, 0xca, 0x4a, 0x22, 0x5b, 0x3f, 0xf3, 0x7a, 0xe1, 0x5f,
	0xc1, 0x61, 0x22, 0xb9, 0x60, 0x62, 0x2d, 0xb2, 0x4a, 0xf0, 0x34, 0x44, 0x67, 0xb0, 0xab, 0xe4,
	0x0d, 0x06, 0xc4, 0xa4, 0x83, 0xf0, 0x4f, 0xd0, 0xba, 0x81, 0x12, 0xd3, 0x90, 0x35, 0xdf, 0xfe,
	0xbb, 0x01, 0xad, 0x86, 0x20, 0x0c, 0x7b, 0xa9, 0x28, 0x37, 0xb9, 0x2c, 0x30, 0x20, 0x80, 0x76,
	0x58, 0x3b, 0xa2, 0xbf, 0xd0, 0x8e, 0x4a, 0x91, 0x25, 0xd9, 0x4a, 0x60, 0x83, 0x00, 0xea, 0xb0,
	0xfd, 0x8c, 0xce, 0xa1, 0x15, 0xf3, 0xb8, 0x58, 0x48, 0x6c, 0x12, 0x40, 0x07, 0x21, 0x3a, 0x34,
	0x35, 0x3c, 0x0d, 0xd9, 0xce, 0x50, 0x0d, 0xf1, 0x66, 0x52, 0xaf, 0x45, 0x89, 0x3b, 0x04, 0x50,
	0x9b, 0xb5, 0x23, 0xfa, 0x07, 0xfb, 0xa3, 0xec, 0xf1, 0x29, 0x2f, 0x44, 0x7c, 0x8b, 0xbb, 0xba,
	0xe2, 0x00, 0x10, 0x85, 0xbf, 0x99, 0x58, 0xc9, 0x4a, 0x8c, 0xea, 0x97, 0x2a, 0xcf, 0x38, 0x2f,
	0xb1, 0xa5, 0x9d, 0x53, 0x8c, 0x10, 0xec, 0x8c, 0x65, 0x59, 0xe1, 0x1e, 0x01, 0xd4, 0x65, 0x3a,
	0x23, 0x1f, 0x3a, 0x7b, 0xe1, 0x3e, 0x4a, 0xb0, 0x4d, 0x4c, 0xea, 0xb0, 0x23, 0x76, 0xe4, 0x4c,
	0xa3, 0x04, 0xf7, 0x4f, 0x9c, 0x69, 0x94, 0xf8, 0x1c, 0xda, 0xed, 0x46, 0x68, 0x08, 0x8d, 0x98,
	0xeb, 0x33, 0x39, 0xcc, 0x88, 0xb9, 0xea, 0xbd, 0x1b, 0xd7, 0xcf, 0xbb, 0xeb, 0xe8, 0xac, 0xd8,
	0x8d, 0x62, 0x66, 0xc3, 0x54, 0x46, 0x0e, 0x04, 0xa9, 0xde, 0xdd, 0x65, 0x20, 0x55, 0xc6, 0x24,
	0x5f, 0x16, 0xbb, 0x85, 0x75, 0xbe, 0xfe, 0xff, 0xb1, 0xf5, 0xc0, 0xe7, 0xd6, 0x03, 0x5f, 0x5b,
	0x0f, 0xbc, 0x7d, 0x7b, 0xbf, 0x1e, 0xdc, 0xe0, 0x62, 0x29, 0x67, 0xed, 0x55, 0xe7, 0x96, 0x4e,
	0x97, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xe8, 0xdc, 0x95, 0x72, 0x0d, 0x02, 0x00, 0x00,
}

func (m *NodeRepeatedV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeRepeatedV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeRepeatedV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNodeV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MultiaddrWAN) > 0 {
		for iNdEx := len(m.MultiaddrWAN) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MultiaddrWAN[iNdEx])
			copy(dAtA[i:], m.MultiaddrWAN[iNdEx])
			i = encodeVarintNodeV2(dAtA, i, uint64(len(m.MultiaddrWAN[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.MultiaddrLAN) > 0 {
		for iNdEx := len(m.MultiaddrLAN) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.MultiaddrLAN[iNdEx])
			copy(dAtA[i:], m.MultiaddrLAN[iNdEx])
			i = encodeVarintNodeV2(dAtA, i, uint64(len(m.MultiaddrLAN[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.Port != 0 {
		i = encodeVarintNodeV2(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x38
	}
	if len(m.RemoteMultiaddr) > 0 {
		i -= len(m.RemoteMultiaddr)
		copy(dAtA[i:], m.RemoteMultiaddr)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.RemoteMultiaddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MachineID) > 0 {
		i -= len(m.MachineID)
		copy(dAtA[i:], m.MachineID)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.MachineID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.IsSuper {
		i--
		if m.IsSuper {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IdInfo != nil {
		{
			size, err := m.IdInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNodeV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AreaName) > 0 {
		i -= len(m.AreaName)
		copy(dAtA[i:], m.AreaName)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.AreaName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintNodeV2(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IdInfoV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IdInfoV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IdInfoV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0x2a
	}
	if m.V != 0 {
		i = encodeVarintNodeV2(dAtA, i, uint64(m.V))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CPuk) > 0 {
		i -= len(m.CPuk)
		copy(dAtA[i:], m.CPuk)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.CPuk)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.EPuk) > 0 {
		i -= len(m.EPuk)
		copy(dAtA[i:], m.EPuk)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.EPuk)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintNodeV2(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNodeV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovNodeV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeRepeatedV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovNodeV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovNodeV2(uint64(m.Version))
	}
	l = len(m.AreaName)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	if m.IdInfo != nil {
		l = m.IdInfo.Size()
		n += 1 + l + sovNodeV2(uint64(l))
	}
	if m.IsSuper {
		n += 2
	}
	l = len(m.MachineID)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	l = len(m.RemoteMultiaddr)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovNodeV2(uint64(m.Port))
	}
	if len(m.MultiaddrLAN) > 0 {
		for _, b := range m.MultiaddrLAN {
			l = len(b)
			n += 1 + l + sovNodeV2(uint64(l))
		}
	}
	if len(m.MultiaddrWAN) > 0 {
		for _, b := range m.MultiaddrWAN {
			l = len(b)
			n += 1 + l + sovNodeV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IdInfoV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	l = len(m.EPuk)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	l = len(m.CPuk)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	if m.V != 0 {
		n += 1 + sovNodeV2(uint64(m.V))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovNodeV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovNodeV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNodeV2(x uint64) (n int) {
	return sovNodeV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeRepeatedV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeRepeatedV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeRepeatedV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &NodeV2{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AreaName", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AreaName = append(m.AreaName[:0], dAtA[iNdEx:postIndex]...)
			if m.AreaName == nil {
				m.AreaName = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.IdInfo == nil {
				m.IdInfo = &IdInfoV2{}
			}
			if err := m.IdInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSuper", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSuper = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MachineID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MachineID = append(m.MachineID[:0], dAtA[iNdEx:postIndex]...)
			if m.MachineID == nil {
				m.MachineID = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteMultiaddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteMultiaddr = append(m.RemoteMultiaddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteMultiaddr == nil {
				m.RemoteMultiaddr = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiaddrLAN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiaddrLAN = append(m.MultiaddrLAN, make([]byte, postIndex-iNdEx))
			copy(m.MultiaddrLAN[len(m.MultiaddrLAN)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultiaddrWAN", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultiaddrWAN = append(m.MultiaddrWAN, make([]byte, postIndex-iNdEx))
			copy(m.MultiaddrWAN[len(m.MultiaddrWAN)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IdInfoV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IdInfoV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IdInfoV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EPuk = append(m.EPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.EPuk == nil {
				m.EPuk = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CPuk = append(m.CPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.CPuk == nil {
				m.CPuk = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field V", wireType)
			}
			m.V = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.V |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthNodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthNodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = append(m.Sign[:0], dAtA[iNdEx:postIndex]...)
			if m.Sign == nil {
				m.Sign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNodeV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNodeV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNodeV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNodeV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNodeV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNodeV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNodeV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNodeV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNodeV2 = fmt.Errorf("proto: unexpected end of group")
)
