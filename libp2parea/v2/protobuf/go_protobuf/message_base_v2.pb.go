// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_base_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageBaseV2 struct {
	Base                 *MessageHeadV2 `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *MessageBaseV2) Reset()         { *m = MessageBaseV2{} }
func (m *MessageBaseV2) String() string { return proto.CompactTextString(m) }
func (*MessageBaseV2) ProtoMessage()    {}
func (*MessageBaseV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4285d4c237b7533, []int{0}
}
func (m *MessageBaseV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBaseV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBaseV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBaseV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBaseV2.Merge(m, src)
}
func (m *MessageBaseV2) XXX_Size() int {
	return m.Size()
}
func (m *MessageBaseV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBaseV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBaseV2 proto.InternalMessageInfo

func (m *MessageBaseV2) GetBase() *MessageHeadV2 {
	if m != nil {
		return m.Base
	}
	return nil
}

type MessageHeadV2 struct {
	MsgEngineID          uint64   `protobuf:"varint,1,opt,name=MsgEngineID,proto3" json:"MsgEngineID,omitempty"`
	SenderAddr           []byte   `protobuf:"bytes,2,opt,name=SenderAddr,proto3" json:"SenderAddr,omitempty"`
	SenderSuperAddr      []byte   `protobuf:"bytes,3,opt,name=SenderSuperAddr,proto3" json:"SenderSuperAddr,omitempty"`
	SenderProxyAddr      []byte   `protobuf:"bytes,4,opt,name=SenderProxyAddr,proto3" json:"SenderProxyAddr,omitempty"`
	SenderMachineID      []byte   `protobuf:"bytes,5,opt,name=SenderMachineID,proto3" json:"SenderMachineID,omitempty"`
	RecvAddr             []byte   `protobuf:"bytes,6,opt,name=RecvAddr,proto3" json:"RecvAddr,omitempty"`
	RecvSuperAddr        []byte   `protobuf:"bytes,7,opt,name=RecvSuperAddr,proto3" json:"RecvSuperAddr,omitempty"`
	RecvProxyAddr        []byte   `protobuf:"bytes,8,opt,name=RecvProxyAddr,proto3" json:"RecvProxyAddr,omitempty"`
	MsgID                uint64   `protobuf:"varint,9,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
	RecvMachineID        []byte   `protobuf:"bytes,10,opt,name=RecvMachineID,proto3" json:"RecvMachineID,omitempty"`
	SendID               []byte   `protobuf:"bytes,11,opt,name=SendID,proto3" json:"SendID,omitempty"`
	ReplyID              []byte   `protobuf:"bytes,12,opt,name=ReplyID,proto3" json:"ReplyID,omitempty"`
	Content              []byte   `protobuf:"bytes,13,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageHeadV2) Reset()         { *m = MessageHeadV2{} }
func (m *MessageHeadV2) String() string { return proto.CompactTextString(m) }
func (*MessageHeadV2) ProtoMessage()    {}
func (*MessageHeadV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_c4285d4c237b7533, []int{1}
}
func (m *MessageHeadV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeadV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeadV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeadV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeadV2.Merge(m, src)
}
func (m *MessageHeadV2) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeadV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeadV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeadV2 proto.InternalMessageInfo

func (m *MessageHeadV2) GetMsgEngineID() uint64 {
	if m != nil {
		return m.MsgEngineID
	}
	return 0
}

func (m *MessageHeadV2) GetSenderAddr() []byte {
	if m != nil {
		return m.SenderAddr
	}
	return nil
}

func (m *MessageHeadV2) GetSenderSuperAddr() []byte {
	if m != nil {
		return m.SenderSuperAddr
	}
	return nil
}

func (m *MessageHeadV2) GetSenderProxyAddr() []byte {
	if m != nil {
		return m.SenderProxyAddr
	}
	return nil
}

func (m *MessageHeadV2) GetSenderMachineID() []byte {
	if m != nil {
		return m.SenderMachineID
	}
	return nil
}

func (m *MessageHeadV2) GetRecvAddr() []byte {
	if m != nil {
		return m.RecvAddr
	}
	return nil
}

func (m *MessageHeadV2) GetRecvSuperAddr() []byte {
	if m != nil {
		return m.RecvSuperAddr
	}
	return nil
}

func (m *MessageHeadV2) GetRecvProxyAddr() []byte {
	if m != nil {
		return m.RecvProxyAddr
	}
	return nil
}

func (m *MessageHeadV2) GetMsgID() uint64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *MessageHeadV2) GetRecvMachineID() []byte {
	if m != nil {
		return m.RecvMachineID
	}
	return nil
}

func (m *MessageHeadV2) GetSendID() []byte {
	if m != nil {
		return m.SendID
	}
	return nil
}

func (m *MessageHeadV2) GetReplyID() []byte {
	if m != nil {
		return m.ReplyID
	}
	return nil
}

func (m *MessageHeadV2) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageBaseV2)(nil), "protobuf.MessageBaseV2")
	proto.RegisterType((*MessageHeadV2)(nil), "protobuf.MessageHeadV2")
}

func init() { proto.RegisterFile("message_base_v2.proto", fileDescriptor_c4285d4c237b7533) }

var fileDescriptor_c4285d4c237b7533 = []byte{
	// 323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x91, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x1d, 0xfb, 0xeb, 0x6d, 0x83, 0x30, 0xf8, 0x33, 0xb8, 0x88, 0xa5, 0xb8, 0x28, 0x08,
	0x11, 0xe2, 0xd6, 0x8d, 0x35, 0x82, 0x59, 0x04, 0x24, 0x85, 0x2e, 0xdc, 0x84, 0xa4, 0x19, 0xa3,
	0xa0, 0x49, 0xc8, 0xa4, 0xc5, 0xbe, 0x89, 0x6f, 0xe3, 0xd6, 0xa5, 0x8f, 0x20, 0xf1, 0x45, 0x24,
	0x77, 0x92, 0x4c, 0x74, 0x95, 0x7b, 0xce, 0xf9, 0xee, 0xe5, 0x90, 0x81, 0xc3, 0x57, 0x2e, 0x84,
	0x1f, 0x71, 0x2f, 0xf0, 0x05, 0xf7, 0x36, 0xa6, 0x91, 0x66, 0x49, 0x9e, 0xd0, 0x21, 0x7e, 0x82,
	0xf5, 0xe3, 0xf4, 0x0a, 0x34, 0x47, 0x22, 0x73, 0x5f, 0xf0, 0xa5, 0x49, 0xcf, 0xa1, 0x5b, 0x4e,
	0x8c, 0x4c, 0xc8, 0x6c, 0x64, 0x1e, 0x1b, 0x35, 0x69, 0x54, 0xd8, 0x1d, 0xf7, 0xc3, 0xa5, 0xe9,
	0x22, 0x34, 0xfd, 0xe8, 0x34, 0xeb, 0xd2, 0xa7, 0x13, 0x18, 0x39, 0x22, 0xba, 0x8d, 0xa3, 0xe7,
	0x98, 0xdb, 0x16, 0x5e, 0xe9, 0xba, 0x6d, 0x8b, 0xea, 0x00, 0x0b, 0x1e, 0x87, 0x3c, 0xbb, 0x0e,
	0xc3, 0x8c, 0xed, 0x4e, 0xc8, 0x6c, 0xec, 0xb6, 0x1c, 0x3a, 0x83, 0x7d, 0xa9, 0x16, 0xeb, 0xb4,
	0x82, 0x3a, 0x08, 0xfd, 0xb7, 0x15, 0x79, 0x9f, 0x25, 0x6f, 0x5b, 0x24, 0xbb, 0x6d, 0xb2, 0xb1,
	0x15, 0xe9, 0xf8, 0xab, 0x27, 0xd9, 0xac, 0xd7, 0x26, 0x1b, 0x9b, 0x9e, 0xc0, 0xd0, 0xe5, 0xab,
	0x0d, 0x1e, 0xeb, 0x23, 0xd2, 0x68, 0x7a, 0x06, 0x5a, 0x39, 0xab, 0x5e, 0x03, 0x04, 0xfe, 0x9a,
	0x35, 0xa5, 0x3a, 0x0d, 0x15, 0xa5, 0x1a, 0x1d, 0x40, 0xcf, 0x11, 0x91, 0x6d, 0xb1, 0x3d, 0xfc,
	0x43, 0x52, 0xd4, 0xbb, 0xaa, 0x25, 0xa8, 0x5d, 0xd5, 0xf1, 0x08, 0xfa, 0x65, 0x6d, 0xdb, 0x62,
	0x23, 0x8c, 0x2b, 0x45, 0x19, 0x0c, 0x5c, 0x9e, 0xbe, 0x6c, 0x6d, 0x8b, 0x8d, 0x31, 0xa8, 0x65,
	0x99, 0xdc, 0x24, 0x71, 0xce, 0xe3, 0x9c, 0x69, 0x32, 0xa9, 0xe4, 0xfc, 0xf4, 0xb3, 0xd0, 0xc9,
	0x57, 0xa1, 0x93, 0xef, 0x42, 0x27, 0xef, 0x3f, 0xfa, 0xce, 0x83, 0x66, 0x5c, 0x44, 0x89, 0x57,
	0x3f, 0x7b, 0xd0, 0xc7, 0xe9, 0xf2, 0x37, 0x00, 0x00, 0xff, 0xff, 0x98, 0xaa, 0xeb, 0x3d, 0x4a,
	0x02, 0x00, 0x00,
}

func (m *MessageBaseV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBaseV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBaseV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessageBaseV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHeadV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeadV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeadV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ReplyID) > 0 {
		i -= len(m.ReplyID)
		copy(dAtA[i:], m.ReplyID)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.ReplyID)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.SendID) > 0 {
		i -= len(m.SendID)
		copy(dAtA[i:], m.SendID)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.SendID)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.RecvMachineID) > 0 {
		i -= len(m.RecvMachineID)
		copy(dAtA[i:], m.RecvMachineID)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.RecvMachineID)))
		i--
		dAtA[i] = 0x52
	}
	if m.MsgID != 0 {
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(m.MsgID))
		i--
		dAtA[i] = 0x48
	}
	if len(m.RecvProxyAddr) > 0 {
		i -= len(m.RecvProxyAddr)
		copy(dAtA[i:], m.RecvProxyAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.RecvProxyAddr)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.RecvSuperAddr) > 0 {
		i -= len(m.RecvSuperAddr)
		copy(dAtA[i:], m.RecvSuperAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.RecvSuperAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.RecvAddr) > 0 {
		i -= len(m.RecvAddr)
		copy(dAtA[i:], m.RecvAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.RecvAddr)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderMachineID) > 0 {
		i -= len(m.SenderMachineID)
		copy(dAtA[i:], m.SenderMachineID)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.SenderMachineID)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderProxyAddr) > 0 {
		i -= len(m.SenderProxyAddr)
		copy(dAtA[i:], m.SenderProxyAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.SenderProxyAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderSuperAddr) > 0 {
		i -= len(m.SenderSuperAddr)
		copy(dAtA[i:], m.SenderSuperAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.SenderSuperAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderAddr) > 0 {
		i -= len(m.SenderAddr)
		copy(dAtA[i:], m.SenderAddr)
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(len(m.SenderAddr)))
		i--
		dAtA[i] = 0x12
	}
	if m.MsgEngineID != 0 {
		i = encodeVarintMessageBaseV2(dAtA, i, uint64(m.MsgEngineID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageBaseV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageBaseV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageBaseV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageHeadV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MsgEngineID != 0 {
		n += 1 + sovMessageBaseV2(uint64(m.MsgEngineID))
	}
	l = len(m.SenderAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.SenderSuperAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.SenderProxyAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.SenderMachineID)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.RecvAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.RecvSuperAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.RecvProxyAddr)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	if m.MsgID != 0 {
		n += 1 + sovMessageBaseV2(uint64(m.MsgID))
	}
	l = len(m.RecvMachineID)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.SendID)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.ReplyID)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessageBaseV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageBaseV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageBaseV2(x uint64) (n int) {
	return sovMessageBaseV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageBaseV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageBaseV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBaseV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBaseV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &MessageHeadV2{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageBaseV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHeadV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageBaseV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeadV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeadV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgEngineID", wireType)
			}
			m.MsgEngineID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgEngineID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderAddr = append(m.SenderAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderAddr == nil {
				m.SenderAddr = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSuperAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSuperAddr = append(m.SenderSuperAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderSuperAddr == nil {
				m.SenderSuperAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderProxyAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderProxyAddr = append(m.SenderProxyAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderProxyAddr == nil {
				m.SenderProxyAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderMachineID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderMachineID = append(m.SenderMachineID[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderMachineID == nil {
				m.SenderMachineID = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvAddr = append(m.RecvAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvAddr == nil {
				m.RecvAddr = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSuperAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSuperAddr = append(m.RecvSuperAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvSuperAddr == nil {
				m.RecvSuperAddr = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvProxyAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvProxyAddr = append(m.RecvProxyAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvProxyAddr == nil {
				m.RecvProxyAddr = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgID", wireType)
			}
			m.MsgID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvMachineID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvMachineID = append(m.RecvMachineID[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvMachineID == nil {
				m.RecvMachineID = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendID = append(m.SendID[:0], dAtA[iNdEx:postIndex]...)
			if m.SendID == nil {
				m.SendID = []byte{}
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyID = append(m.ReplyID[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyID == nil {
				m.ReplyID = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageBaseV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageBaseV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageBaseV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageBaseV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageBaseV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageBaseV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageBaseV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageBaseV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageBaseV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageBaseV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageBaseV2 = fmt.Errorf("proto: unexpected end of group")
)
