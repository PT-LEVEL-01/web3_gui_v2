// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageV2 struct {
	Head                 *MessageHeadsV2 `protobuf:"bytes,1,opt,name=Head,proto3" json:"Head,omitempty"`
	Body                 *MessageBodyV2  `protobuf:"bytes,2,opt,name=Body,proto3" json:"Body,omitempty"`
	DataPlus             []byte          `protobuf:"bytes,3,opt,name=DataPlus,proto3" json:"DataPlus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *MessageV2) Reset()         { *m = MessageV2{} }
func (m *MessageV2) String() string { return proto.CompactTextString(m) }
func (*MessageV2) ProtoMessage()    {}
func (*MessageV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ff458cedd8761f, []int{0}
}
func (m *MessageV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageV2.Merge(m, src)
}
func (m *MessageV2) XXX_Size() int {
	return m.Size()
}
func (m *MessageV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageV2 proto.InternalMessageInfo

func (m *MessageV2) GetHead() *MessageHeadsV2 {
	if m != nil {
		return m.Head
	}
	return nil
}

func (m *MessageV2) GetBody() *MessageBodyV2 {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *MessageV2) GetDataPlus() []byte {
	if m != nil {
		return m.DataPlus
	}
	return nil
}

type MessageHeadsV2 struct {
	RecvId               []byte   `protobuf:"bytes,1,opt,name=RecvId,proto3" json:"RecvId,omitempty"`
	RecvSuperId          []byte   `protobuf:"bytes,2,opt,name=RecvSuperId,proto3" json:"RecvSuperId,omitempty"`
	RecvVnode            []byte   `protobuf:"bytes,3,opt,name=RecvVnode,proto3" json:"RecvVnode,omitempty"`
	Sender               []byte   `protobuf:"bytes,4,opt,name=Sender,proto3" json:"Sender,omitempty"`
	SenderSuperId        []byte   `protobuf:"bytes,5,opt,name=SenderSuperId,proto3" json:"SenderSuperId,omitempty"`
	SenderVnode          []byte   `protobuf:"bytes,6,opt,name=SenderVnode,proto3" json:"SenderVnode,omitempty"`
	Accurate             bool     `protobuf:"varint,7,opt,name=Accurate,proto3" json:"Accurate,omitempty"`
	RecvProxyId          []byte   `protobuf:"bytes,8,opt,name=RecvProxyId,proto3" json:"RecvProxyId,omitempty"`
	SenderProxyId        []byte   `protobuf:"bytes,9,opt,name=SenderProxyId,proto3" json:"SenderProxyId,omitempty"`
	SearchVnodeEndId     []byte   `protobuf:"bytes,10,opt,name=SearchVnodeEndId,proto3" json:"SearchVnodeEndId,omitempty"`
	OneByOne             bool     `protobuf:"varint,11,opt,name=OneByOne,proto3" json:"OneByOne,omitempty"`
	SenderMachineID      string   `protobuf:"bytes,12,opt,name=SenderMachineID,proto3" json:"SenderMachineID,omitempty"`
	RecvMachineID        string   `protobuf:"bytes,13,opt,name=RecvMachineID,proto3" json:"RecvMachineID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageHeadsV2) Reset()         { *m = MessageHeadsV2{} }
func (m *MessageHeadsV2) String() string { return proto.CompactTextString(m) }
func (*MessageHeadsV2) ProtoMessage()    {}
func (*MessageHeadsV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ff458cedd8761f, []int{1}
}
func (m *MessageHeadsV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageHeadsV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageHeadsV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageHeadsV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageHeadsV2.Merge(m, src)
}
func (m *MessageHeadsV2) XXX_Size() int {
	return m.Size()
}
func (m *MessageHeadsV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageHeadsV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageHeadsV2 proto.InternalMessageInfo

func (m *MessageHeadsV2) GetRecvId() []byte {
	if m != nil {
		return m.RecvId
	}
	return nil
}

func (m *MessageHeadsV2) GetRecvSuperId() []byte {
	if m != nil {
		return m.RecvSuperId
	}
	return nil
}

func (m *MessageHeadsV2) GetRecvVnode() []byte {
	if m != nil {
		return m.RecvVnode
	}
	return nil
}

func (m *MessageHeadsV2) GetSender() []byte {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *MessageHeadsV2) GetSenderSuperId() []byte {
	if m != nil {
		return m.SenderSuperId
	}
	return nil
}

func (m *MessageHeadsV2) GetSenderVnode() []byte {
	if m != nil {
		return m.SenderVnode
	}
	return nil
}

func (m *MessageHeadsV2) GetAccurate() bool {
	if m != nil {
		return m.Accurate
	}
	return false
}

func (m *MessageHeadsV2) GetRecvProxyId() []byte {
	if m != nil {
		return m.RecvProxyId
	}
	return nil
}

func (m *MessageHeadsV2) GetSenderProxyId() []byte {
	if m != nil {
		return m.SenderProxyId
	}
	return nil
}

func (m *MessageHeadsV2) GetSearchVnodeEndId() []byte {
	if m != nil {
		return m.SearchVnodeEndId
	}
	return nil
}

func (m *MessageHeadsV2) GetOneByOne() bool {
	if m != nil {
		return m.OneByOne
	}
	return false
}

func (m *MessageHeadsV2) GetSenderMachineID() string {
	if m != nil {
		return m.SenderMachineID
	}
	return ""
}

func (m *MessageHeadsV2) GetRecvMachineID() string {
	if m != nil {
		return m.RecvMachineID
	}
	return ""
}

type MessageBodyV2 struct {
	MessageId            uint64   `protobuf:"varint,1,opt,name=MessageId,proto3" json:"MessageId,omitempty"`
	CreateTime           uint64   `protobuf:"varint,2,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	ReplyTime            uint64   `protobuf:"varint,3,opt,name=ReplyTime,proto3" json:"ReplyTime,omitempty"`
	Hash                 []byte   `protobuf:"bytes,4,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ReplyHash            []byte   `protobuf:"bytes,5,opt,name=ReplyHash,proto3" json:"ReplyHash,omitempty"`
	SendRand             uint64   `protobuf:"varint,6,opt,name=SendRand,proto3" json:"SendRand,omitempty"`
	RecvRand             uint64   `protobuf:"varint,7,opt,name=RecvRand,proto3" json:"RecvRand,omitempty"`
	Content              []byte   `protobuf:"bytes,8,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MessageBodyV2) Reset()         { *m = MessageBodyV2{} }
func (m *MessageBodyV2) String() string { return proto.CompactTextString(m) }
func (*MessageBodyV2) ProtoMessage()    {}
func (*MessageBodyV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ff458cedd8761f, []int{2}
}
func (m *MessageBodyV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBodyV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBodyV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBodyV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBodyV2.Merge(m, src)
}
func (m *MessageBodyV2) XXX_Size() int {
	return m.Size()
}
func (m *MessageBodyV2) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBodyV2.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBodyV2 proto.InternalMessageInfo

func (m *MessageBodyV2) GetMessageId() uint64 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *MessageBodyV2) GetCreateTime() uint64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *MessageBodyV2) GetReplyTime() uint64 {
	if m != nil {
		return m.ReplyTime
	}
	return 0
}

func (m *MessageBodyV2) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *MessageBodyV2) GetReplyHash() []byte {
	if m != nil {
		return m.ReplyHash
	}
	return nil
}

func (m *MessageBodyV2) GetSendRand() uint64 {
	if m != nil {
		return m.SendRand
	}
	return 0
}

func (m *MessageBodyV2) GetRecvRand() uint64 {
	if m != nil {
		return m.RecvRand
	}
	return 0
}

func (m *MessageBodyV2) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*MessageV2)(nil), "protobuf.MessageV2")
	proto.RegisterType((*MessageHeadsV2)(nil), "protobuf.MessageHeadsV2")
	proto.RegisterType((*MessageBodyV2)(nil), "protobuf.MessageBodyV2")
}

func init() { proto.RegisterFile("message_v2.proto", fileDescriptor_94ff458cedd8761f) }

var fileDescriptor_94ff458cedd8761f = []byte{
	// 460 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0x4d, 0x6e, 0xd3, 0x40,
	0x14, 0x66, 0x88, 0x9b, 0x9f, 0x97, 0x04, 0xaa, 0x59, 0xc0, 0x08, 0xa1, 0x60, 0x45, 0x2c, 0x2c,
	0x40, 0x41, 0x0a, 0x27, 0x20, 0x2d, 0x52, 0xbd, 0xa8, 0x5a, 0x4d, 0x50, 0x16, 0x6c, 0xaa, 0xa9,
	0xe7, 0xd1, 0x54, 0x6a, 0xc7, 0x91, 0xed, 0x54, 0x64, 0xcb, 0x29, 0x38, 0x10, 0x0b, 0x96, 0x1c,
	0x01, 0x85, 0x03, 0x70, 0x05, 0xf4, 0xe6, 0xc7, 0x4e, 0xda, 0x95, 0xe7, 0xfb, 0x99, 0xf7, 0xbe,
	0xc9, 0xa7, 0xc0, 0xe1, 0x2d, 0x96, 0xa5, 0xba, 0xc2, 0x8b, 0xbb, 0xe9, 0x64, 0x55, 0xe4, 0x55,
	0xce, 0xbb, 0xf6, 0x73, 0xb9, 0xfe, 0x3a, 0xfe, 0xce, 0xa0, 0x77, 0xea, 0xe4, 0xc5, 0x94, 0xbf,
	0x83, 0xe8, 0x04, 0x95, 0x16, 0x2c, 0x66, 0x49, 0x7f, 0x2a, 0x26, 0xc1, 0x36, 0xf1, 0x16, 0x12,
	0xcb, 0xc5, 0x54, 0x5a, 0x17, 0x7f, 0x0b, 0xd1, 0x2c, 0xd7, 0x1b, 0xf1, 0xd8, 0xba, 0x9f, 0x3f,
	0x70, 0x93, 0x48, 0x66, 0xfa, 0xf2, 0x17, 0xd0, 0x3d, 0x56, 0x95, 0x3a, 0xbf, 0x59, 0x97, 0xa2,
	0x15, 0xb3, 0x64, 0x20, 0x6b, 0x3c, 0xfe, 0xd9, 0x82, 0x27, 0xfb, 0x1b, 0xf8, 0x33, 0x68, 0x4b,
	0xcc, 0xee, 0x52, 0x97, 0x65, 0x20, 0x3d, 0xe2, 0x31, 0xf4, 0xe9, 0x34, 0x5f, 0xaf, 0xb0, 0x48,
	0xb5, 0x5d, 0x3d, 0x90, 0xbb, 0x14, 0x7f, 0x09, 0x3d, 0x82, 0x0b, 0x93, 0x6b, 0xf4, 0x9b, 0x1a,
	0x82, 0xe6, 0xce, 0xd1, 0x68, 0x2c, 0x44, 0xe4, 0xe6, 0x3a, 0xc4, 0x5f, 0xc3, 0xd0, 0x9d, 0xc2,
	0xe4, 0x03, 0x2b, 0xef, 0x93, 0xb4, 0xdd, 0x11, 0x6e, 0x7a, 0xdb, 0x6d, 0xdf, 0xa1, 0xe8, 0x99,
	0x1f, 0xb3, 0x6c, 0x5d, 0xa8, 0x0a, 0x45, 0x27, 0x66, 0x49, 0x57, 0xd6, 0x38, 0x64, 0x3f, 0x2f,
	0xf2, 0x6f, 0x9b, 0x54, 0x8b, 0x6e, 0x93, 0xdd, 0x53, 0x4d, 0x8a, 0xe0, 0xe9, 0xed, 0xa6, 0x08,
	0xae, 0x37, 0x70, 0x38, 0x47, 0x55, 0x64, 0x4b, 0xbb, 0xf2, 0x93, 0xd1, 0xa9, 0x16, 0x60, 0x8d,
	0x0f, 0x78, 0xca, 0x73, 0x66, 0x70, 0xb6, 0x39, 0x33, 0x28, 0xfa, 0x2e, 0x4f, 0xc0, 0x3c, 0x81,
	0xa7, 0x6e, 0xf0, 0xa9, 0xca, 0x96, 0xd7, 0x06, 0xd3, 0x63, 0x31, 0x88, 0x59, 0xd2, 0x93, 0xf7,
	0x69, 0xca, 0x45, 0x31, 0x1b, 0xdf, 0xd0, 0xfa, 0xf6, 0xc9, 0xf1, 0x3f, 0x06, 0xc3, 0xbd, 0xea,
	0xa9, 0x0b, 0x4f, 0xf8, 0x22, 0x23, 0xd9, 0x10, 0x7c, 0x04, 0x70, 0x54, 0xa0, 0xaa, 0xf0, 0xf3,
	0xf5, 0x2d, 0xda, 0x2a, 0x23, 0xb9, 0xc3, 0xb8, 0x26, 0x57, 0x37, 0x1b, 0x2b, 0xb7, 0xdc, 0xed,
	0x9a, 0xe0, 0x1c, 0xa2, 0x13, 0x55, 0x2e, 0x7d, 0x8f, 0xf6, 0x5c, 0xdf, 0xb0, 0xc2, 0x41, 0xe8,
	0xde, 0x13, 0xf4, 0x5b, 0xd0, 0xc3, 0xa4, 0x32, 0xda, 0x56, 0x17, 0xc9, 0x1a, 0x93, 0x46, 0x8f,
	0xb1, 0x5a, 0xc7, 0x69, 0x01, 0x73, 0x01, 0x9d, 0xa3, 0xdc, 0x54, 0x68, 0x2a, 0xdf, 0x59, 0x80,
	0xb3, 0x57, 0xbf, 0xb6, 0x23, 0xf6, 0x7b, 0x3b, 0x62, 0x7f, 0xb6, 0x23, 0xf6, 0xe3, 0xef, 0xe8,
	0xd1, 0x97, 0xe1, 0xe4, 0xfd, 0x55, 0x7e, 0x11, 0xfe, 0x09, 0x97, 0x6d, 0x7b, 0xfa, 0xf0, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0xf5, 0xb1, 0x0d, 0x83, 0x03, 0x00, 0x00,
}

func (m *MessageV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataPlus) > 0 {
		i -= len(m.DataPlus)
		copy(dAtA[i:], m.DataPlus)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.DataPlus)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessageV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Head != nil {
		{
			size, err := m.Head.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessageV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageHeadsV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageHeadsV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageHeadsV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RecvMachineID) > 0 {
		i -= len(m.RecvMachineID)
		copy(dAtA[i:], m.RecvMachineID)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.RecvMachineID)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.SenderMachineID) > 0 {
		i -= len(m.SenderMachineID)
		copy(dAtA[i:], m.SenderMachineID)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.SenderMachineID)))
		i--
		dAtA[i] = 0x62
	}
	if m.OneByOne {
		i--
		if m.OneByOne {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if len(m.SearchVnodeEndId) > 0 {
		i -= len(m.SearchVnodeEndId)
		copy(dAtA[i:], m.SearchVnodeEndId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.SearchVnodeEndId)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.SenderProxyId) > 0 {
		i -= len(m.SenderProxyId)
		copy(dAtA[i:], m.SenderProxyId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.SenderProxyId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.RecvProxyId) > 0 {
		i -= len(m.RecvProxyId)
		copy(dAtA[i:], m.RecvProxyId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.RecvProxyId)))
		i--
		dAtA[i] = 0x42
	}
	if m.Accurate {
		i--
		if m.Accurate {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.SenderVnode) > 0 {
		i -= len(m.SenderVnode)
		copy(dAtA[i:], m.SenderVnode)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.SenderVnode)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.SenderSuperId) > 0 {
		i -= len(m.SenderSuperId)
		copy(dAtA[i:], m.SenderSuperId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.SenderSuperId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RecvVnode) > 0 {
		i -= len(m.RecvVnode)
		copy(dAtA[i:], m.RecvVnode)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.RecvVnode)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecvSuperId) > 0 {
		i -= len(m.RecvSuperId)
		copy(dAtA[i:], m.RecvSuperId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.RecvSuperId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.RecvId) > 0 {
		i -= len(m.RecvId)
		copy(dAtA[i:], m.RecvId)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.RecvId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageBodyV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBodyV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBodyV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x42
	}
	if m.RecvRand != 0 {
		i = encodeVarintMessageV2(dAtA, i, uint64(m.RecvRand))
		i--
		dAtA[i] = 0x38
	}
	if m.SendRand != 0 {
		i = encodeVarintMessageV2(dAtA, i, uint64(m.SendRand))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReplyHash) > 0 {
		i -= len(m.ReplyHash)
		copy(dAtA[i:], m.ReplyHash)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.ReplyHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMessageV2(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.ReplyTime != 0 {
		i = encodeVarintMessageV2(dAtA, i, uint64(m.ReplyTime))
		i--
		dAtA[i] = 0x18
	}
	if m.CreateTime != 0 {
		i = encodeVarintMessageV2(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x10
	}
	if m.MessageId != 0 {
		i = encodeVarintMessageV2(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessageV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessageV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Head != nil {
		l = m.Head.Size()
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.DataPlus)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageHeadsV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RecvId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.RecvSuperId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.RecvVnode)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.SenderSuperId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.SenderVnode)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.Accurate {
		n += 2
	}
	l = len(m.RecvProxyId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.SenderProxyId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.SearchVnodeEndId)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.OneByOne {
		n += 2
	}
	l = len(m.SenderMachineID)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.RecvMachineID)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageBodyV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageId != 0 {
		n += 1 + sovMessageV2(uint64(m.MessageId))
	}
	if m.CreateTime != 0 {
		n += 1 + sovMessageV2(uint64(m.CreateTime))
	}
	if m.ReplyTime != 0 {
		n += 1 + sovMessageV2(uint64(m.ReplyTime))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	l = len(m.ReplyHash)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.SendRand != 0 {
		n += 1 + sovMessageV2(uint64(m.SendRand))
	}
	if m.RecvRand != 0 {
		n += 1 + sovMessageV2(uint64(m.RecvRand))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMessageV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessageV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessageV2(x uint64) (n int) {
	return sovMessageV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Head == nil {
				m.Head = &MessageHeadsV2{}
			}
			if err := m.Head.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &MessageBodyV2{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataPlus", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPlus = append(m.DataPlus[:0], dAtA[iNdEx:postIndex]...)
			if m.DataPlus == nil {
				m.DataPlus = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageHeadsV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageHeadsV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageHeadsV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvId = append(m.RecvId[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvId == nil {
				m.RecvId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvSuperId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvSuperId = append(m.RecvSuperId[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvSuperId == nil {
				m.RecvSuperId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvVnode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvVnode = append(m.RecvVnode[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvVnode == nil {
				m.RecvVnode = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderSuperId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderSuperId = append(m.SenderSuperId[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderSuperId == nil {
				m.SenderSuperId = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderVnode", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderVnode = append(m.SenderVnode[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderVnode == nil {
				m.SenderVnode = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accurate", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Accurate = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvProxyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvProxyId = append(m.RecvProxyId[:0], dAtA[iNdEx:postIndex]...)
			if m.RecvProxyId == nil {
				m.RecvProxyId = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderProxyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderProxyId = append(m.SenderProxyId[:0], dAtA[iNdEx:postIndex]...)
			if m.SenderProxyId == nil {
				m.SenderProxyId = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchVnodeEndId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchVnodeEndId = append(m.SearchVnodeEndId[:0], dAtA[iNdEx:postIndex]...)
			if m.SearchVnodeEndId == nil {
				m.SearchVnodeEndId = []byte{}
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OneByOne", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OneByOne = bool(v != 0)
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderMachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderMachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvMachineID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvMachineID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBodyV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessageV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBodyV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBodyV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyTime", wireType)
			}
			m.ReplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReplyTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReplyHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReplyHash = append(m.ReplyHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ReplyHash == nil {
				m.ReplyHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendRand", wireType)
			}
			m.SendRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvRand", wireType)
			}
			m.RecvRand = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecvRand |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMessageV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMessageV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessageV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessageV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessageV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessageV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessageV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessageV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessageV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessageV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessageV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessageV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessageV2 = fmt.Errorf("proto: unexpected end of group")
)
