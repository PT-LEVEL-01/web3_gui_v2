// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: vnode_v2.proto

//包名，通过protoc生成时go文件时

package go_protobuf

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type VnodeinfoV2 struct {
	Nid                  []byte   `protobuf:"bytes,1,opt,name=Nid,proto3" json:"Nid,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Vid                  []byte   `protobuf:"bytes,3,opt,name=Vid,proto3" json:"Vid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VnodeinfoV2) Reset()         { *m = VnodeinfoV2{} }
func (m *VnodeinfoV2) String() string { return proto.CompactTextString(m) }
func (*VnodeinfoV2) ProtoMessage()    {}
func (*VnodeinfoV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{0}
}
func (m *VnodeinfoV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnodeinfoV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VnodeinfoV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VnodeinfoV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnodeinfoV2.Merge(m, src)
}
func (m *VnodeinfoV2) XXX_Size() int {
	return m.Size()
}
func (m *VnodeinfoV2) XXX_DiscardUnknown() {
	xxx_messageInfo_VnodeinfoV2.DiscardUnknown(m)
}

var xxx_messageInfo_VnodeinfoV2 proto.InternalMessageInfo

func (m *VnodeinfoV2) GetNid() []byte {
	if m != nil {
		return m.Nid
	}
	return nil
}

func (m *VnodeinfoV2) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *VnodeinfoV2) GetVid() []byte {
	if m != nil {
		return m.Vid
	}
	return nil
}

type AddrV2 struct {
	Nid                  []byte   `protobuf:"bytes,1,opt,name=Nid,proto3" json:"Nid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddrV2) Reset()         { *m = AddrV2{} }
func (m *AddrV2) String() string { return proto.CompactTextString(m) }
func (*AddrV2) ProtoMessage()    {}
func (*AddrV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{1}
}
func (m *AddrV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddrV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddrV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddrV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddrV2.Merge(m, src)
}
func (m *AddrV2) XXX_Size() int {
	return m.Size()
}
func (m *AddrV2) XXX_DiscardUnknown() {
	xxx_messageInfo_AddrV2.DiscardUnknown(m)
}

var xxx_messageInfo_AddrV2 proto.InternalMessageInfo

func (m *AddrV2) GetNid() []byte {
	if m != nil {
		return m.Nid
	}
	return nil
}

type VnodeinfoSV2 struct {
	Nid                  []byte   `protobuf:"bytes,1,opt,name=Nid,proto3" json:"Nid,omitempty"`
	Index                uint64   `protobuf:"varint,2,opt,name=Index,proto3" json:"Index,omitempty"`
	Vid                  []byte   `protobuf:"bytes,3,opt,name=Vid,proto3" json:"Vid,omitempty"`
	Addr                 string   `protobuf:"bytes,4,opt,name=Addr,proto3" json:"Addr,omitempty"`
	TcpPort              uint64   `protobuf:"varint,5,opt,name=TcpPort,proto3" json:"TcpPort,omitempty"`
	QuicPort             uint64   `protobuf:"varint,6,opt,name=QuicPort,proto3" json:"QuicPort,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VnodeinfoSV2) Reset()         { *m = VnodeinfoSV2{} }
func (m *VnodeinfoSV2) String() string { return proto.CompactTextString(m) }
func (*VnodeinfoSV2) ProtoMessage()    {}
func (*VnodeinfoSV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{2}
}
func (m *VnodeinfoSV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnodeinfoSV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VnodeinfoSV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VnodeinfoSV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnodeinfoSV2.Merge(m, src)
}
func (m *VnodeinfoSV2) XXX_Size() int {
	return m.Size()
}
func (m *VnodeinfoSV2) XXX_DiscardUnknown() {
	xxx_messageInfo_VnodeinfoSV2.DiscardUnknown(m)
}

var xxx_messageInfo_VnodeinfoSV2 proto.InternalMessageInfo

func (m *VnodeinfoSV2) GetNid() []byte {
	if m != nil {
		return m.Nid
	}
	return nil
}

func (m *VnodeinfoSV2) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *VnodeinfoSV2) GetVid() []byte {
	if m != nil {
		return m.Vid
	}
	return nil
}

func (m *VnodeinfoSV2) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *VnodeinfoSV2) GetTcpPort() uint64 {
	if m != nil {
		return m.TcpPort
	}
	return 0
}

func (m *VnodeinfoSV2) GetQuicPort() uint64 {
	if m != nil {
		return m.QuicPort
	}
	return 0
}

type FindVnodeVOV2 struct {
	Self                 *VnodeinfoV2 `protobuf:"bytes,1,opt,name=Self,proto3" json:"Self,omitempty"`
	Target               *VnodeinfoV2 `protobuf:"bytes,2,opt,name=Target,proto3" json:"Target,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *FindVnodeVOV2) Reset()         { *m = FindVnodeVOV2{} }
func (m *FindVnodeVOV2) String() string { return proto.CompactTextString(m) }
func (*FindVnodeVOV2) ProtoMessage()    {}
func (*FindVnodeVOV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{3}
}
func (m *FindVnodeVOV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FindVnodeVOV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FindVnodeVOV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FindVnodeVOV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindVnodeVOV2.Merge(m, src)
}
func (m *FindVnodeVOV2) XXX_Size() int {
	return m.Size()
}
func (m *FindVnodeVOV2) XXX_DiscardUnknown() {
	xxx_messageInfo_FindVnodeVOV2.DiscardUnknown(m)
}

var xxx_messageInfo_FindVnodeVOV2 proto.InternalMessageInfo

func (m *FindVnodeVOV2) GetSelf() *VnodeinfoV2 {
	if m != nil {
		return m.Self
	}
	return nil
}

func (m *FindVnodeVOV2) GetTarget() *VnodeinfoV2 {
	if m != nil {
		return m.Target
	}
	return nil
}

type VnodeinfoRepeatedV2 struct {
	Vnodes               []*VnodeinfoV2 `protobuf:"bytes,1,rep,name=vnodes,proto3" json:"vnodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *VnodeinfoRepeatedV2) Reset()         { *m = VnodeinfoRepeatedV2{} }
func (m *VnodeinfoRepeatedV2) String() string { return proto.CompactTextString(m) }
func (*VnodeinfoRepeatedV2) ProtoMessage()    {}
func (*VnodeinfoRepeatedV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{4}
}
func (m *VnodeinfoRepeatedV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnodeinfoRepeatedV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VnodeinfoRepeatedV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VnodeinfoRepeatedV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnodeinfoRepeatedV2.Merge(m, src)
}
func (m *VnodeinfoRepeatedV2) XXX_Size() int {
	return m.Size()
}
func (m *VnodeinfoRepeatedV2) XXX_DiscardUnknown() {
	xxx_messageInfo_VnodeinfoRepeatedV2.DiscardUnknown(m)
}

var xxx_messageInfo_VnodeinfoRepeatedV2 proto.InternalMessageInfo

func (m *VnodeinfoRepeatedV2) GetVnodes() []*VnodeinfoV2 {
	if m != nil {
		return m.Vnodes
	}
	return nil
}

type VnodeinfoSRepeatedV2 struct {
	Vnodes               []*VnodeinfoSV2 `protobuf:"bytes,1,rep,name=vnodes,proto3" json:"vnodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VnodeinfoSRepeatedV2) Reset()         { *m = VnodeinfoSRepeatedV2{} }
func (m *VnodeinfoSRepeatedV2) String() string { return proto.CompactTextString(m) }
func (*VnodeinfoSRepeatedV2) ProtoMessage()    {}
func (*VnodeinfoSRepeatedV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{5}
}
func (m *VnodeinfoSRepeatedV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VnodeinfoSRepeatedV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VnodeinfoSRepeatedV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VnodeinfoSRepeatedV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VnodeinfoSRepeatedV2.Merge(m, src)
}
func (m *VnodeinfoSRepeatedV2) XXX_Size() int {
	return m.Size()
}
func (m *VnodeinfoSRepeatedV2) XXX_DiscardUnknown() {
	xxx_messageInfo_VnodeinfoSRepeatedV2.DiscardUnknown(m)
}

var xxx_messageInfo_VnodeinfoSRepeatedV2 proto.InternalMessageInfo

func (m *VnodeinfoSRepeatedV2) GetVnodes() []*VnodeinfoSV2 {
	if m != nil {
		return m.Vnodes
	}
	return nil
}

type NodeAddrRepeatedV2 struct {
	Nodes                []*AddrV2 `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *NodeAddrRepeatedV2) Reset()         { *m = NodeAddrRepeatedV2{} }
func (m *NodeAddrRepeatedV2) String() string { return proto.CompactTextString(m) }
func (*NodeAddrRepeatedV2) ProtoMessage()    {}
func (*NodeAddrRepeatedV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_7d7f699b869f8d04, []int{6}
}
func (m *NodeAddrRepeatedV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeAddrRepeatedV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeAddrRepeatedV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeAddrRepeatedV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeAddrRepeatedV2.Merge(m, src)
}
func (m *NodeAddrRepeatedV2) XXX_Size() int {
	return m.Size()
}
func (m *NodeAddrRepeatedV2) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeAddrRepeatedV2.DiscardUnknown(m)
}

var xxx_messageInfo_NodeAddrRepeatedV2 proto.InternalMessageInfo

func (m *NodeAddrRepeatedV2) GetNodes() []*AddrV2 {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*VnodeinfoV2)(nil), "protobuf.VnodeinfoV2")
	proto.RegisterType((*AddrV2)(nil), "protobuf.AddrV2")
	proto.RegisterType((*VnodeinfoSV2)(nil), "protobuf.VnodeinfoSV2")
	proto.RegisterType((*FindVnodeVOV2)(nil), "protobuf.FindVnodeVOV2")
	proto.RegisterType((*VnodeinfoRepeatedV2)(nil), "protobuf.VnodeinfoRepeatedV2")
	proto.RegisterType((*VnodeinfoSRepeatedV2)(nil), "protobuf.VnodeinfoSRepeatedV2")
	proto.RegisterType((*NodeAddrRepeatedV2)(nil), "protobuf.NodeAddrRepeatedV2")
}

func init() { proto.RegisterFile("vnode_v2.proto", fileDescriptor_7d7f699b869f8d04) }

var fileDescriptor_7d7f699b869f8d04 = []byte{
	// 332 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0xcb, 0xcb, 0x4f,
	0x49, 0x8d, 0x2f, 0x33, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5,
	0x69, 0x4a, 0xee, 0x5c, 0xdc, 0x61, 0x20, 0xb9, 0xcc, 0xbc, 0xb4, 0xfc, 0x30, 0x23, 0x21, 0x01,
	0x2e, 0x66, 0xbf, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20, 0x10, 0x53, 0x48, 0x84,
	0x8b, 0xd5, 0x33, 0x2f, 0x25, 0xb5, 0x42, 0x82, 0x49, 0x81, 0x51, 0x83, 0x25, 0x08, 0xc2, 0x01,
	0xa9, 0x0b, 0xcb, 0x4c, 0x91, 0x60, 0x86, 0xa8, 0x0b, 0xcb, 0x4c, 0x51, 0x92, 0xe2, 0x62, 0x73,
	0x4c, 0x49, 0x29, 0xc2, 0x66, 0x86, 0xd2, 0x24, 0x46, 0x2e, 0x1e, 0xb8, 0x2d, 0xc1, 0x94, 0x58,
	0x23, 0x24, 0xc4, 0xc5, 0x02, 0xb2, 0x46, 0x82, 0x45, 0x81, 0x51, 0x83, 0x33, 0x08, 0xcc, 0x16,
	0x92, 0xe0, 0x62, 0x0f, 0x49, 0x2e, 0x08, 0xc8, 0x2f, 0x2a, 0x91, 0x60, 0x05, 0xeb, 0x86, 0x71,
	0x85, 0xa4, 0xb8, 0x38, 0x02, 0x4b, 0x33, 0x93, 0xc1, 0x52, 0x6c, 0x60, 0x29, 0x38, 0x5f, 0x29,
	0x93, 0x8b, 0xd7, 0x2d, 0x33, 0x2f, 0x05, 0xec, 0xae, 0x30, 0xff, 0x30, 0x23, 0x21, 0x4d, 0x2e,
	0x96, 0xe0, 0xd4, 0x9c, 0x34, 0xb0, 0xab, 0xb8, 0x8d, 0x44, 0xf5, 0x60, 0x61, 0xa4, 0x87, 0x14,
	0x40, 0x41, 0x60, 0x25, 0x42, 0xba, 0x5c, 0x6c, 0x21, 0x89, 0x45, 0xe9, 0xa9, 0x25, 0x60, 0xe7,
	0xe2, 0x54, 0x0c, 0x55, 0xa4, 0xe4, 0xc2, 0x25, 0x0c, 0x17, 0x0e, 0x4a, 0x2d, 0x48, 0x4d, 0x2c,
	0x49, 0x4d, 0x09, 0x33, 0x02, 0x99, 0x02, 0x8e, 0x97, 0x62, 0x09, 0x46, 0x05, 0x66, 0x3c, 0xa6,
	0x40, 0x14, 0x29, 0xb9, 0x71, 0x89, 0x20, 0x02, 0x11, 0xc9, 0x18, 0x3d, 0x34, 0x63, 0xc4, 0xb0,
	0x18, 0x13, 0x8c, 0x64, 0x8e, 0x0d, 0x97, 0x90, 0x5f, 0x7e, 0x4a, 0x2a, 0x28, 0xe8, 0x90, 0x4c,
	0x51, 0xe3, 0x62, 0x45, 0x36, 0x44, 0x00, 0x61, 0x08, 0x24, 0x5a, 0x83, 0x20, 0xd2, 0x4e, 0xf2,
	0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72,
	0x0c, 0x51, 0xbc, 0x7a, 0xfa, 0xe9, 0xf9, 0xf1, 0x30, 0xe5, 0x49, 0x6c, 0x60, 0x96, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0xa0, 0xdd, 0xb9, 0x74, 0x74, 0x02, 0x00, 0x00,
}

func (m *VnodeinfoV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnodeinfoV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnodeinfoV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintVnodeV2(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AddrV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddrV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddrV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VnodeinfoSV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnodeinfoSV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnodeinfoSV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.QuicPort != 0 {
		i = encodeVarintVnodeV2(dAtA, i, uint64(m.QuicPort))
		i--
		dAtA[i] = 0x30
	}
	if m.TcpPort != 0 {
		i = encodeVarintVnodeV2(dAtA, i, uint64(m.TcpPort))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Vid) > 0 {
		i -= len(m.Vid)
		copy(dAtA[i:], m.Vid)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Vid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Index != 0 {
		i = encodeVarintVnodeV2(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Nid) > 0 {
		i -= len(m.Nid)
		copy(dAtA[i:], m.Nid)
		i = encodeVarintVnodeV2(dAtA, i, uint64(len(m.Nid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FindVnodeVOV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FindVnodeVOV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FindVnodeVOV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Target != nil {
		{
			size, err := m.Target.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVnodeV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Self != nil {
		{
			size, err := m.Self.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVnodeV2(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VnodeinfoRepeatedV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnodeinfoRepeatedV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnodeinfoRepeatedV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vnodes) > 0 {
		for iNdEx := len(m.Vnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVnodeV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VnodeinfoSRepeatedV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VnodeinfoSRepeatedV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VnodeinfoSRepeatedV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Vnodes) > 0 {
		for iNdEx := len(m.Vnodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vnodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVnodeV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *NodeAddrRepeatedV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeAddrRepeatedV2) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeAddrRepeatedV2) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVnodeV2(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintVnodeV2(dAtA []byte, offset int, v uint64) int {
	offset -= sovVnodeV2(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VnodeinfoV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovVnodeV2(uint64(m.Index))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AddrV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VnodeinfoSV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Nid)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovVnodeV2(uint64(m.Index))
	}
	l = len(m.Vid)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.TcpPort != 0 {
		n += 1 + sovVnodeV2(uint64(m.TcpPort))
	}
	if m.QuicPort != 0 {
		n += 1 + sovVnodeV2(uint64(m.QuicPort))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FindVnodeVOV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Self != nil {
		l = m.Self.Size()
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.Size()
		n += 1 + l + sovVnodeV2(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VnodeinfoRepeatedV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vnodes) > 0 {
		for _, e := range m.Vnodes {
			l = e.Size()
			n += 1 + l + sovVnodeV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *VnodeinfoSRepeatedV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vnodes) > 0 {
		for _, e := range m.Vnodes {
			l = e.Size()
			n += 1 + l + sovVnodeV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeAddrRepeatedV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovVnodeV2(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovVnodeV2(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVnodeV2(x uint64) (n int) {
	return sovVnodeV2(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VnodeinfoV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnodeinfoV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnodeinfoV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = append(m.Nid[:0], dAtA[iNdEx:postIndex]...)
			if m.Nid == nil {
				m.Nid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = append(m.Vid[:0], dAtA[iNdEx:postIndex]...)
			if m.Vid == nil {
				m.Vid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddrV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddrV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddrV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = append(m.Nid[:0], dAtA[iNdEx:postIndex]...)
			if m.Nid == nil {
				m.Nid = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnodeinfoSV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnodeinfoSV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnodeinfoSV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nid = append(m.Nid[:0], dAtA[iNdEx:postIndex]...)
			if m.Nid == nil {
				m.Nid = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vid = append(m.Vid[:0], dAtA[iNdEx:postIndex]...)
			if m.Vid == nil {
				m.Vid = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TcpPort", wireType)
			}
			m.TcpPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TcpPort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuicPort", wireType)
			}
			m.QuicPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QuicPort |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FindVnodeVOV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FindVnodeVOV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FindVnodeVOV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Self", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Self == nil {
				m.Self = &VnodeinfoV2{}
			}
			if err := m.Self.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &VnodeinfoV2{}
			}
			if err := m.Target.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnodeinfoRepeatedV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnodeinfoRepeatedV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnodeinfoRepeatedV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vnodes = append(m.Vnodes, &VnodeinfoV2{})
			if err := m.Vnodes[len(m.Vnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VnodeinfoSRepeatedV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VnodeinfoSRepeatedV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VnodeinfoSRepeatedV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vnodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vnodes = append(m.Vnodes, &VnodeinfoSV2{})
			if err := m.Vnodes[len(m.Vnodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeAddrRepeatedV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeAddrRepeatedV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeAddrRepeatedV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVnodeV2
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &AddrV2{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVnodeV2(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVnodeV2
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVnodeV2(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVnodeV2
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVnodeV2
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVnodeV2
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVnodeV2
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVnodeV2
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVnodeV2        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVnodeV2          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVnodeV2 = fmt.Errorf("proto: unexpected end of group")
)
