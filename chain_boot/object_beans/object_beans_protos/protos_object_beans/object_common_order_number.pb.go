// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: object_common_order_number.proto

//包名，通过protoc生成时go文件时

package protos_object_beans

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectCommonOrderNumber struct {
	Base                 *ObjectBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Id                   []byte      `protobuf:"bytes,2,opt,name=Id,proto3" json:"Id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectCommonOrderNumber) Reset()         { *m = ObjectCommonOrderNumber{} }
func (m *ObjectCommonOrderNumber) String() string { return proto.CompactTextString(m) }
func (*ObjectCommonOrderNumber) ProtoMessage()    {}
func (*ObjectCommonOrderNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_263210b293055faf, []int{0}
}
func (m *ObjectCommonOrderNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectCommonOrderNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectCommonOrderNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectCommonOrderNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectCommonOrderNumber.Merge(m, src)
}
func (m *ObjectCommonOrderNumber) XXX_Size() int {
	return m.Size()
}
func (m *ObjectCommonOrderNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectCommonOrderNumber.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectCommonOrderNumber proto.InternalMessageInfo

func (m *ObjectCommonOrderNumber) GetBase() *ObjectBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ObjectCommonOrderNumber) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func init() {
	proto.RegisterType((*ObjectCommonOrderNumber)(nil), "go_protos.ObjectCommonOrderNumber")
}

func init() { proto.RegisterFile("object_common_order_number.proto", fileDescriptor_263210b293055faf) }

var fileDescriptor_263210b293055faf = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0x4f, 0xca, 0x4a,
	0x4d, 0x2e, 0x89, 0x4f, 0xce, 0xcf, 0xcd, 0xcd, 0xcf, 0x8b, 0xcf, 0x2f, 0x4a, 0x49, 0x2d, 0x8a,
	0xcf, 0x2b, 0xcd, 0x4d, 0x4a, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf,
	0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x04, 0xa1, 0x8a, 0x93, 0x12, 0x8b, 0x53, 0x21, 0xb2, 0x4a, 0x21,
	0x5c, 0xe2, 0xfe, 0x60, 0x41, 0x67, 0xb0, 0x01, 0xfe, 0x20, 0xfd, 0x7e, 0x60, 0xed, 0x42, 0x9a,
	0x5c, 0x2c, 0x4e, 0x89, 0xc5, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0xa2, 0x7a, 0x70,
	0x73, 0xf4, 0x20, 0x3a, 0x40, 0x92, 0x41, 0x60, 0x25, 0x42, 0x7c, 0x5c, 0x4c, 0x9e, 0x29, 0x12,
	0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x4c, 0x9e, 0x29, 0x4e, 0xea, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x51, 0xa2, 0x7a, 0xfa,
	0x10, 0xcd, 0xf1, 0x30, 0x37, 0xa4, 0x26, 0xe6, 0x15, 0x27, 0xb1, 0x81, 0x05, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x96, 0xe1, 0xeb, 0x2d, 0xc7, 0x00, 0x00, 0x00,
}

func (m *ObjectCommonOrderNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectCommonOrderNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectCommonOrderNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintObjectCommonOrderNumber(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObjectCommonOrderNumber(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObjectCommonOrderNumber(dAtA []byte, offset int, v uint64) int {
	offset -= sovObjectCommonOrderNumber(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectCommonOrderNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovObjectCommonOrderNumber(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovObjectCommonOrderNumber(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovObjectCommonOrderNumber(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObjectCommonOrderNumber(x uint64) (n int) {
	return sovObjectCommonOrderNumber(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectCommonOrderNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjectCommonOrderNumber
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectCommonOrderNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectCommonOrderNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectCommonOrderNumber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjectCommonOrderNumber
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObjectCommonOrderNumber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ObjectBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectCommonOrderNumber
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectCommonOrderNumber
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectCommonOrderNumber
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipObjectCommonOrderNumber(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObjectCommonOrderNumber
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObjectCommonOrderNumber(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObjectCommonOrderNumber
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectCommonOrderNumber
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectCommonOrderNumber
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObjectCommonOrderNumber
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObjectCommonOrderNumber
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObjectCommonOrderNumber
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObjectCommonOrderNumber        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjectCommonOrderNumber          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObjectCommonOrderNumber = fmt.Errorf("proto: unexpected end of group")
)
