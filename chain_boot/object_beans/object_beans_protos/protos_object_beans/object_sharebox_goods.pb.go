// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: object_sharebox_goods.proto

//包名，通过protoc生成时go文件时

package protos_object_beans

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectShareboxGoods struct {
	Base                 *ObjectBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	GoodsId              []byte      `protobuf:"bytes,2,opt,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	Name                 string      `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Price                uint64      `protobuf:"varint,4,opt,name=Price,proto3" json:"Price,omitempty"`
	SalesTotalMany       bool        `protobuf:"varint,5,opt,name=SalesTotalMany,proto3" json:"SalesTotalMany,omitempty"`
	SalesTotal           uint64      `protobuf:"varint,6,opt,name=SalesTotal,proto3" json:"SalesTotal,omitempty"`
	SoldTotal            uint64      `protobuf:"varint,7,opt,name=SoldTotal,proto3" json:"SoldTotal,omitempty"`
	LockTotal            uint64      `protobuf:"varint,8,opt,name=LockTotal,proto3" json:"LockTotal,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *ObjectShareboxGoods) Reset()         { *m = ObjectShareboxGoods{} }
func (m *ObjectShareboxGoods) String() string { return proto.CompactTextString(m) }
func (*ObjectShareboxGoods) ProtoMessage()    {}
func (*ObjectShareboxGoods) Descriptor() ([]byte, []int) {
	return fileDescriptor_477dbe5538164b5b, []int{0}
}
func (m *ObjectShareboxGoods) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectShareboxGoods) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectShareboxGoods.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectShareboxGoods) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectShareboxGoods.Merge(m, src)
}
func (m *ObjectShareboxGoods) XXX_Size() int {
	return m.Size()
}
func (m *ObjectShareboxGoods) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectShareboxGoods.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectShareboxGoods proto.InternalMessageInfo

func (m *ObjectShareboxGoods) GetBase() *ObjectBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *ObjectShareboxGoods) GetGoodsId() []byte {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *ObjectShareboxGoods) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ObjectShareboxGoods) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *ObjectShareboxGoods) GetSalesTotalMany() bool {
	if m != nil {
		return m.SalesTotalMany
	}
	return false
}

func (m *ObjectShareboxGoods) GetSalesTotal() uint64 {
	if m != nil {
		return m.SalesTotal
	}
	return 0
}

func (m *ObjectShareboxGoods) GetSoldTotal() uint64 {
	if m != nil {
		return m.SoldTotal
	}
	return 0
}

func (m *ObjectShareboxGoods) GetLockTotal() uint64 {
	if m != nil {
		return m.LockTotal
	}
	return 0
}

func init() {
	proto.RegisterType((*ObjectShareboxGoods)(nil), "go_protos.ObjectShareboxGoods")
}

func init() { proto.RegisterFile("object_sharebox_goods.proto", fileDescriptor_477dbe5538164b5b) }

var fileDescriptor_477dbe5538164b5b = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xce, 0x4f, 0xca, 0x4a,
	0x4d, 0x2e, 0x89, 0x2f, 0xce, 0x48, 0x2c, 0x4a, 0x4d, 0xca, 0xaf, 0x88, 0x4f, 0xcf, 0xcf, 0x4f,
	0x29, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5,
	0x04, 0xa1, 0xea, 0x92, 0x12, 0x8b, 0x53, 0x21, 0xb2, 0x4a, 0x1d, 0x4c, 0x5c, 0xc2, 0xfe, 0x60,
	0xd1, 0x60, 0xa8, 0x66, 0x77, 0x90, 0x5e, 0x21, 0x4d, 0x2e, 0x16, 0xa7, 0xc4, 0xe2, 0x54, 0x09,
	0x46, 0x05, 0x46, 0x0d, 0x6e, 0x23, 0x51, 0x3d, 0xb8, 0x21, 0x7a, 0x10, 0xd5, 0x20, 0xc9, 0x20,
	0xb0, 0x12, 0x21, 0x09, 0x2e, 0x76, 0xb0, 0x1e, 0xcf, 0x14, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x9e,
	0x20, 0x18, 0x57, 0x48, 0x88, 0x8b, 0xc5, 0x2f, 0x31, 0x37, 0x55, 0x82, 0x59, 0x81, 0x51, 0x83,
	0x33, 0x08, 0xcc, 0x16, 0x12, 0xe1, 0x62, 0x0d, 0x28, 0xca, 0x4c, 0x4e, 0x95, 0x60, 0x51, 0x60,
	0xd4, 0x60, 0x09, 0x82, 0x70, 0x84, 0xd4, 0xb8, 0xf8, 0x82, 0x13, 0x73, 0x52, 0x8b, 0x43, 0xf2,
	0x4b, 0x12, 0x73, 0x7c, 0x13, 0xf3, 0x2a, 0x25, 0x58, 0x15, 0x18, 0x35, 0x38, 0x82, 0xd0, 0x44,
	0x85, 0xe4, 0xb8, 0xb8, 0x10, 0x22, 0x12, 0x6c, 0x60, 0x23, 0x90, 0x44, 0x84, 0x64, 0xb8, 0x38,
	0x83, 0xf3, 0x73, 0x52, 0x20, 0xd2, 0xec, 0x60, 0x69, 0x84, 0x00, 0x48, 0xd6, 0x27, 0x3f, 0x39,
	0x1b, 0x22, 0xcb, 0x01, 0x91, 0x85, 0x0b, 0x38, 0xa9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x89, 0xea, 0xe9, 0x43, 0x3c,
	0x1d, 0x0f, 0x0b, 0xb8, 0xd4, 0xc4, 0xbc, 0xe2, 0x24, 0x36, 0xb0, 0xa0, 0x31, 0x20, 0x00, 0x00,
	0xff, 0xff, 0xd0, 0x77, 0xdb, 0x3a, 0x77, 0x01, 0x00, 0x00,
}

func (m *ObjectShareboxGoods) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectShareboxGoods) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectShareboxGoods) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LockTotal != 0 {
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(m.LockTotal))
		i--
		dAtA[i] = 0x40
	}
	if m.SoldTotal != 0 {
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(m.SoldTotal))
		i--
		dAtA[i] = 0x38
	}
	if m.SalesTotal != 0 {
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(m.SalesTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.SalesTotalMany {
		i--
		if m.SalesTotalMany {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Price != 0 {
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintObjectShareboxGoods(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObjectShareboxGoods(dAtA []byte, offset int, v uint64) int {
	offset -= sovObjectShareboxGoods(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectShareboxGoods) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovObjectShareboxGoods(uint64(l))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovObjectShareboxGoods(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovObjectShareboxGoods(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovObjectShareboxGoods(uint64(m.Price))
	}
	if m.SalesTotalMany {
		n += 2
	}
	if m.SalesTotal != 0 {
		n += 1 + sovObjectShareboxGoods(uint64(m.SalesTotal))
	}
	if m.SoldTotal != 0 {
		n += 1 + sovObjectShareboxGoods(uint64(m.SoldTotal))
	}
	if m.LockTotal != 0 {
		n += 1 + sovObjectShareboxGoods(uint64(m.LockTotal))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovObjectShareboxGoods(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObjectShareboxGoods(x uint64) (n int) {
	return sovObjectShareboxGoods(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectShareboxGoods) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjectShareboxGoods
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectShareboxGoods: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectShareboxGoods: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ObjectBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = append(m.GoodsId[:0], dAtA[iNdEx:postIndex]...)
			if m.GoodsId == nil {
				m.GoodsId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesTotalMany", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SalesTotalMany = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SalesTotal", wireType)
			}
			m.SalesTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SalesTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoldTotal", wireType)
			}
			m.SoldTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoldTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockTotal", wireType)
			}
			m.LockTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObjectShareboxGoods(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObjectShareboxGoods
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObjectShareboxGoods(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObjectShareboxGoods
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectShareboxGoods
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObjectShareboxGoods
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObjectShareboxGoods
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObjectShareboxGoods
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObjectShareboxGoods        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjectShareboxGoods          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObjectShareboxGoods = fmt.Errorf("proto: unexpected end of group")
)
