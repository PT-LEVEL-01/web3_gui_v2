// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: object_order_base.proto

//包名，通过protoc生成时go文件时

package protos_object_beans

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ObjectOrderBase struct {
	Id                   []byte   `protobuf:"bytes,1,opt,name=Id,proto3" json:"Id,omitempty"`
	GoodsId              []byte   `protobuf:"bytes,2,opt,name=GoodsId,proto3" json:"GoodsId,omitempty"`
	UserAddr             []byte   `protobuf:"bytes,3,opt,name=UserAddr,proto3" json:"UserAddr,omitempty"`
	ServerAddr           []byte   `protobuf:"bytes,4,opt,name=ServerAddr,proto3" json:"ServerAddr,omitempty"`
	TotalPrice           uint64   `protobuf:"varint,5,opt,name=TotalPrice,proto3" json:"TotalPrice,omitempty"`
	ChainTx              []byte   `protobuf:"bytes,6,opt,name=ChainTx,proto3" json:"ChainTx,omitempty"`
	TxHash               []byte   `protobuf:"bytes,7,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	CreateTime           int64    `protobuf:"varint,8,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
	PayLockBlockHeight   uint64   `protobuf:"varint,9,opt,name=PayLockBlockHeight,proto3" json:"PayLockBlockHeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ObjectOrderBase) Reset()         { *m = ObjectOrderBase{} }
func (m *ObjectOrderBase) String() string { return proto.CompactTextString(m) }
func (*ObjectOrderBase) ProtoMessage()    {}
func (*ObjectOrderBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_6de0cc3ffeffbe6b, []int{0}
}
func (m *ObjectOrderBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObjectOrderBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObjectOrderBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObjectOrderBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObjectOrderBase.Merge(m, src)
}
func (m *ObjectOrderBase) XXX_Size() int {
	return m.Size()
}
func (m *ObjectOrderBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ObjectOrderBase.DiscardUnknown(m)
}

var xxx_messageInfo_ObjectOrderBase proto.InternalMessageInfo

func (m *ObjectOrderBase) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *ObjectOrderBase) GetGoodsId() []byte {
	if m != nil {
		return m.GoodsId
	}
	return nil
}

func (m *ObjectOrderBase) GetUserAddr() []byte {
	if m != nil {
		return m.UserAddr
	}
	return nil
}

func (m *ObjectOrderBase) GetServerAddr() []byte {
	if m != nil {
		return m.ServerAddr
	}
	return nil
}

func (m *ObjectOrderBase) GetTotalPrice() uint64 {
	if m != nil {
		return m.TotalPrice
	}
	return 0
}

func (m *ObjectOrderBase) GetChainTx() []byte {
	if m != nil {
		return m.ChainTx
	}
	return nil
}

func (m *ObjectOrderBase) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *ObjectOrderBase) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func (m *ObjectOrderBase) GetPayLockBlockHeight() uint64 {
	if m != nil {
		return m.PayLockBlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*ObjectOrderBase)(nil), "go_protos.ObjectOrderBase")
}

func init() { proto.RegisterFile("object_order_base.proto", fileDescriptor_6de0cc3ffeffbe6b) }

var fileDescriptor_6de0cc3ffeffbe6b = []byte{
	// 274 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xc1, 0x4a, 0xc3, 0x30,
	0x18, 0xc7, 0x4d, 0x37, 0xbb, 0x2d, 0x88, 0x42, 0x40, 0x0d, 0x1e, 0x42, 0xf1, 0x62, 0x4f, 0xf5,
	0xe0, 0x13, 0xd8, 0x1d, 0x5c, 0x41, 0xd8, 0xa8, 0xf5, 0xe2, 0xa5, 0xa4, 0xcd, 0xc7, 0x5a, 0x37,
	0xf7, 0x49, 0x12, 0x64, 0xbe, 0x89, 0xbe, 0x91, 0x47, 0x1f, 0x41, 0xea, 0x8b, 0x48, 0xb3, 0x2a,
	0x3d, 0x78, 0xcb, 0xff, 0xf7, 0xfb, 0xc8, 0x1f, 0xfe, 0xf4, 0x14, 0x8b, 0x47, 0x28, 0x6d, 0x8e,
	0x5a, 0x81, 0xce, 0x0b, 0x69, 0x20, 0x7a, 0xd6, 0x68, 0x91, 0x4d, 0x96, 0x98, 0xbb, 0x97, 0x39,
	0x7f, 0xf7, 0xe8, 0xd1, 0xdc, 0x9d, 0xcd, 0xdb, 0xab, 0x58, 0x1a, 0x60, 0x87, 0xd4, 0x4b, 0x14,
	0x27, 0x01, 0x09, 0x0f, 0x52, 0x2f, 0x51, 0x8c, 0xd3, 0xd1, 0x0d, 0xa2, 0x32, 0x89, 0xe2, 0x9e,
	0x83, 0xbf, 0x91, 0x9d, 0xd1, 0xf1, 0xbd, 0x01, 0x7d, 0xad, 0x94, 0xe6, 0x03, 0xa7, 0xfe, 0x32,
	0x13, 0x94, 0xde, 0x81, 0x7e, 0xe9, 0xec, 0xd0, 0xd9, 0x1e, 0x69, 0x7d, 0x86, 0x56, 0xae, 0x17,
	0xba, 0x2e, 0x81, 0xef, 0x07, 0x24, 0x1c, 0xa6, 0x3d, 0xd2, 0xb6, 0x4e, 0x2b, 0x59, 0x6f, 0xb2,
	0x2d, 0xf7, 0x77, 0xad, 0x5d, 0x64, 0x27, 0xd4, 0xcf, 0xb6, 0x33, 0x69, 0x2a, 0x3e, 0x72, 0xa2,
	0x4b, 0xed, 0x8f, 0x53, 0x0d, 0xd2, 0x42, 0x56, 0x3f, 0x01, 0x1f, 0x07, 0x24, 0x1c, 0xa4, 0x3d,
	0xc2, 0x22, 0xca, 0x16, 0xf2, 0xf5, 0x16, 0xcb, 0x55, 0xbc, 0xc6, 0x72, 0x35, 0x83, 0x7a, 0x59,
	0x59, 0x3e, 0x71, 0xcd, 0xff, 0x98, 0xf8, 0xe2, 0xa3, 0x11, 0xe4, 0xb3, 0x11, 0xe4, 0xab, 0x11,
	0xe4, 0xed, 0x5b, 0xec, 0x3d, 0x1c, 0x47, 0x97, 0xbb, 0xdd, 0xf2, 0x6e, 0xda, 0x02, 0xe4, 0xc6,
	0x14, 0xbe, 0x83, 0x57, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x4e, 0xda, 0x06, 0x58, 0x71, 0x01,
	0x00, 0x00,
}

func (m *ObjectOrderBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObjectOrderBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObjectOrderBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PayLockBlockHeight != 0 {
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(m.PayLockBlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if m.CreateTime != 0 {
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x40
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ChainTx) > 0 {
		i -= len(m.ChainTx)
		copy(dAtA[i:], m.ChainTx)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.ChainTx)))
		i--
		dAtA[i] = 0x32
	}
	if m.TotalPrice != 0 {
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(m.TotalPrice))
		i--
		dAtA[i] = 0x28
	}
	if len(m.ServerAddr) > 0 {
		i -= len(m.ServerAddr)
		copy(dAtA[i:], m.ServerAddr)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.ServerAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.UserAddr) > 0 {
		i -= len(m.UserAddr)
		copy(dAtA[i:], m.UserAddr)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.UserAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GoodsId) > 0 {
		i -= len(m.GoodsId)
		copy(dAtA[i:], m.GoodsId)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.GoodsId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintObjectOrderBase(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintObjectOrderBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovObjectOrderBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObjectOrderBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	l = len(m.GoodsId)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	l = len(m.UserAddr)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	l = len(m.ServerAddr)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	if m.TotalPrice != 0 {
		n += 1 + sovObjectOrderBase(uint64(m.TotalPrice))
	}
	l = len(m.ChainTx)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovObjectOrderBase(uint64(l))
	}
	if m.CreateTime != 0 {
		n += 1 + sovObjectOrderBase(uint64(m.CreateTime))
	}
	if m.PayLockBlockHeight != 0 {
		n += 1 + sovObjectOrderBase(uint64(m.PayLockBlockHeight))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovObjectOrderBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozObjectOrderBase(x uint64) (n int) {
	return sovObjectOrderBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObjectOrderBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowObjectOrderBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObjectOrderBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObjectOrderBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoodsId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GoodsId = append(m.GoodsId[:0], dAtA[iNdEx:postIndex]...)
			if m.GoodsId == nil {
				m.GoodsId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddr = append(m.UserAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.UserAddr == nil {
				m.UserAddr = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServerAddr = append(m.ServerAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.ServerAddr == nil {
				m.ServerAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPrice", wireType)
			}
			m.TotalPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainTx", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainTx = append(m.ChainTx[:0], dAtA[iNdEx:postIndex]...)
			if m.ChainTx == nil {
				m.ChainTx = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PayLockBlockHeight", wireType)
			}
			m.PayLockBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PayLockBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipObjectOrderBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthObjectOrderBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipObjectOrderBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowObjectOrderBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowObjectOrderBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthObjectOrderBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupObjectOrderBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthObjectOrderBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthObjectOrderBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowObjectOrderBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupObjectOrderBase = fmt.Errorf("proto: unexpected end of group")
)
