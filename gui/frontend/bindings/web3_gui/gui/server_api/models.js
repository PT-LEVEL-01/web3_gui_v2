// @ts-check
// Cynhyrchwyd y ffeil hon yn awtomatig. PEIDIWCH Â MODIWL
// This file is automatically generated. DO NOT EDIT

// eslint-disable-next-line @typescript-eslint/ban-ts-comment
// @ts-ignore: Unused imports
import { Create as $Create } from "@wailsio/runtime";

export class AddressInfo {
    /**
     * Creates a new AddressInfo instance.
     * @param {Partial<AddressInfo>} [$$source = {}] - The source object to create the AddressInfo.
     */
    constructor($$source = {}) {
        if (!("index" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["index"] = 0;
        }
        if (!("address" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["address"] = "";
        }
        if (!("balance" in $$source)) {
            /**
             * 可用余额
             * @member
             * @type {number}
             */
            this["balance"] = 0;
        }
        if (!("balance_frozen" in $$source)) {
            /**
             * 冻结余额
             * @member
             * @type {number}
             */
            this["balance_frozen"] = 0;
        }
        if (!("balance_lockup" in $$source)) {
            /**
             * 锁仓余额
             * @member
             * @type {number}
             */
            this["balance_lockup"] = 0;
        }
        if (!("peer_type" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["peer_type"] = 0;
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new AddressInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {AddressInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new AddressInfo(/** @type {Partial<AddressInfo>} */($$parsedSource));
    }
}

export class NetWorkinfo {
    /**
     * Creates a new NetWorkinfo instance.
     * @param {Partial<NetWorkinfo>} [$$source = {}] - The source object to create the NetWorkinfo.
     */
    constructor($$source = {}) {
        if (!("NetAddr" in $$source)) {
            /**
             * 本节点地址
             * @member
             * @type {string}
             */
            this["NetAddr"] = "";
        }
        if (!("Issuper" in $$source)) {
            /**
             * 是否超级节点
             * @member
             * @type {boolean}
             */
            this["Issuper"] = false;
        }
        if (!("WebAddr" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["WebAddr"] = "";
        }
        if (!("TCPAddr" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["TCPAddr"] = "";
        }
        if (!("LogicAddr" in $$source)) {
            /**
             * 连接的其他节点地址
             * @member
             * @type {string[]}
             */
            this["LogicAddr"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new NetWorkinfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {NetWorkinfo}
     */
    static createFrom($$source = {}) {
        const $$createField4_0 = $$createType0;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("LogicAddr" in $$parsedSource) {
            $$parsedSource["LogicAddr"] = $$createField4_0($$parsedSource["LogicAddr"]);
        }
        return new NetWorkinfo(/** @type {Partial<NetWorkinfo>} */($$parsedSource));
    }
}

export class Peer {
    /**
     * Creates a new Peer instance.
     * @param {Partial<Peer>} [$$source = {}] - The source object to create the Peer.
     */
    constructor($$source = {}) {
        if (!("id" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["id"] = "";
        }
        if (!("group" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["group"] = "";
        }
        if (!("name" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["name"] = "";
        }
        if (!("ip" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["ip"] = "";
        }
        if (!("port" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["port"] = 0;
        }
        if (!("username" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["username"] = "";
        }
        if (!("password" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["password"] = "";
        }
        if (!("status" in $$source)) {
            /**
             * 是否开启
             * @member
             * @type {boolean}
             */
            this["status"] = false;
        }
        if (!("highest_block" in $$source)) {
            /**
             * 所链接的节点的最高高度
             * @member
             * @type {number}
             */
            this["highest_block"] = 0;
        }
        if (!("current_block" in $$source)) {
            /**
             * 块高度
             * @member
             * @type {number}
             */
            this["current_block"] = 0;
        }
        if (!("snapshot_height" in $$source)) {
            /**
             * 快照高度
             * @member
             * @type {number}
             */
            this["snapshot_height"] = 0;
        }
        if (!("total_balance" in $$source)) {
            /**
             * 总余额
             * @member
             * @type {number}
             */
            this["total_balance"] = 0;
        }
        if (!("types" in $$source)) {
            /**
             * 角色
             * @member
             * @type {{ [_: `${number}`]: number }}
             */
            this["types"] = {};
        }
        if (!("used_time" in $$source)) {
            /**
             * 耗时
             * @member
             * @type {number}
             */
            this["used_time"] = 0;
        }
        if (!("is_del" in $$source)) {
            /**
             * @member
             * @type {boolean}
             */
            this["is_del"] = false;
        }
        if (!("error" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["error"] = "";
        }
        if (!("updated_at" in $$source)) {
            /**
             * @member
             * @type {number}
             */
            this["updated_at"] = 0;
        }
        if (!("default_address" in $$source)) {
            /**
             * @member
             * @type {AddressInfo | null}
             */
            this["default_address"] = null;
        }
        if (!("addresses" in $$source)) {
            /**
             * @member
             * @type {(AddressInfo | null)[]}
             */
            this["addresses"] = [];
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new Peer instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {Peer}
     */
    static createFrom($$source = {}) {
        const $$createField12_0 = $$createType1;
        const $$createField17_0 = $$createType3;
        const $$createField18_0 = $$createType4;
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        if ("types" in $$parsedSource) {
            $$parsedSource["types"] = $$createField12_0($$parsedSource["types"]);
        }
        if ("default_address" in $$parsedSource) {
            $$parsedSource["default_address"] = $$createField17_0($$parsedSource["default_address"]);
        }
        if ("addresses" in $$parsedSource) {
            $$parsedSource["addresses"] = $$createField18_0($$parsedSource["addresses"]);
        }
        return new Peer(/** @type {Partial<Peer>} */($$parsedSource));
    }
}

export class VersionUpdateInfo {
    /**
     * Creates a new VersionUpdateInfo instance.
     * @param {Partial<VersionUpdateInfo>} [$$source = {}] - The source object to create the VersionUpdateInfo.
     */
    constructor($$source = {}) {
        if (!("IsNew" in $$source)) {
            /**
             * 是否有新版本
             * @member
             * @type {boolean}
             */
            this["IsNew"] = false;
        }
        if (!("IsRester" in $$source)) {
            /**
             * 是否需要重启
             * @member
             * @type {boolean}
             */
            this["IsRester"] = false;
        }
        if (!("VersionName" in $$source)) {
            /**
             * 新版本名称
             * @member
             * @type {string}
             */
            this["VersionName"] = "";
        }
        if (!("VersionIndex" in $$source)) {
            /**
             * 新版本编号
             * @member
             * @type {number}
             */
            this["VersionIndex"] = 0;
        }
        if (!("Error" in $$source)) {
            /**
             * @member
             * @type {string}
             */
            this["Error"] = "";
        }

        Object.assign(this, $$source);
    }

    /**
     * Creates a new VersionUpdateInfo instance from a string or object.
     * @param {any} [$$source = {}]
     * @returns {VersionUpdateInfo}
     */
    static createFrom($$source = {}) {
        let $$parsedSource = typeof $$source === 'string' ? JSON.parse($$source) : $$source;
        return new VersionUpdateInfo(/** @type {Partial<VersionUpdateInfo>} */($$parsedSource));
    }
}

// Private type creation functions
const $$createType0 = $Create.Array($Create.Any);
const $$createType1 = $Create.Map($Create.Any, $Create.Any);
const $$createType2 = AddressInfo.createFrom;
const $$createType3 = $Create.Nullable($$createType2);
const $$createType4 = $Create.Array($$createType3);
