{
  "version": 3,
  "sources": ["../../prismjs/plugins/custom-class/prism-custom-class.js"],
  "sourcesContent": ["(function () {\n\n\tif (typeof Prism === 'undefined') {\n\t\treturn;\n\t}\n\n\t/**\n\t * @callback ClassMapper\n\t * @param {string} className\n\t * @param {string} language\n\t * @returns {string}\n\t *\n\t * @callback ClassAdder\n\t * @param {ClassAdderEnvironment} env\n\t * @returns {undefined | string | string[]}\n\t *\n\t * @typedef ClassAdderEnvironment\n\t * @property {string} language\n\t * @property {string} type\n\t * @property {string} content\n\t */\n\n\t// options\n\n\t/** @type {ClassAdder | undefined} */\n\tvar adder;\n\t/** @type {ClassMapper | undefined} */\n\tvar mapper;\n\t/** @type {string} */\n\tvar prefixString = '';\n\n\n\t/**\n\t * @param {string} className\n\t * @param {string} language\n\t */\n\tfunction apply(className, language) {\n\t\treturn prefixString + (mapper ? mapper(className, language) : className);\n\t}\n\n\n\tPrism.plugins.customClass = {\n\t\t/**\n\t\t * Sets the function which can be used to add custom aliases to any token.\n\t\t *\n\t\t * @param {ClassAdder} classAdder\n\t\t */\n\t\tadd: function (classAdder) {\n\t\t\tadder = classAdder;\n\t\t},\n\t\t/**\n\t\t * Maps all class names using the given object or map function.\n\t\t *\n\t\t * This does not affect the prefix.\n\t\t *\n\t\t * @param {Object<string, string> | ClassMapper} classMapper\n\t\t */\n\t\tmap: function map(classMapper) {\n\t\t\tif (typeof classMapper === 'function') {\n\t\t\t\tmapper = classMapper;\n\t\t\t} else {\n\t\t\t\tmapper = function (className) {\n\t\t\t\t\treturn classMapper[className] || className;\n\t\t\t\t};\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Adds the given prefix to all class names.\n\t\t *\n\t\t * @param {string} string\n\t\t */\n\t\tprefix: function prefix(string) {\n\t\t\tprefixString = string || '';\n\t\t},\n\t\t/**\n\t\t * Applies the current mapping and prefix to the given class name.\n\t\t *\n\t\t * @param {string} className A single class name.\n\t\t * @param {string} language The language of the code that contains this class name.\n\t\t *\n\t\t * If the language is unknown, pass `\"none\"`.\n\t\t */\n\t\tapply: apply\n\t};\n\n\tPrism.hooks.add('wrap', function (env) {\n\t\tif (adder) {\n\t\t\tvar result = adder({\n\t\t\t\tcontent: env.content,\n\t\t\t\ttype: env.type,\n\t\t\t\tlanguage: env.language\n\t\t\t});\n\n\t\t\tif (Array.isArray(result)) {\n\t\t\t\tenv.classes.push.apply(env.classes, result);\n\t\t\t} else if (result) {\n\t\t\t\tenv.classes.push(result);\n\t\t\t}\n\t\t}\n\n\t\tif (!mapper && !prefixString) {\n\t\t\treturn;\n\t\t}\n\n\t\tenv.classes = env.classes.map(function (c) {\n\t\t\treturn apply(c, env.language);\n\t\t});\n\t});\n\n}());\n"],
  "mappings": ";CAAC,WAAY;AAEZ,MAAI,OAAO,UAAU,aAAa;AACjC;AAAA,EACD;AAqBA,MAAI;AAEJ,MAAI;AAEJ,MAAI,eAAe;AAOnB,WAAS,MAAM,WAAW,UAAU;AACnC,WAAO,gBAAgB,SAAS,OAAO,WAAW,QAAQ,IAAI;AAAA,EAC/D;AAGA,QAAM,QAAQ,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAM3B,KAAK,SAAU,YAAY;AAC1B,cAAQ;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAQA,KAAK,SAAS,IAAI,aAAa;AAC9B,UAAI,OAAO,gBAAgB,YAAY;AACtC,iBAAS;AAAA,MACV,OAAO;AACN,iBAAS,SAAU,WAAW;AAC7B,iBAAO,YAAY,SAAS,KAAK;AAAA,QAClC;AAAA,MACD;AAAA,IACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAMA,QAAQ,SAAS,OAAO,QAAQ;AAC/B,qBAAe,UAAU;AAAA,IAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IASA;AAAA,EACD;AAEA,QAAM,MAAM,IAAI,QAAQ,SAAU,KAAK;AACtC,QAAI,OAAO;AACV,UAAI,SAAS,MAAM;AAAA,QAClB,SAAS,IAAI;AAAA,QACb,MAAM,IAAI;AAAA,QACV,UAAU,IAAI;AAAA,MACf,CAAC;AAED,UAAI,MAAM,QAAQ,MAAM,GAAG;AAC1B,YAAI,QAAQ,KAAK,MAAM,IAAI,SAAS,MAAM;AAAA,MAC3C,WAAW,QAAQ;AAClB,YAAI,QAAQ,KAAK,MAAM;AAAA,MACxB;AAAA,IACD;AAEA,QAAI,CAAC,UAAU,CAAC,cAAc;AAC7B;AAAA,IACD;AAEA,QAAI,UAAU,IAAI,QAAQ,IAAI,SAAU,GAAG;AAC1C,aAAO,MAAM,GAAG,IAAI,QAAQ;AAAA,IAC7B,CAAC;AAAA,EACF,CAAC;AAEF,GAAE;",
  "names": []
}
