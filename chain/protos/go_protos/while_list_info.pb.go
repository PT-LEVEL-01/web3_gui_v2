// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: while_list_info.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WhileListInfo struct {
	TCPHost              uint32   `protobuf:"varint,1,opt,name=TCPHost,proto3" json:"TCPHost,omitempty"`
	TCPPort              uint32   `protobuf:"varint,2,opt,name=TCPPort,proto3" json:"TCPPort,omitempty"`
	AddrCoin             []byte   `protobuf:"bytes,3,opt,name=AddrCoin,proto3" json:"AddrCoin,omitempty"`
	AddrNet              []byte   `protobuf:"bytes,4,opt,name=AddrNet,proto3" json:"AddrNet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WhileListInfo) Reset()         { *m = WhileListInfo{} }
func (m *WhileListInfo) String() string { return proto.CompactTextString(m) }
func (*WhileListInfo) ProtoMessage()    {}
func (*WhileListInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_11449e6dc93894b9, []int{0}
}
func (m *WhileListInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WhileListInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WhileListInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WhileListInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WhileListInfo.Merge(m, src)
}
func (m *WhileListInfo) XXX_Size() int {
	return m.Size()
}
func (m *WhileListInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_WhileListInfo.DiscardUnknown(m)
}

var xxx_messageInfo_WhileListInfo proto.InternalMessageInfo

func (m *WhileListInfo) GetTCPHost() uint32 {
	if m != nil {
		return m.TCPHost
	}
	return 0
}

func (m *WhileListInfo) GetTCPPort() uint32 {
	if m != nil {
		return m.TCPPort
	}
	return 0
}

func (m *WhileListInfo) GetAddrCoin() []byte {
	if m != nil {
		return m.AddrCoin
	}
	return nil
}

func (m *WhileListInfo) GetAddrNet() []byte {
	if m != nil {
		return m.AddrNet
	}
	return nil
}

func init() {
	proto.RegisterType((*WhileListInfo)(nil), "go_protos.WhileListInfo")
}

func init() { proto.RegisterFile("while_list_info.proto", fileDescriptor_11449e6dc93894b9) }

var fileDescriptor_11449e6dc93894b9 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xcf, 0xc8, 0xcc,
	0x49, 0x8d, 0xcf, 0xc9, 0x2c, 0x2e, 0x89, 0xcf, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0x95, 0x2a, 0xb9, 0x78, 0xc3, 0x41, 0x6a,
	0x7c, 0x32, 0x8b, 0x4b, 0x3c, 0xf3, 0xd2, 0xf2, 0x85, 0x24, 0xb8, 0xd8, 0x43, 0x9c, 0x03, 0x3c,
	0xf2, 0x8b, 0x4b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x78, 0x83, 0x60, 0x5c, 0xa8, 0x4c, 0x40, 0x7e,
	0x51, 0x89, 0x04, 0x13, 0x5c, 0x06, 0xc4, 0x15, 0x92, 0xe2, 0xe2, 0x70, 0x4c, 0x49, 0x29, 0x72,
	0xce, 0xcf, 0xcc, 0x93, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0xf3, 0x41, 0xba, 0x40, 0x6c,
	0xbf, 0xd4, 0x12, 0x09, 0x16, 0xb0, 0x14, 0x8c, 0xeb, 0x24, 0x7b, 0xe2, 0x91, 0x1c, 0xe3, 0x85,
	0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10, 0xc5, 0xad, 0xa7, 0x0f,
	0x77, 0x59, 0x12, 0x1b, 0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xcb, 0xa1, 0xf7, 0xed,
	0xc4, 0x00, 0x00, 0x00,
}

func (m *WhileListInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WhileListInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *WhileListInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AddrNet) > 0 {
		i -= len(m.AddrNet)
		copy(dAtA[i:], m.AddrNet)
		i = encodeVarintWhileListInfo(dAtA, i, uint64(len(m.AddrNet)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.AddrCoin) > 0 {
		i -= len(m.AddrCoin)
		copy(dAtA[i:], m.AddrCoin)
		i = encodeVarintWhileListInfo(dAtA, i, uint64(len(m.AddrCoin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.TCPPort != 0 {
		i = encodeVarintWhileListInfo(dAtA, i, uint64(m.TCPPort))
		i--
		dAtA[i] = 0x10
	}
	if m.TCPHost != 0 {
		i = encodeVarintWhileListInfo(dAtA, i, uint64(m.TCPHost))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWhileListInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovWhileListInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *WhileListInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TCPHost != 0 {
		n += 1 + sovWhileListInfo(uint64(m.TCPHost))
	}
	if m.TCPPort != 0 {
		n += 1 + sovWhileListInfo(uint64(m.TCPPort))
	}
	l = len(m.AddrCoin)
	if l > 0 {
		n += 1 + l + sovWhileListInfo(uint64(l))
	}
	l = len(m.AddrNet)
	if l > 0 {
		n += 1 + l + sovWhileListInfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWhileListInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWhileListInfo(x uint64) (n int) {
	return sovWhileListInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WhileListInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWhileListInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WhileListInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WhileListInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPHost", wireType)
			}
			m.TCPHost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TCPHost |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TCPPort", wireType)
			}
			m.TCPPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TCPPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrCoin", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhileListInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhileListInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrCoin = append(m.AddrCoin[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrCoin == nil {
				m.AddrCoin = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrNet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthWhileListInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthWhileListInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrNet = append(m.AddrNet[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrNet == nil {
				m.AddrNet = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWhileListInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthWhileListInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWhileListInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWhileListInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWhileListInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWhileListInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWhileListInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWhileListInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWhileListInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWhileListInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWhileListInfo = fmt.Errorf("proto: unexpected end of group")
)
