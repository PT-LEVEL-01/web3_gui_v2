// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_multsign.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 多签集合
type MultsignSet struct {
	MultAddress          []byte   `protobuf:"bytes,1,opt,name=MultAddress,proto3" json:"MultAddress,omitempty"`
	Puks                 [][]byte `protobuf:"bytes,2,rep,name=Puks,proto3" json:"Puks,omitempty"`
	RandNum              []byte   `protobuf:"bytes,3,opt,name=RandNum,proto3" json:"RandNum,omitempty"`
	Name                 []byte   `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MultsignSet) Reset()         { *m = MultsignSet{} }
func (m *MultsignSet) String() string { return proto.CompactTextString(m) }
func (*MultsignSet) ProtoMessage()    {}
func (*MultsignSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d9de7c7b611675, []int{0}
}
func (m *MultsignSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultsignSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultsignSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultsignSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultsignSet.Merge(m, src)
}
func (m *MultsignSet) XXX_Size() int {
	return m.Size()
}
func (m *MultsignSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MultsignSet.DiscardUnknown(m)
}

var xxx_messageInfo_MultsignSet proto.InternalMessageInfo

func (m *MultsignSet) GetMultAddress() []byte {
	if m != nil {
		return m.MultAddress
	}
	return nil
}

func (m *MultsignSet) GetPuks() [][]byte {
	if m != nil {
		return m.Puks
	}
	return nil
}

func (m *MultsignSet) GetRandNum() []byte {
	if m != nil {
		return m.RandNum
	}
	return nil
}

func (m *MultsignSet) GetName() []byte {
	if m != nil {
		return m.Name
	}
	return nil
}

// 多签地址
type TxMultsignAddr struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	MultAddress          []byte   `protobuf:"bytes,2,opt,name=MultAddress,proto3" json:"MultAddress,omitempty"`
	RandNum              []byte   `protobuf:"bytes,3,opt,name=RandNum,proto3" json:"RandNum,omitempty"`
	MultVins             []*Vin   `protobuf:"bytes,4,rep,name=MultVins,proto3" json:"MultVins,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxMultsignAddr) Reset()         { *m = TxMultsignAddr{} }
func (m *TxMultsignAddr) String() string { return proto.CompactTextString(m) }
func (*TxMultsignAddr) ProtoMessage()    {}
func (*TxMultsignAddr) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d9de7c7b611675, []int{1}
}
func (m *TxMultsignAddr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxMultsignAddr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxMultsignAddr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxMultsignAddr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxMultsignAddr.Merge(m, src)
}
func (m *TxMultsignAddr) XXX_Size() int {
	return m.Size()
}
func (m *TxMultsignAddr) XXX_DiscardUnknown() {
	xxx_messageInfo_TxMultsignAddr.DiscardUnknown(m)
}

var xxx_messageInfo_TxMultsignAddr proto.InternalMessageInfo

func (m *TxMultsignAddr) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxMultsignAddr) GetMultAddress() []byte {
	if m != nil {
		return m.MultAddress
	}
	return nil
}

func (m *TxMultsignAddr) GetRandNum() []byte {
	if m != nil {
		return m.RandNum
	}
	return nil
}

func (m *TxMultsignAddr) GetMultVins() []*Vin {
	if m != nil {
		return m.MultVins
	}
	return nil
}

// 多签支付
type TxMultsignPay struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	MultAddress          []byte   `protobuf:"bytes,2,opt,name=MultAddress,proto3" json:"MultAddress,omitempty"`
	MultVins             []*Vin   `protobuf:"bytes,3,rep,name=MultVins,proto3" json:"MultVins,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxMultsignPay) Reset()         { *m = TxMultsignPay{} }
func (m *TxMultsignPay) String() string { return proto.CompactTextString(m) }
func (*TxMultsignPay) ProtoMessage()    {}
func (*TxMultsignPay) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d9de7c7b611675, []int{2}
}
func (m *TxMultsignPay) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxMultsignPay) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxMultsignPay.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxMultsignPay) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxMultsignPay.Merge(m, src)
}
func (m *TxMultsignPay) XXX_Size() int {
	return m.Size()
}
func (m *TxMultsignPay) XXX_DiscardUnknown() {
	xxx_messageInfo_TxMultsignPay.DiscardUnknown(m)
}

var xxx_messageInfo_TxMultsignPay proto.InternalMessageInfo

func (m *TxMultsignPay) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxMultsignPay) GetMultAddress() []byte {
	if m != nil {
		return m.MultAddress
	}
	return nil
}

func (m *TxMultsignPay) GetMultVins() []*Vin {
	if m != nil {
		return m.MultVins
	}
	return nil
}

// 多签域名
type TxMultsignName struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	MultAddress          []byte   `protobuf:"bytes,2,opt,name=MultAddress,proto3" json:"MultAddress,omitempty"`
	MultVins             []*Vin   `protobuf:"bytes,3,rep,name=MultVins,proto3" json:"MultVins,omitempty"`
	Account              []byte   `protobuf:"bytes,4,opt,name=Account,proto3" json:"Account,omitempty"`
	NetIds               [][]byte `protobuf:"bytes,5,rep,name=NetIds,proto3" json:"NetIds,omitempty"`
	NetIdsMerkleHash     []byte   `protobuf:"bytes,6,opt,name=NetIdsMerkleHash,proto3" json:"NetIdsMerkleHash,omitempty"`
	AddrCoins            [][]byte `protobuf:"bytes,7,rep,name=AddrCoins,proto3" json:"AddrCoins,omitempty"`
	AddrCoinsMerkleHash  []byte   `protobuf:"bytes,8,opt,name=AddrCoinsMerkleHash,proto3" json:"AddrCoinsMerkleHash,omitempty"`
	NameActionType       int32    `protobuf:"varint,9,opt,name=NameActionType,proto3" json:"NameActionType,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxMultsignName) Reset()         { *m = TxMultsignName{} }
func (m *TxMultsignName) String() string { return proto.CompactTextString(m) }
func (*TxMultsignName) ProtoMessage()    {}
func (*TxMultsignName) Descriptor() ([]byte, []int) {
	return fileDescriptor_54d9de7c7b611675, []int{3}
}
func (m *TxMultsignName) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxMultsignName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxMultsignName.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxMultsignName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxMultsignName.Merge(m, src)
}
func (m *TxMultsignName) XXX_Size() int {
	return m.Size()
}
func (m *TxMultsignName) XXX_DiscardUnknown() {
	xxx_messageInfo_TxMultsignName.DiscardUnknown(m)
}

var xxx_messageInfo_TxMultsignName proto.InternalMessageInfo

func (m *TxMultsignName) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxMultsignName) GetMultAddress() []byte {
	if m != nil {
		return m.MultAddress
	}
	return nil
}

func (m *TxMultsignName) GetMultVins() []*Vin {
	if m != nil {
		return m.MultVins
	}
	return nil
}

func (m *TxMultsignName) GetAccount() []byte {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *TxMultsignName) GetNetIds() [][]byte {
	if m != nil {
		return m.NetIds
	}
	return nil
}

func (m *TxMultsignName) GetNetIdsMerkleHash() []byte {
	if m != nil {
		return m.NetIdsMerkleHash
	}
	return nil
}

func (m *TxMultsignName) GetAddrCoins() [][]byte {
	if m != nil {
		return m.AddrCoins
	}
	return nil
}

func (m *TxMultsignName) GetAddrCoinsMerkleHash() []byte {
	if m != nil {
		return m.AddrCoinsMerkleHash
	}
	return nil
}

func (m *TxMultsignName) GetNameActionType() int32 {
	if m != nil {
		return m.NameActionType
	}
	return 0
}

func init() {
	proto.RegisterType((*MultsignSet)(nil), "go_protos.MultsignSet")
	proto.RegisterType((*TxMultsignAddr)(nil), "go_protos.TxMultsignAddr")
	proto.RegisterType((*TxMultsignPay)(nil), "go_protos.TxMultsignPay")
	proto.RegisterType((*TxMultsignName)(nil), "go_protos.TxMultsignName")
}

func init() { proto.RegisterFile("tx_multsign.proto", fileDescriptor_54d9de7c7b611675) }

var fileDescriptor_54d9de7c7b611675 = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xa9, 0x88, 0xcf,
	0x2d, 0xcd, 0x29, 0x29, 0xce, 0x4c, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c,
	0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b, 0x53, 0x21, 0x12, 0x4a,
	0x85, 0x5c, 0xdc, 0xbe, 0x50, 0xa5, 0xc1, 0xa9, 0x25, 0x42, 0x0a, 0x10, 0xae, 0x63, 0x4a, 0x4a,
	0x51, 0x6a, 0x71, 0xb1, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0xb2, 0x90, 0x90, 0x10, 0x17,
	0x4b, 0x40, 0x69, 0x76, 0xb1, 0x04, 0x93, 0x02, 0xb3, 0x06, 0x4f, 0x10, 0x98, 0x2d, 0x24, 0xc1,
	0xc5, 0x1e, 0x94, 0x98, 0x97, 0xe2, 0x57, 0x9a, 0x2b, 0xc1, 0x0c, 0xd6, 0x01, 0xe3, 0x82, 0x54,
	0xfb, 0x25, 0xe6, 0xa6, 0x4a, 0xb0, 0x80, 0x85, 0xc1, 0x6c, 0xa5, 0xc5, 0x8c, 0x5c, 0x7c, 0x21,
	0x15, 0x30, 0x5b, 0x41, 0xe6, 0x0a, 0x69, 0x72, 0xb1, 0x85, 0x54, 0x38, 0x25, 0x16, 0xa7, 0x82,
	0x6d, 0xe4, 0x36, 0x12, 0xd4, 0x83, 0xbb, 0x57, 0x0f, 0x22, 0x11, 0x04, 0x55, 0x80, 0xee, 0x42,
	0x26, 0x4c, 0x17, 0xe2, 0x76, 0x8d, 0x16, 0x17, 0x07, 0x48, 0x61, 0x58, 0x66, 0x5e, 0xb1, 0x04,
	0x8b, 0x02, 0xb3, 0x06, 0xb7, 0x11, 0x1f, 0x92, 0x45, 0x61, 0x99, 0x79, 0x41, 0x70, 0x79, 0xa5,
	0x0e, 0x46, 0x2e, 0x5e, 0x84, 0x2b, 0x03, 0x12, 0x2b, 0xa9, 0xeb, 0x48, 0x64, 0xa7, 0x30, 0x13,
	0x70, 0xca, 0x7d, 0x26, 0xe4, 0x00, 0x03, 0x85, 0xe1, 0x80, 0xb9, 0x05, 0x14, 0xb8, 0x8e, 0xc9,
	0xc9, 0xf9, 0xa5, 0x79, 0x25, 0xd0, 0x38, 0x85, 0x71, 0x85, 0xc4, 0xb8, 0xd8, 0xfc, 0x52, 0x4b,
	0x3c, 0x53, 0x8a, 0x25, 0x58, 0xc1, 0x49, 0x03, 0xca, 0x13, 0xd2, 0xe2, 0x12, 0x80, 0xb0, 0x7c,
	0x53, 0x8b, 0xb2, 0x73, 0x52, 0x3d, 0x12, 0x8b, 0x33, 0x24, 0xd8, 0xc0, 0x5a, 0x31, 0xc4, 0x85,
	0x64, 0xb8, 0x38, 0x41, 0x8e, 0x72, 0xce, 0x07, 0x39, 0x85, 0x1d, 0x6c, 0x0c, 0x42, 0x40, 0xc8,
	0x80, 0x4b, 0x18, 0xce, 0x41, 0x32, 0x8c, 0x03, 0x6c, 0x18, 0x36, 0x29, 0x21, 0x35, 0x2e, 0x3e,
	0x50, 0x70, 0x39, 0x26, 0x97, 0x64, 0xe6, 0xe7, 0x85, 0x54, 0x16, 0xa4, 0x4a, 0x70, 0x2a, 0x30,
	0x6a, 0xb0, 0x06, 0xa1, 0x89, 0x3a, 0xc9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xeb, 0xe9, 0xc3, 0x83, 0x20, 0x89,
	0x0d, 0x4c, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x98, 0x5f, 0x2d, 0x40, 0x59, 0x03, 0x00,
	0x00,
}

func (m *MultsignSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultsignSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultsignSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RandNum) > 0 {
		i -= len(m.RandNum)
		copy(dAtA[i:], m.RandNum)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.RandNum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Puks) > 0 {
		for iNdEx := len(m.Puks) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Puks[iNdEx])
			copy(dAtA[i:], m.Puks[iNdEx])
			i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.Puks[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MultAddress) > 0 {
		i -= len(m.MultAddress)
		copy(dAtA[i:], m.MultAddress)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.MultAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxMultsignAddr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMultsignAddr) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxMultsignAddr) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MultVins) > 0 {
		for iNdEx := len(m.MultVins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultVins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxMultsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RandNum) > 0 {
		i -= len(m.RandNum)
		copy(dAtA[i:], m.RandNum)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.RandNum)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.MultAddress) > 0 {
		i -= len(m.MultAddress)
		copy(dAtA[i:], m.MultAddress)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.MultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxMultsign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxMultsignPay) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMultsignPay) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxMultsignPay) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MultVins) > 0 {
		for iNdEx := len(m.MultVins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultVins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxMultsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MultAddress) > 0 {
		i -= len(m.MultAddress)
		copy(dAtA[i:], m.MultAddress)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.MultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxMultsign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxMultsignName) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxMultsignName) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxMultsignName) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.NameActionType != 0 {
		i = encodeVarintTxMultsign(dAtA, i, uint64(m.NameActionType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.AddrCoinsMerkleHash) > 0 {
		i -= len(m.AddrCoinsMerkleHash)
		copy(dAtA[i:], m.AddrCoinsMerkleHash)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.AddrCoinsMerkleHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AddrCoins) > 0 {
		for iNdEx := len(m.AddrCoins) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AddrCoins[iNdEx])
			copy(dAtA[i:], m.AddrCoins[iNdEx])
			i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.AddrCoins[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.NetIdsMerkleHash) > 0 {
		i -= len(m.NetIdsMerkleHash)
		copy(dAtA[i:], m.NetIdsMerkleHash)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.NetIdsMerkleHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NetIds) > 0 {
		for iNdEx := len(m.NetIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.NetIds[iNdEx])
			copy(dAtA[i:], m.NetIds[iNdEx])
			i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.NetIds[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Account) > 0 {
		i -= len(m.Account)
		copy(dAtA[i:], m.Account)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.Account)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.MultVins) > 0 {
		for iNdEx := len(m.MultVins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.MultVins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxMultsign(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.MultAddress) > 0 {
		i -= len(m.MultAddress)
		copy(dAtA[i:], m.MultAddress)
		i = encodeVarintTxMultsign(dAtA, i, uint64(len(m.MultAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxMultsign(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxMultsign(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxMultsign(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultsignSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MultAddress)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.Puks) > 0 {
		for _, b := range m.Puks {
			l = len(b)
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	l = len(m.RandNum)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxMultsignAddr) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	l = len(m.MultAddress)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	l = len(m.RandNum)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.MultVins) > 0 {
		for _, e := range m.MultVins {
			l = e.Size()
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxMultsignPay) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	l = len(m.MultAddress)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.MultVins) > 0 {
		for _, e := range m.MultVins {
			l = e.Size()
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxMultsignName) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	l = len(m.MultAddress)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.MultVins) > 0 {
		for _, e := range m.MultVins {
			l = e.Size()
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	l = len(m.Account)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.NetIds) > 0 {
		for _, b := range m.NetIds {
			l = len(b)
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	l = len(m.NetIdsMerkleHash)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if len(m.AddrCoins) > 0 {
		for _, b := range m.AddrCoins {
			l = len(b)
			n += 1 + l + sovTxMultsign(uint64(l))
		}
	}
	l = len(m.AddrCoinsMerkleHash)
	if l > 0 {
		n += 1 + l + sovTxMultsign(uint64(l))
	}
	if m.NameActionType != 0 {
		n += 1 + sovTxMultsign(uint64(m.NameActionType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxMultsign(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxMultsign(x uint64) (n int) {
	return sovTxMultsign(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultsignSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxMultsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultsignSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultsignSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultAddress = append(m.MultAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.MultAddress == nil {
				m.MultAddress = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Puks", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Puks = append(m.Puks, make([]byte, postIndex-iNdEx))
			copy(m.Puks[len(m.Puks)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandNum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandNum = append(m.RandNum[:0], dAtA[iNdEx:postIndex]...)
			if m.RandNum == nil {
				m.RandNum = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name[:0], dAtA[iNdEx:postIndex]...)
			if m.Name == nil {
				m.Name = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxMultsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxMultsignAddr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxMultsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMultsignAddr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMultsignAddr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultAddress = append(m.MultAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.MultAddress == nil {
				m.MultAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandNum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandNum = append(m.RandNum[:0], dAtA[iNdEx:postIndex]...)
			if m.RandNum == nil {
				m.RandNum = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultVins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultVins = append(m.MultVins, &Vin{})
			if err := m.MultVins[len(m.MultVins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxMultsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxMultsignPay) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxMultsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMultsignPay: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMultsignPay: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultAddress = append(m.MultAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.MultAddress == nil {
				m.MultAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultVins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultVins = append(m.MultVins, &Vin{})
			if err := m.MultVins[len(m.MultVins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxMultsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxMultsignName) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxMultsign
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxMultsignName: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxMultsignName: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultAddress = append(m.MultAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.MultAddress == nil {
				m.MultAddress = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MultVins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MultVins = append(m.MultVins, &Vin{})
			if err := m.MultVins[len(m.MultVins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Account = append(m.Account[:0], dAtA[iNdEx:postIndex]...)
			if m.Account == nil {
				m.Account = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetIds = append(m.NetIds, make([]byte, postIndex-iNdEx))
			copy(m.NetIds[len(m.NetIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NetIdsMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NetIdsMerkleHash = append(m.NetIdsMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.NetIdsMerkleHash == nil {
				m.NetIdsMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrCoins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrCoins = append(m.AddrCoins, make([]byte, postIndex-iNdEx))
			copy(m.AddrCoins[len(m.AddrCoins)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrCoinsMerkleHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxMultsign
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrCoinsMerkleHash = append(m.AddrCoinsMerkleHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrCoinsMerkleHash == nil {
				m.AddrCoinsMerkleHash = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NameActionType", wireType)
			}
			m.NameActionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NameActionType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxMultsign(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxMultsign
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxMultsign(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxMultsign
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxMultsign
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxMultsign
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxMultsign
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxMultsign
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxMultsign        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxMultsign          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxMultsign = fmt.Errorf("proto: unexpected end of group")
)
