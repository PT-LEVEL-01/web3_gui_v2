// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_contract.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxContract struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	Action               string   `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	GzipSource           []byte   `protobuf:"bytes,3,opt,name=GzipSource,proto3" json:"GzipSource,omitempty"`
	ContractClass        uint64   `protobuf:"varint,4,opt,name=ContractClass,proto3" json:"ContractClass,omitempty"`
	GasPrice             uint64   `protobuf:"varint,5,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	GzipAbi              []byte   `protobuf:"bytes,6,opt,name=GzipAbi,proto3" json:"GzipAbi,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxContract) Reset()         { *m = TxContract{} }
func (m *TxContract) String() string { return proto.CompactTextString(m) }
func (*TxContract) ProtoMessage()    {}
func (*TxContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_b73780162e7399d0, []int{0}
}
func (m *TxContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxContract.Merge(m, src)
}
func (m *TxContract) XXX_Size() int {
	return m.Size()
}
func (m *TxContract) XXX_DiscardUnknown() {
	xxx_messageInfo_TxContract.DiscardUnknown(m)
}

var xxx_messageInfo_TxContract proto.InternalMessageInfo

func (m *TxContract) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxContract) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *TxContract) GetGzipSource() []byte {
	if m != nil {
		return m.GzipSource
	}
	return nil
}

func (m *TxContract) GetContractClass() uint64 {
	if m != nil {
		return m.ContractClass
	}
	return 0
}

func (m *TxContract) GetGasPrice() uint64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TxContract) GetGzipAbi() []byte {
	if m != nil {
		return m.GzipAbi
	}
	return nil
}

func init() {
	proto.RegisterType((*TxContract)(nil), "go_protos.TxContract")
}

func init() { proto.RegisterFile("tx_contract.proto", fileDescriptor_b73780162e7399d0) }

var fileDescriptor_b73780162e7399d0 = []byte{
	// 222 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xa9, 0x88, 0x4f,
	0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c,
	0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b, 0x53, 0x21, 0x12, 0x4a,
	0xa7, 0x19, 0xb9, 0xb8, 0x42, 0x2a, 0x9c, 0xa1, 0xaa, 0x85, 0x34, 0xb9, 0xd8, 0x42, 0x2a, 0x9c,
	0x12, 0x8b, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d, 0x04, 0xf5, 0xe0, 0x1a, 0xf5, 0x20,
	0x12, 0x41, 0x50, 0x05, 0x42, 0x62, 0x5c, 0x6c, 0x8e, 0xc9, 0x25, 0x99, 0xf9, 0x79, 0x12, 0x4c,
	0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x50, 0x9e, 0x90, 0x1c, 0x17, 0x97, 0x7b, 0x55, 0x66, 0x41, 0x70,
	0x7e, 0x69, 0x51, 0x72, 0xaa, 0x04, 0xb3, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x92, 0x88, 0x90, 0x0a,
	0x17, 0x2f, 0xcc, 0x3a, 0xe7, 0x9c, 0xc4, 0xe2, 0x62, 0x09, 0x16, 0x05, 0x46, 0x0d, 0x96, 0x20,
	0x54, 0x41, 0x21, 0x29, 0x2e, 0x0e, 0xf7, 0xc4, 0xe2, 0x80, 0xa2, 0xcc, 0xe4, 0x54, 0x09, 0x56,
	0xb0, 0x02, 0x38, 0x5f, 0x48, 0x82, 0x8b, 0x1d, 0x64, 0x9e, 0x63, 0x52, 0xa6, 0x04, 0x1b, 0xd8,
	0x78, 0x18, 0xd7, 0x49, 0xf6, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92,
	0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x5b, 0x4f, 0x1f, 0xee, 0x83, 0x24, 0x36, 0x30, 0x6d,
	0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x08, 0x4b, 0x4e, 0x21, 0x01, 0x00, 0x00,
}

func (m *TxContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.GzipAbi) > 0 {
		i -= len(m.GzipAbi)
		copy(dAtA[i:], m.GzipAbi)
		i = encodeVarintTxContract(dAtA, i, uint64(len(m.GzipAbi)))
		i--
		dAtA[i] = 0x32
	}
	if m.GasPrice != 0 {
		i = encodeVarintTxContract(dAtA, i, uint64(m.GasPrice))
		i--
		dAtA[i] = 0x28
	}
	if m.ContractClass != 0 {
		i = encodeVarintTxContract(dAtA, i, uint64(m.ContractClass))
		i--
		dAtA[i] = 0x20
	}
	if len(m.GzipSource) > 0 {
		i -= len(m.GzipSource)
		copy(dAtA[i:], m.GzipSource)
		i = encodeVarintTxContract(dAtA, i, uint64(len(m.GzipSource)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintTxContract(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxContract(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxContract(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxContract(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxContract(uint64(l))
	}
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovTxContract(uint64(l))
	}
	l = len(m.GzipSource)
	if l > 0 {
		n += 1 + l + sovTxContract(uint64(l))
	}
	if m.ContractClass != 0 {
		n += 1 + sovTxContract(uint64(m.ContractClass))
	}
	if m.GasPrice != 0 {
		n += 1 + sovTxContract(uint64(m.GasPrice))
	}
	l = len(m.GzipAbi)
	if l > 0 {
		n += 1 + l + sovTxContract(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxContract(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxContract(x uint64) (n int) {
	return sovTxContract(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxContract
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxContract
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxContract
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GzipSource", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxContract
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GzipSource = append(m.GzipSource[:0], dAtA[iNdEx:postIndex]...)
			if m.GzipSource == nil {
				m.GzipSource = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractClass", wireType)
			}
			m.ContractClass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractClass |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			m.GasPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GzipAbi", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxContract
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxContract
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GzipAbi = append(m.GzipAbi[:0], dAtA[iNdEx:postIndex]...)
			if m.GzipAbi == nil {
				m.GzipAbi = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxContract(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxContract
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxContract(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxContract
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxContract
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxContract
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxContract
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxContract
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxContract        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxContract          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxContract = fmt.Errorf("proto: unexpected end of group")
)
