// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_reward.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxReward struct {
	TxBase *TxBase `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	//	uint64 Index = 2; //前index见证人数量
	AllReward            uint64   `protobuf:"varint,2,opt,name=AllReward,proto3" json:"AllReward,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxReward) Reset()         { *m = TxReward{} }
func (m *TxReward) String() string { return proto.CompactTextString(m) }
func (*TxReward) ProtoMessage()    {}
func (*TxReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_6237606903460869, []int{0}
}
func (m *TxReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxReward.Merge(m, src)
}
func (m *TxReward) XXX_Size() int {
	return m.Size()
}
func (m *TxReward) XXX_DiscardUnknown() {
	xxx_messageInfo_TxReward.DiscardUnknown(m)
}

var xxx_messageInfo_TxReward proto.InternalMessageInfo

func (m *TxReward) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxReward) GetAllReward() uint64 {
	if m != nil {
		return m.AllReward
	}
	return 0
}

// 内存模式交易事件
// 自定义的交易事件
type CustomTxEvents struct {
	TxId                 []byte           `protobuf:"bytes,1,opt,name=TxId,proto3" json:"TxId,omitempty"`
	CustomTxEvents       []*CustomTxEvent `protobuf:"bytes,2,rep,name=CustomTxEvents,proto3" json:"CustomTxEvents,omitempty"`
	RewardPools          []*CustomTxEvent `protobuf:"bytes,3,rep,name=RewardPools,proto3" json:"RewardPools,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CustomTxEvents) Reset()         { *m = CustomTxEvents{} }
func (m *CustomTxEvents) String() string { return proto.CompactTextString(m) }
func (*CustomTxEvents) ProtoMessage()    {}
func (*CustomTxEvents) Descriptor() ([]byte, []int) {
	return fileDescriptor_6237606903460869, []int{1}
}
func (m *CustomTxEvents) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomTxEvents) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomTxEvents.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomTxEvents) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomTxEvents.Merge(m, src)
}
func (m *CustomTxEvents) XXX_Size() int {
	return m.Size()
}
func (m *CustomTxEvents) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomTxEvents.DiscardUnknown(m)
}

var xxx_messageInfo_CustomTxEvents proto.InternalMessageInfo

func (m *CustomTxEvents) GetTxId() []byte {
	if m != nil {
		return m.TxId
	}
	return nil
}

func (m *CustomTxEvents) GetCustomTxEvents() []*CustomTxEvent {
	if m != nil {
		return m.CustomTxEvents
	}
	return nil
}

func (m *CustomTxEvents) GetRewardPools() []*CustomTxEvent {
	if m != nil {
		return m.RewardPools
	}
	return nil
}

// 自定义的交易事件
type CustomTxEvent struct {
	Addr                 string   `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	Value                uint64   `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Type                 int32    `protobuf:"varint,3,opt,name=Type,proto3" json:"Type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CustomTxEvent) Reset()         { *m = CustomTxEvent{} }
func (m *CustomTxEvent) String() string { return proto.CompactTextString(m) }
func (*CustomTxEvent) ProtoMessage()    {}
func (*CustomTxEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_6237606903460869, []int{2}
}
func (m *CustomTxEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CustomTxEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CustomTxEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CustomTxEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CustomTxEvent.Merge(m, src)
}
func (m *CustomTxEvent) XXX_Size() int {
	return m.Size()
}
func (m *CustomTxEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_CustomTxEvent.DiscardUnknown(m)
}

var xxx_messageInfo_CustomTxEvent proto.InternalMessageInfo

func (m *CustomTxEvent) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *CustomTxEvent) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *CustomTxEvent) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func init() {
	proto.RegisterType((*TxReward)(nil), "go_protos.TxReward")
	proto.RegisterType((*CustomTxEvents)(nil), "go_protos.CustomTxEvents")
	proto.RegisterType((*CustomTxEvent)(nil), "go_protos.CustomTxEvent")
}

func init() { proto.RegisterFile("tx_reward.proto", fileDescriptor_6237606903460869) }

var fileDescriptor_6237606903460869 = []byte{
	// 257 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2f, 0xa9, 0x88, 0x2f,
	0x4a, 0x2d, 0x4f, 0x2c, 0x4a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f,
	0x07, 0xb3, 0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b, 0x53, 0x21, 0x12, 0x4a, 0xc1, 0x5c,
	0x1c, 0x21, 0x15, 0x41, 0x60, 0xa5, 0x42, 0x9a, 0x5c, 0x6c, 0x21, 0x15, 0x4e, 0x89, 0xc5, 0xa9,
	0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x82, 0x7a, 0x70, 0x5d, 0x7a, 0x10, 0x89, 0x20, 0xa8,
	0x02, 0x21, 0x19, 0x2e, 0x4e, 0xc7, 0x9c, 0x1c, 0x88, 0x3e, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96,
	0x20, 0x84, 0x80, 0xd2, 0x22, 0x46, 0x2e, 0x3e, 0xe7, 0xd2, 0xe2, 0x92, 0xfc, 0xdc, 0x90, 0x0a,
	0xd7, 0xb2, 0xd4, 0xbc, 0x92, 0x62, 0x21, 0x21, 0x2e, 0x96, 0x90, 0x0a, 0xcf, 0x14, 0xb0, 0xc9,
	0x3c, 0x41, 0x60, 0xb6, 0x90, 0x03, 0xba, 0x2a, 0x09, 0x26, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x09,
	0x24, 0x7b, 0x51, 0x14, 0x04, 0xa1, 0x9b, 0x6a, 0xc5, 0xc5, 0x0d, 0xb1, 0x32, 0x20, 0x3f, 0x3f,
	0xa7, 0x58, 0x82, 0x99, 0x80, 0x76, 0x64, 0xc5, 0x4a, 0xbe, 0x5c, 0xbc, 0x28, 0xb2, 0x20, 0x27,
	0x3a, 0xa6, 0xa4, 0x14, 0x81, 0x9d, 0xc8, 0x19, 0x04, 0x66, 0x0b, 0x89, 0x70, 0xb1, 0x86, 0x25,
	0xe6, 0x94, 0xa6, 0x42, 0xfd, 0x08, 0xe1, 0x80, 0x3d, 0x53, 0x59, 0x90, 0x2a, 0xc1, 0xac, 0xc0,
	0xa8, 0xc1, 0x1a, 0x04, 0x66, 0x3b, 0xc9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xeb, 0xe9, 0xc3, 0x1d, 0x92, 0xc4,
	0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0x7f, 0x83, 0x21, 0x9a, 0x01, 0x00,
	0x00,
}

func (m *TxReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.AllReward != 0 {
		i = encodeVarintTxReward(dAtA, i, uint64(m.AllReward))
		i--
		dAtA[i] = 0x10
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxReward(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomTxEvents) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomTxEvents) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomTxEvents) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.RewardPools) > 0 {
		for iNdEx := len(m.RewardPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.CustomTxEvents) > 0 {
		for iNdEx := len(m.CustomTxEvents) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CustomTxEvents[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxReward(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TxId) > 0 {
		i -= len(m.TxId)
		copy(dAtA[i:], m.TxId)
		i = encodeVarintTxReward(dAtA, i, uint64(len(m.TxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CustomTxEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CustomTxEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CustomTxEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Type != 0 {
		i = encodeVarintTxReward(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintTxReward(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Addr) > 0 {
		i -= len(m.Addr)
		copy(dAtA[i:], m.Addr)
		i = encodeVarintTxReward(dAtA, i, uint64(len(m.Addr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxReward(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxReward(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxReward(uint64(l))
	}
	if m.AllReward != 0 {
		n += 1 + sovTxReward(uint64(m.AllReward))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomTxEvents) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovTxReward(uint64(l))
	}
	if len(m.CustomTxEvents) > 0 {
		for _, e := range m.CustomTxEvents {
			l = e.Size()
			n += 1 + l + sovTxReward(uint64(l))
		}
	}
	if len(m.RewardPools) > 0 {
		for _, e := range m.RewardPools {
			l = e.Size()
			n += 1 + l + sovTxReward(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CustomTxEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Addr)
	if l > 0 {
		n += 1 + l + sovTxReward(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovTxReward(uint64(m.Value))
	}
	if m.Type != 0 {
		n += 1 + sovTxReward(uint64(m.Type))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxReward(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxReward(x uint64) (n int) {
	return sovTxReward(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllReward", wireType)
			}
			m.AllReward = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AllReward |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomTxEvents) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomTxEvents: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomTxEvents: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxReward
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = append(m.TxId[:0], dAtA[iNdEx:postIndex]...)
			if m.TxId == nil {
				m.TxId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CustomTxEvents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CustomTxEvents = append(m.CustomTxEvents, &CustomTxEvent{})
			if err := m.CustomTxEvents[len(m.CustomTxEvents)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxReward
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardPools = append(m.RewardPools, &CustomTxEvent{})
			if err := m.RewardPools[len(m.RewardPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CustomTxEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxReward
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CustomTxEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CustomTxEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxReward
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxReward
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxReward(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxReward
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxReward(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxReward
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxReward
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxReward
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxReward
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxReward
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxReward        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxReward          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxReward = fmt.Errorf("proto: unexpected end of group")
)
