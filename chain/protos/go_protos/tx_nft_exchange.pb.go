// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_nft_exchange.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxNFTExchange struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	NFT_ID_Sponsor       []byte   `protobuf:"bytes,2,opt,name=NFT_ID_Sponsor,json=NFTIDSponsor,proto3" json:"NFT_ID_Sponsor,omitempty"`
	NFT_ID_Recipient     []byte   `protobuf:"bytes,3,opt,name=NFT_ID_Recipient,json=NFTIDRecipient,proto3" json:"NFT_ID_Recipient,omitempty"`
	NFT_RecipientAddr    []byte   `protobuf:"bytes,4,opt,name=NFT_Recipient_addr,json=NFTRecipientAddr,proto3" json:"NFT_Recipient_addr,omitempty"`
	NFT_RecipientPuk     []byte   `protobuf:"bytes,5,opt,name=NFT_Recipient_puk,json=NFTRecipientPuk,proto3" json:"NFT_Recipient_puk,omitempty"`
	NFT_RecipientSign    []byte   `protobuf:"bytes,6,opt,name=NFT_Recipient_sign,json=NFTRecipientSign,proto3" json:"NFT_Recipient_sign,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxNFTExchange) Reset()         { *m = TxNFTExchange{} }
func (m *TxNFTExchange) String() string { return proto.CompactTextString(m) }
func (*TxNFTExchange) ProtoMessage()    {}
func (*TxNFTExchange) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad5ab10fa5aa1024, []int{0}
}
func (m *TxNFTExchange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxNFTExchange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxNFTExchange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxNFTExchange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxNFTExchange.Merge(m, src)
}
func (m *TxNFTExchange) XXX_Size() int {
	return m.Size()
}
func (m *TxNFTExchange) XXX_DiscardUnknown() {
	xxx_messageInfo_TxNFTExchange.DiscardUnknown(m)
}

var xxx_messageInfo_TxNFTExchange proto.InternalMessageInfo

func (m *TxNFTExchange) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxNFTExchange) GetNFT_ID_Sponsor() []byte {
	if m != nil {
		return m.NFT_ID_Sponsor
	}
	return nil
}

func (m *TxNFTExchange) GetNFT_ID_Recipient() []byte {
	if m != nil {
		return m.NFT_ID_Recipient
	}
	return nil
}

func (m *TxNFTExchange) GetNFT_RecipientAddr() []byte {
	if m != nil {
		return m.NFT_RecipientAddr
	}
	return nil
}

func (m *TxNFTExchange) GetNFT_RecipientPuk() []byte {
	if m != nil {
		return m.NFT_RecipientPuk
	}
	return nil
}

func (m *TxNFTExchange) GetNFT_RecipientSign() []byte {
	if m != nil {
		return m.NFT_RecipientSign
	}
	return nil
}

func init() {
	proto.RegisterType((*TxNFTExchange)(nil), "go_protos.TxNFTExchange")
}

func init() { proto.RegisterFile("tx_nft_exchange.proto", fileDescriptor_ad5ab10fa5aa1024) }

var fileDescriptor_ad5ab10fa5aa1024 = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xa9, 0x88, 0xcf,
	0x4b, 0x2b, 0x89, 0x4f, 0xad, 0x48, 0xce, 0x48, 0xcc, 0x4b, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b,
	0xa1, 0x12, 0x4a, 0x93, 0x98, 0xb8, 0x78, 0x43, 0x2a, 0xfc, 0xdc, 0x42, 0x5c, 0xa1, 0x1a, 0x84,
	0x34, 0xb9, 0xd8, 0x42, 0x2a, 0x9c, 0x12, 0x8b, 0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0xb8, 0x8d,
	0x04, 0xf5, 0xe0, 0x7a, 0xf5, 0x20, 0x12, 0x41, 0x50, 0x05, 0x42, 0x2a, 0x5c, 0x7c, 0x7e, 0x6e,
	0x21, 0xf1, 0x9e, 0x2e, 0xf1, 0xc1, 0x05, 0xf9, 0x79, 0xc5, 0xf9, 0x45, 0x12, 0x4c, 0x0a, 0x8c,
	0x1a, 0x3c, 0x41, 0x3c, 0x7e, 0x6e, 0x21, 0x9e, 0x2e, 0x50, 0x31, 0x21, 0x0d, 0x2e, 0x01, 0xa8,
	0xaa, 0xa0, 0xd4, 0xe4, 0xcc, 0x82, 0xcc, 0xd4, 0xbc, 0x12, 0x09, 0x66, 0xb0, 0x3a, 0x3e, 0xb0,
	0x3a, 0xb8, 0xa8, 0x90, 0x0e, 0x97, 0x10, 0x48, 0x25, 0x5c, 0x20, 0x3e, 0x31, 0x25, 0xa5, 0x48,
	0x82, 0x05, 0xac, 0x16, 0x64, 0x06, 0x5c, 0xc2, 0x31, 0x25, 0xa5, 0x48, 0x48, 0x8b, 0x4b, 0x10,
	0x55, 0x75, 0x41, 0x69, 0xb6, 0x04, 0x2b, 0x58, 0x31, 0x3f, 0xb2, 0xe2, 0x80, 0xd2, 0x6c, 0x4c,
	0x93, 0x8b, 0x33, 0xd3, 0xf3, 0x24, 0xd8, 0x30, 0x4d, 0x0e, 0xce, 0x4c, 0xcf, 0x73, 0x92, 0x3d,
	0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63,
	0x88, 0xe2, 0xd6, 0xd3, 0x87, 0x87, 0x42, 0x12, 0x1b, 0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff,
	0xff, 0xaa, 0x25, 0xfa, 0x7f, 0x6c, 0x01, 0x00, 0x00,
}

func (m *TxNFTExchange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxNFTExchange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxNFTExchange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.NFT_RecipientSign) > 0 {
		i -= len(m.NFT_RecipientSign)
		copy(dAtA[i:], m.NFT_RecipientSign)
		i = encodeVarintTxNftExchange(dAtA, i, uint64(len(m.NFT_RecipientSign)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NFT_RecipientPuk) > 0 {
		i -= len(m.NFT_RecipientPuk)
		copy(dAtA[i:], m.NFT_RecipientPuk)
		i = encodeVarintTxNftExchange(dAtA, i, uint64(len(m.NFT_RecipientPuk)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NFT_RecipientAddr) > 0 {
		i -= len(m.NFT_RecipientAddr)
		copy(dAtA[i:], m.NFT_RecipientAddr)
		i = encodeVarintTxNftExchange(dAtA, i, uint64(len(m.NFT_RecipientAddr)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.NFT_ID_Recipient) > 0 {
		i -= len(m.NFT_ID_Recipient)
		copy(dAtA[i:], m.NFT_ID_Recipient)
		i = encodeVarintTxNftExchange(dAtA, i, uint64(len(m.NFT_ID_Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NFT_ID_Sponsor) > 0 {
		i -= len(m.NFT_ID_Sponsor)
		copy(dAtA[i:], m.NFT_ID_Sponsor)
		i = encodeVarintTxNftExchange(dAtA, i, uint64(len(m.NFT_ID_Sponsor)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxNftExchange(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxNftExchange(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxNftExchange(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxNFTExchange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	l = len(m.NFT_ID_Sponsor)
	if l > 0 {
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	l = len(m.NFT_ID_Recipient)
	if l > 0 {
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	l = len(m.NFT_RecipientAddr)
	if l > 0 {
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	l = len(m.NFT_RecipientPuk)
	if l > 0 {
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	l = len(m.NFT_RecipientSign)
	if l > 0 {
		n += 1 + l + sovTxNftExchange(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxNftExchange(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxNftExchange(x uint64) (n int) {
	return sovTxNftExchange(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxNFTExchange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxNftExchange
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxNFTExchange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxNFTExchange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT_ID_Sponsor", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT_ID_Sponsor = append(m.NFT_ID_Sponsor[:0], dAtA[iNdEx:postIndex]...)
			if m.NFT_ID_Sponsor == nil {
				m.NFT_ID_Sponsor = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT_ID_Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT_ID_Recipient = append(m.NFT_ID_Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.NFT_ID_Recipient == nil {
				m.NFT_ID_Recipient = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT_RecipientAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT_RecipientAddr = append(m.NFT_RecipientAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.NFT_RecipientAddr == nil {
				m.NFT_RecipientAddr = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT_RecipientPuk", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT_RecipientPuk = append(m.NFT_RecipientPuk[:0], dAtA[iNdEx:postIndex]...)
			if m.NFT_RecipientPuk == nil {
				m.NFT_RecipientPuk = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NFT_RecipientSign", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NFT_RecipientSign = append(m.NFT_RecipientSign[:0], dAtA[iNdEx:postIndex]...)
			if m.NFT_RecipientSign == nil {
				m.NFT_RecipientSign = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxNftExchange(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxNftExchange
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxNftExchange(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxNftExchange
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxNftExchange
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxNftExchange
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxNftExchange
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxNftExchange
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxNftExchange        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxNftExchange          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxNftExchange = fmt.Errorf("proto: unexpected end of group")
)
