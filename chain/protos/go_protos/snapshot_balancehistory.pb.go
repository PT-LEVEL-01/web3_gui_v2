// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: snapshot_balancehistory.proto

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SnapshotBalanceHistory struct {
	GenerateMaxId           []byte            `protobuf:"bytes,1,opt,name=GenerateMaxId,proto3" json:"GenerateMaxId,omitempty"`
	GenerateMaxIdForAccount map[string]uint64 `protobuf:"bytes,2,rep,name=GenerateMaxIdForAccount,proto3" json:"GenerateMaxIdForAccount,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ForkNo                  uint64            `protobuf:"varint,3,opt,name=ForkNo,proto3" json:"ForkNo,omitempty"`
	XXX_NoUnkeyedLiteral    struct{}          `json:"-"`
	XXX_unrecognized        []byte            `json:"-"`
	XXX_sizecache           int32             `json:"-"`
}

func (m *SnapshotBalanceHistory) Reset()         { *m = SnapshotBalanceHistory{} }
func (m *SnapshotBalanceHistory) String() string { return proto.CompactTextString(m) }
func (*SnapshotBalanceHistory) ProtoMessage()    {}
func (*SnapshotBalanceHistory) Descriptor() ([]byte, []int) {
	return fileDescriptor_808e68fb14955d8a, []int{0}
}
func (m *SnapshotBalanceHistory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SnapshotBalanceHistory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SnapshotBalanceHistory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SnapshotBalanceHistory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SnapshotBalanceHistory.Merge(m, src)
}
func (m *SnapshotBalanceHistory) XXX_Size() int {
	return m.Size()
}
func (m *SnapshotBalanceHistory) XXX_DiscardUnknown() {
	xxx_messageInfo_SnapshotBalanceHistory.DiscardUnknown(m)
}

var xxx_messageInfo_SnapshotBalanceHistory proto.InternalMessageInfo

func (m *SnapshotBalanceHistory) GetGenerateMaxId() []byte {
	if m != nil {
		return m.GenerateMaxId
	}
	return nil
}

func (m *SnapshotBalanceHistory) GetGenerateMaxIdForAccount() map[string]uint64 {
	if m != nil {
		return m.GenerateMaxIdForAccount
	}
	return nil
}

func (m *SnapshotBalanceHistory) GetForkNo() uint64 {
	if m != nil {
		return m.ForkNo
	}
	return 0
}

func init() {
	proto.RegisterType((*SnapshotBalanceHistory)(nil), "go_protos.SnapshotBalanceHistory")
	proto.RegisterMapType((map[string]uint64)(nil), "go_protos.SnapshotBalanceHistory.GenerateMaxIdForAccountEntry")
}

func init() { proto.RegisterFile("snapshot_balancehistory.proto", fileDescriptor_808e68fb14955d8a) }

var fileDescriptor_808e68fb14955d8a = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x2d, 0xce, 0x4b, 0x2c,
	0x28, 0xce, 0xc8, 0x2f, 0x89, 0x4f, 0x4a, 0xcc, 0x49, 0xcc, 0x4b, 0x4e, 0xcd, 0xc8, 0x2c, 0x2e,
	0xc9, 0x2f, 0xaa, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3,
	0x8a, 0x95, 0xe6, 0x30, 0x71, 0x89, 0x05, 0x43, 0x15, 0x3b, 0x41, 0xd4, 0x7a, 0x40, 0xd4, 0x0a,
	0xa9, 0x70, 0xf1, 0xba, 0xa7, 0xe6, 0xa5, 0x16, 0x25, 0x96, 0xa4, 0xfa, 0x26, 0x56, 0x78, 0xa6,
	0x48, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x04, 0xa1, 0x0a, 0x0a, 0x55, 0x70, 0x89, 0xa3, 0x08, 0xb8,
	0xe5, 0x17, 0x39, 0x26, 0x27, 0xe7, 0x97, 0xe6, 0x95, 0x48, 0x30, 0x29, 0x30, 0x6b, 0x70, 0x1b,
	0xd9, 0xe9, 0xc1, 0x6d, 0xd3, 0xc3, 0x6e, 0x93, 0x1e, 0x0e, 0x03, 0x5c, 0xf3, 0x4a, 0x8a, 0x2a,
	0x83, 0x70, 0x19, 0x2f, 0x24, 0xc6, 0xc5, 0xe6, 0x96, 0x5f, 0x94, 0xed, 0x97, 0x2f, 0xc1, 0xac,
	0xc0, 0xa8, 0xc1, 0x12, 0x04, 0xe5, 0x49, 0x79, 0x71, 0xc9, 0xe0, 0x33, 0x50, 0x48, 0x80, 0x8b,
	0x39, 0x3b, 0xb5, 0x12, 0xec, 0x1b, 0xce, 0x20, 0x10, 0x53, 0x48, 0x84, 0x8b, 0xb5, 0x2c, 0x31,
	0xa7, 0x34, 0x55, 0x82, 0x09, 0x6c, 0x10, 0x84, 0x63, 0xc5, 0x64, 0xc1, 0xe8, 0x24, 0x7b, 0xe2,
	0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0xce, 0x78, 0x2c, 0xc7, 0x10,
	0xc5, 0xad, 0xa7, 0x0f, 0xf7, 0x4f, 0x12, 0x1b, 0x98, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff,
	0x28, 0x1d, 0xc2, 0x1f, 0x70, 0x01, 0x00, 0x00,
}

func (m *SnapshotBalanceHistory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SnapshotBalanceHistory) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SnapshotBalanceHistory) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ForkNo != 0 {
		i = encodeVarintSnapshotBalancehistory(dAtA, i, uint64(m.ForkNo))
		i--
		dAtA[i] = 0x18
	}
	if len(m.GenerateMaxIdForAccount) > 0 {
		for k := range m.GenerateMaxIdForAccount {
			v := m.GenerateMaxIdForAccount[k]
			baseI := i
			i = encodeVarintSnapshotBalancehistory(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSnapshotBalancehistory(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSnapshotBalancehistory(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GenerateMaxId) > 0 {
		i -= len(m.GenerateMaxId)
		copy(dAtA[i:], m.GenerateMaxId)
		i = encodeVarintSnapshotBalancehistory(dAtA, i, uint64(len(m.GenerateMaxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSnapshotBalancehistory(dAtA []byte, offset int, v uint64) int {
	offset -= sovSnapshotBalancehistory(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SnapshotBalanceHistory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GenerateMaxId)
	if l > 0 {
		n += 1 + l + sovSnapshotBalancehistory(uint64(l))
	}
	if len(m.GenerateMaxIdForAccount) > 0 {
		for k, v := range m.GenerateMaxIdForAccount {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovSnapshotBalancehistory(uint64(len(k))) + 1 + sovSnapshotBalancehistory(uint64(v))
			n += mapEntrySize + 1 + sovSnapshotBalancehistory(uint64(mapEntrySize))
		}
	}
	if m.ForkNo != 0 {
		n += 1 + sovSnapshotBalancehistory(uint64(m.ForkNo))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovSnapshotBalancehistory(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSnapshotBalancehistory(x uint64) (n int) {
	return sovSnapshotBalancehistory(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SnapshotBalanceHistory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSnapshotBalancehistory
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SnapshotBalanceHistory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SnapshotBalanceHistory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateMaxId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotBalancehistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSnapshotBalancehistory
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotBalancehistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GenerateMaxId = append(m.GenerateMaxId[:0], dAtA[iNdEx:postIndex]...)
			if m.GenerateMaxId == nil {
				m.GenerateMaxId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GenerateMaxIdForAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotBalancehistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSnapshotBalancehistory
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSnapshotBalancehistory
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GenerateMaxIdForAccount == nil {
				m.GenerateMaxIdForAccount = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSnapshotBalancehistory
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSnapshotBalancehistory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSnapshotBalancehistory
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSnapshotBalancehistory
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSnapshotBalancehistory
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSnapshotBalancehistory(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSnapshotBalancehistory
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GenerateMaxIdForAccount[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForkNo", wireType)
			}
			m.ForkNo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSnapshotBalancehistory
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ForkNo |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSnapshotBalancehistory(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSnapshotBalancehistory
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSnapshotBalancehistory(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSnapshotBalancehistory
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshotBalancehistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSnapshotBalancehistory
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSnapshotBalancehistory
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSnapshotBalancehistory
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSnapshotBalancehistory
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSnapshotBalancehistory        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSnapshotBalancehistory          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSnapshotBalancehistory = fmt.Errorf("proto: unexpected end of group")
)
