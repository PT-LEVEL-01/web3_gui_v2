// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_address_bind.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxAddressBind struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	BindType             uint64   `protobuf:"varint,2,opt,name=BindType,proto3" json:"BindType,omitempty"`
	BindAddr             []byte   `protobuf:"bytes,3,opt,name=BindAddr,proto3" json:"BindAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxAddressBind) Reset()         { *m = TxAddressBind{} }
func (m *TxAddressBind) String() string { return proto.CompactTextString(m) }
func (*TxAddressBind) ProtoMessage()    {}
func (*TxAddressBind) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc7b60eb79fd51, []int{0}
}
func (m *TxAddressBind) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxAddressBind) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxAddressBind.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxAddressBind) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxAddressBind.Merge(m, src)
}
func (m *TxAddressBind) XXX_Size() int {
	return m.Size()
}
func (m *TxAddressBind) XXX_DiscardUnknown() {
	xxx_messageInfo_TxAddressBind.DiscardUnknown(m)
}

var xxx_messageInfo_TxAddressBind proto.InternalMessageInfo

func (m *TxAddressBind) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxAddressBind) GetBindType() uint64 {
	if m != nil {
		return m.BindType
	}
	return 0
}

func (m *TxAddressBind) GetBindAddr() []byte {
	if m != nil {
		return m.BindAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*TxAddressBind)(nil), "go_protos.TxAddressBind")
}

func init() { proto.RegisterFile("tx_address_bind.proto", fileDescriptor_eefc7b60eb79fd51) }

var fileDescriptor_eefc7b60eb79fd51 = []byte{
	// 166 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0xa9, 0x88, 0x4f,
	0x4c, 0x49, 0x29, 0x4a, 0x2d, 0x2e, 0x8e, 0x4f, 0xca, 0xcc, 0x4b, 0xd1, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b,
	0x53, 0x21, 0x12, 0x4a, 0x45, 0x5c, 0xbc, 0x21, 0x15, 0x8e, 0x10, 0x0d, 0x4e, 0x99, 0x79, 0x29,
	0x42, 0x9a, 0x5c, 0x6c, 0x21, 0x15, 0x4e, 0x89, 0xc5, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc,
	0x46, 0x82, 0x7a, 0x70, 0xad, 0x7a, 0x10, 0x89, 0x20, 0xa8, 0x02, 0x21, 0x29, 0x2e, 0x0e, 0x90,
	0x96, 0x90, 0xca, 0x82, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0x96, 0x20, 0x38, 0x1f, 0x26, 0x07,
	0x32, 0x59, 0x82, 0x59, 0x81, 0x51, 0x83, 0x27, 0x08, 0xce, 0x77, 0x92, 0x3d, 0xf1, 0x48, 0x8e,
	0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x67, 0x3c, 0x96, 0x63, 0x88, 0xe2, 0xd6,
	0xd3, 0x87, 0xdb, 0x92, 0xc4, 0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x20, 0xaa,
	0xd4, 0x4c, 0xcb, 0x00, 0x00, 0x00,
}

func (m *TxAddressBind) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxAddressBind) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxAddressBind) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BindAddr) > 0 {
		i -= len(m.BindAddr)
		copy(dAtA[i:], m.BindAddr)
		i = encodeVarintTxAddressBind(dAtA, i, uint64(len(m.BindAddr)))
		i--
		dAtA[i] = 0x1a
	}
	if m.BindType != 0 {
		i = encodeVarintTxAddressBind(dAtA, i, uint64(m.BindType))
		i--
		dAtA[i] = 0x10
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxAddressBind(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxAddressBind(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxAddressBind(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxAddressBind) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxAddressBind(uint64(l))
	}
	if m.BindType != 0 {
		n += 1 + sovTxAddressBind(uint64(m.BindType))
	}
	l = len(m.BindAddr)
	if l > 0 {
		n += 1 + l + sovTxAddressBind(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxAddressBind(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxAddressBind(x uint64) (n int) {
	return sovTxAddressBind(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxAddressBind) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxAddressBind
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxAddressBind: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxAddressBind: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAddressBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxAddressBind
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxAddressBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindType", wireType)
			}
			m.BindType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAddressBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindType |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindAddr", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxAddressBind
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxAddressBind
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxAddressBind
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BindAddr = append(m.BindAddr[:0], dAtA[iNdEx:postIndex]...)
			if m.BindAddr == nil {
				m.BindAddr = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxAddressBind(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxAddressBind
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxAddressBind(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxAddressBind
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxAddressBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxAddressBind
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxAddressBind
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxAddressBind
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxAddressBind
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxAddressBind        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxAddressBind          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxAddressBind = fmt.Errorf("proto: unexpected end of group")
)
