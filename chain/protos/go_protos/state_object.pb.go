// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: state_object.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StateObject struct {
	Address              []byte            `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	CacheStorage         map[string][]byte `protobuf:"bytes,2,rep,name=cacheStorage,proto3" json:"cacheStorage,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Code                 []byte            `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	CodeHash             []byte            `protobuf:"bytes,4,opt,name=codeHash,proto3" json:"codeHash,omitempty"`
	Balance              uint64            `protobuf:"varint,5,opt,name=balance,proto3" json:"balance,omitempty"`
	BalanceChange        bool              `protobuf:"varint,6,opt,name=balanceChange,proto3" json:"balanceChange,omitempty"`
	Nonce                uint64            `protobuf:"varint,7,opt,name=nonce,proto3" json:"nonce,omitempty"`
	NonceChange          bool              `protobuf:"varint,8,opt,name=nonceChange,proto3" json:"nonceChange,omitempty"`
	Suicide              bool              `protobuf:"varint,9,opt,name=suicide,proto3" json:"suicide,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StateObject) Reset()         { *m = StateObject{} }
func (m *StateObject) String() string { return proto.CompactTextString(m) }
func (*StateObject) ProtoMessage()    {}
func (*StateObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_454a633bbcdb1606, []int{0}
}
func (m *StateObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StateObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StateObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StateObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateObject.Merge(m, src)
}
func (m *StateObject) XXX_Size() int {
	return m.Size()
}
func (m *StateObject) XXX_DiscardUnknown() {
	xxx_messageInfo_StateObject.DiscardUnknown(m)
}

var xxx_messageInfo_StateObject proto.InternalMessageInfo

func (m *StateObject) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *StateObject) GetCacheStorage() map[string][]byte {
	if m != nil {
		return m.CacheStorage
	}
	return nil
}

func (m *StateObject) GetCode() []byte {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *StateObject) GetCodeHash() []byte {
	if m != nil {
		return m.CodeHash
	}
	return nil
}

func (m *StateObject) GetBalance() uint64 {
	if m != nil {
		return m.Balance
	}
	return 0
}

func (m *StateObject) GetBalanceChange() bool {
	if m != nil {
		return m.BalanceChange
	}
	return false
}

func (m *StateObject) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *StateObject) GetNonceChange() bool {
	if m != nil {
		return m.NonceChange
	}
	return false
}

func (m *StateObject) GetSuicide() bool {
	if m != nil {
		return m.Suicide
	}
	return false
}

func init() {
	proto.RegisterType((*StateObject)(nil), "go_protos.StateObject")
	proto.RegisterMapType((map[string][]byte)(nil), "go_protos.StateObject.CacheStorageEntry")
}

func init() { proto.RegisterFile("state_object.proto", fileDescriptor_454a633bbcdb1606) }

var fileDescriptor_454a633bbcdb1606 = []byte{
	// 298 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xdd, 0x26, 0x6d, 0x93, 0x4d, 0x05, 0x1d, 0x3c, 0x2c, 0x05, 0x43, 0x10, 0x0f, 0x39,
	0x45, 0xd0, 0x8b, 0x78, 0x11, 0x2c, 0x82, 0x07, 0x41, 0x48, 0x6f, 0x5e, 0xca, 0x66, 0xb3, 0x24,
	0xd5, 0x92, 0x95, 0xec, 0x56, 0xe8, 0x9b, 0xf8, 0x48, 0x1e, 0x7d, 0x04, 0x89, 0x2f, 0xe1, 0x51,
	0x76, 0xda, 0x84, 0x14, 0x4f, 0xf3, 0x7f, 0xb3, 0xf3, 0xcf, 0xec, 0x0c, 0x05, 0x6d, 0xb8, 0x91,
	0x0b, 0x95, 0xbd, 0x48, 0x61, 0x92, 0xb7, 0x5a, 0x19, 0x05, 0x7e, 0xa1, 0x16, 0xa8, 0xf4, 0xd9,
	0xef, 0x80, 0x06, 0x73, 0x5b, 0xf1, 0x84, 0x05, 0xc0, 0xe8, 0x98, 0xe7, 0x79, 0x2d, 0xb5, 0x66,
	0x24, 0x22, 0xf1, 0x24, 0x6d, 0x11, 0x1e, 0xe9, 0x44, 0x70, 0x51, 0xca, 0xb9, 0x51, 0x35, 0x2f,
	0x24, 0x1b, 0x44, 0x4e, 0x1c, 0x5c, 0xc6, 0x49, 0xd7, 0x2b, 0xe9, 0xf5, 0x49, 0x66, 0xbd, 0xd2,
	0xfb, 0xca, 0xd4, 0x9b, 0x74, 0xcf, 0x0d, 0x40, 0x5d, 0xa1, 0x72, 0xc9, 0x1c, 0x1c, 0x82, 0x1a,
	0xa6, 0xd4, 0xb3, 0xf1, 0x81, 0xeb, 0x92, 0xb9, 0x98, 0xef, 0xd8, 0xfe, 0x2b, 0xe3, 0x2b, 0x5e,
	0x09, 0xc9, 0x86, 0x11, 0x89, 0xdd, 0xb4, 0x45, 0x38, 0xa7, 0x87, 0x3b, 0x39, 0x2b, 0x79, 0x55,
	0x48, 0x36, 0x8a, 0x48, 0xec, 0xa5, 0xfb, 0x49, 0x38, 0xa1, 0xc3, 0x4a, 0x59, 0xf7, 0x18, 0xdd,
	0x5b, 0x80, 0x88, 0x06, 0x28, 0x76, 0x4e, 0x0f, 0x9d, 0xfd, 0x94, 0x9d, 0xab, 0xd7, 0x4b, 0xb1,
	0xcc, 0x25, 0xf3, 0xf1, 0xb5, 0xc5, 0xe9, 0x2d, 0x3d, 0xfe, 0xb7, 0x24, 0x1c, 0x51, 0xe7, 0x55,
	0x6e, 0xf0, 0x74, 0x7e, 0x6a, 0xa5, 0x1d, 0xfc, 0xce, 0x57, 0x6b, 0x7b, 0x2f, 0xbb, 0xd1, 0x16,
	0x6e, 0x06, 0xd7, 0xe4, 0xee, 0xf4, 0xb3, 0x09, 0xc9, 0x57, 0x13, 0x92, 0xef, 0x26, 0x24, 0x1f,
	0x3f, 0xe1, 0xc1, 0x73, 0x90, 0x5c, 0x74, 0xd7, 0xcc, 0x46, 0x18, 0xaf, 0xfe, 0x02, 0x00, 0x00,
	0xff, 0xff, 0x9f, 0x90, 0x99, 0xc8, 0xc1, 0x01, 0x00, 0x00,
}

func (m *StateObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StateObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StateObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Suicide {
		i--
		if m.Suicide {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.NonceChange {
		i--
		if m.NonceChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Nonce != 0 {
		i = encodeVarintStateObject(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x38
	}
	if m.BalanceChange {
		i--
		if m.BalanceChange {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.Balance != 0 {
		i = encodeVarintStateObject(dAtA, i, uint64(m.Balance))
		i--
		dAtA[i] = 0x28
	}
	if len(m.CodeHash) > 0 {
		i -= len(m.CodeHash)
		copy(dAtA[i:], m.CodeHash)
		i = encodeVarintStateObject(dAtA, i, uint64(len(m.CodeHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Code) > 0 {
		i -= len(m.Code)
		copy(dAtA[i:], m.Code)
		i = encodeVarintStateObject(dAtA, i, uint64(len(m.Code)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CacheStorage) > 0 {
		for k := range m.CacheStorage {
			v := m.CacheStorage[k]
			baseI := i
			if len(v) > 0 {
				i -= len(v)
				copy(dAtA[i:], v)
				i = encodeVarintStateObject(dAtA, i, uint64(len(v)))
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintStateObject(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintStateObject(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStateObject(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStateObject(dAtA []byte, offset int, v uint64) int {
	offset -= sovStateObject(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StateObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStateObject(uint64(l))
	}
	if len(m.CacheStorage) > 0 {
		for k, v := range m.CacheStorage {
			_ = k
			_ = v
			l = 0
			if len(v) > 0 {
				l = 1 + len(v) + sovStateObject(uint64(len(v)))
			}
			mapEntrySize := 1 + len(k) + sovStateObject(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovStateObject(uint64(mapEntrySize))
		}
	}
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovStateObject(uint64(l))
	}
	l = len(m.CodeHash)
	if l > 0 {
		n += 1 + l + sovStateObject(uint64(l))
	}
	if m.Balance != 0 {
		n += 1 + sovStateObject(uint64(m.Balance))
	}
	if m.BalanceChange {
		n += 2
	}
	if m.Nonce != 0 {
		n += 1 + sovStateObject(uint64(m.Nonce))
	}
	if m.NonceChange {
		n += 2
	}
	if m.Suicide {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovStateObject(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStateObject(x uint64) (n int) {
	return sovStateObject(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StateObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStateObject
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StateObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StateObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateObject
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CacheStorage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStateObject
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStateObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CacheStorage == nil {
				m.CacheStorage = make(map[string][]byte)
			}
			var mapkey string
			mapvalue := []byte{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowStateObject
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStateObject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthStateObject
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthStateObject
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapbyteLen uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowStateObject
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapbyteLen |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intMapbyteLen := int(mapbyteLen)
					if intMapbyteLen < 0 {
						return ErrInvalidLengthStateObject
					}
					postbytesIndex := iNdEx + intMapbyteLen
					if postbytesIndex < 0 {
						return ErrInvalidLengthStateObject
					}
					if postbytesIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = make([]byte, mapbyteLen)
					copy(mapvalue, dAtA[iNdEx:postbytesIndex])
					iNdEx = postbytesIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipStateObject(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthStateObject
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CacheStorage[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateObject
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = append(m.Code[:0], dAtA[iNdEx:postIndex]...)
			if m.Code == nil {
				m.Code = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CodeHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStateObject
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStateObject
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CodeHash = append(m.CodeHash[:0], dAtA[iNdEx:postIndex]...)
			if m.CodeHash == nil {
				m.CodeHash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			m.Balance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Balance |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BalanceChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BalanceChange = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonceChange", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NonceChange = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suicide", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suicide = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipStateObject(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStateObject
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStateObject(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStateObject
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStateObject
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStateObject
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStateObject
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStateObject
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStateObject        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStateObject          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStateObject = fmt.Errorf("proto: unexpected end of group")
)
