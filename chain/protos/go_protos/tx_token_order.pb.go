// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_token_order.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// 新订单
type TxTokenNewOrder struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	TokenAID             []byte   `protobuf:"bytes,2,opt,name=TokenAID,proto3" json:"TokenAID,omitempty"`
	TokenAAmount         []byte   `protobuf:"bytes,3,opt,name=TokenAAmount,proto3" json:"TokenAAmount,omitempty"`
	TokenBID             []byte   `protobuf:"bytes,4,opt,name=TokenBID,proto3" json:"TokenBID,omitempty"`
	TokenBAmount         []byte   `protobuf:"bytes,5,opt,name=TokenBAmount,proto3" json:"TokenBAmount,omitempty"`
	TokenVin             *Vin     `protobuf:"bytes,6,opt,name=TokenVin,proto3" json:"TokenVin,omitempty"`
	Price                float64  `protobuf:"fixed64,7,opt,name=Price,proto3" json:"Price,omitempty"`
	Buy                  bool     `protobuf:"varint,8,opt,name=Buy,proto3" json:"Buy,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxTokenNewOrder) Reset()         { *m = TxTokenNewOrder{} }
func (m *TxTokenNewOrder) String() string { return proto.CompactTextString(m) }
func (*TxTokenNewOrder) ProtoMessage()    {}
func (*TxTokenNewOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92d35dd2eab5425, []int{0}
}
func (m *TxTokenNewOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTokenNewOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTokenNewOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTokenNewOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTokenNewOrder.Merge(m, src)
}
func (m *TxTokenNewOrder) XXX_Size() int {
	return m.Size()
}
func (m *TxTokenNewOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTokenNewOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TxTokenNewOrder proto.InternalMessageInfo

func (m *TxTokenNewOrder) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxTokenNewOrder) GetTokenAID() []byte {
	if m != nil {
		return m.TokenAID
	}
	return nil
}

func (m *TxTokenNewOrder) GetTokenAAmount() []byte {
	if m != nil {
		return m.TokenAAmount
	}
	return nil
}

func (m *TxTokenNewOrder) GetTokenBID() []byte {
	if m != nil {
		return m.TokenBID
	}
	return nil
}

func (m *TxTokenNewOrder) GetTokenBAmount() []byte {
	if m != nil {
		return m.TokenBAmount
	}
	return nil
}

func (m *TxTokenNewOrder) GetTokenVin() *Vin {
	if m != nil {
		return m.TokenVin
	}
	return nil
}

func (m *TxTokenNewOrder) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *TxTokenNewOrder) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

// 撮合订单
type TxTokenSwapOrder struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	OrderID1             []byte   `protobuf:"bytes,2,opt,name=OrderID1,proto3" json:"OrderID1,omitempty"`
	OrderID2             []byte   `protobuf:"bytes,3,opt,name=OrderID2,proto3" json:"OrderID2,omitempty"`
	TokenAAmount         []byte   `protobuf:"bytes,4,opt,name=TokenAAmount,proto3" json:"TokenAAmount,omitempty"`
	TokenBAmount         []byte   `protobuf:"bytes,5,opt,name=TokenBAmount,proto3" json:"TokenBAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxTokenSwapOrder) Reset()         { *m = TxTokenSwapOrder{} }
func (m *TxTokenSwapOrder) String() string { return proto.CompactTextString(m) }
func (*TxTokenSwapOrder) ProtoMessage()    {}
func (*TxTokenSwapOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92d35dd2eab5425, []int{1}
}
func (m *TxTokenSwapOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTokenSwapOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTokenSwapOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTokenSwapOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTokenSwapOrder.Merge(m, src)
}
func (m *TxTokenSwapOrder) XXX_Size() int {
	return m.Size()
}
func (m *TxTokenSwapOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTokenSwapOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TxTokenSwapOrder proto.InternalMessageInfo

func (m *TxTokenSwapOrder) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxTokenSwapOrder) GetOrderID1() []byte {
	if m != nil {
		return m.OrderID1
	}
	return nil
}

func (m *TxTokenSwapOrder) GetOrderID2() []byte {
	if m != nil {
		return m.OrderID2
	}
	return nil
}

func (m *TxTokenSwapOrder) GetTokenAAmount() []byte {
	if m != nil {
		return m.TokenAAmount
	}
	return nil
}

func (m *TxTokenSwapOrder) GetTokenBAmount() []byte {
	if m != nil {
		return m.TokenBAmount
	}
	return nil
}

// 取消订单
type TxTokenCancelOrder struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	TokenVin             *Vin     `protobuf:"bytes,2,opt,name=TokenVin,proto3" json:"TokenVin,omitempty"`
	OrderIds             [][]byte `protobuf:"bytes,3,rep,name=OrderIds,proto3" json:"OrderIds,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxTokenCancelOrder) Reset()         { *m = TxTokenCancelOrder{} }
func (m *TxTokenCancelOrder) String() string { return proto.CompactTextString(m) }
func (*TxTokenCancelOrder) ProtoMessage()    {}
func (*TxTokenCancelOrder) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92d35dd2eab5425, []int{2}
}
func (m *TxTokenCancelOrder) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTokenCancelOrder) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTokenCancelOrder.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTokenCancelOrder) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTokenCancelOrder.Merge(m, src)
}
func (m *TxTokenCancelOrder) XXX_Size() int {
	return m.Size()
}
func (m *TxTokenCancelOrder) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTokenCancelOrder.DiscardUnknown(m)
}

var xxx_messageInfo_TxTokenCancelOrder proto.InternalMessageInfo

func (m *TxTokenCancelOrder) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxTokenCancelOrder) GetTokenVin() *Vin {
	if m != nil {
		return m.TokenVin
	}
	return nil
}

func (m *TxTokenCancelOrder) GetOrderIds() [][]byte {
	if m != nil {
		return m.OrderIds
	}
	return nil
}

// 订单信息
type OrderInfo struct {
	OrderId              []byte   `protobuf:"bytes,1,opt,name=OrderId,proto3" json:"OrderId,omitempty"`
	TokenAID             []byte   `protobuf:"bytes,2,opt,name=TokenAID,proto3" json:"TokenAID,omitempty"`
	TokenAAmount         []byte   `protobuf:"bytes,3,opt,name=TokenAAmount,proto3" json:"TokenAAmount,omitempty"`
	TokenBID             []byte   `protobuf:"bytes,4,opt,name=TokenBID,proto3" json:"TokenBID,omitempty"`
	TokenBAmount         []byte   `protobuf:"bytes,5,opt,name=TokenBAmount,proto3" json:"TokenBAmount,omitempty"`
	Address              []byte   `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address,omitempty"`
	Buy                  bool     `protobuf:"varint,7,opt,name=Buy,proto3" json:"Buy,omitempty"`
	State                int32    `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
	Price                float64  `protobuf:"fixed64,9,opt,name=Price,proto3" json:"Price,omitempty"`
	TxIds                [][]byte `protobuf:"bytes,10,rep,name=TxIds,proto3" json:"TxIds,omitempty"`
	PendingTokenAAmount  []byte   `protobuf:"bytes,11,opt,name=PendingTokenAAmount,proto3" json:"PendingTokenAAmount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderInfo) Reset()         { *m = OrderInfo{} }
func (m *OrderInfo) String() string { return proto.CompactTextString(m) }
func (*OrderInfo) ProtoMessage()    {}
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_b92d35dd2eab5425, []int{3}
}
func (m *OrderInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OrderInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OrderInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OrderInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderInfo.Merge(m, src)
}
func (m *OrderInfo) XXX_Size() int {
	return m.Size()
}
func (m *OrderInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OrderInfo proto.InternalMessageInfo

func (m *OrderInfo) GetOrderId() []byte {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *OrderInfo) GetTokenAID() []byte {
	if m != nil {
		return m.TokenAID
	}
	return nil
}

func (m *OrderInfo) GetTokenAAmount() []byte {
	if m != nil {
		return m.TokenAAmount
	}
	return nil
}

func (m *OrderInfo) GetTokenBID() []byte {
	if m != nil {
		return m.TokenBID
	}
	return nil
}

func (m *OrderInfo) GetTokenBAmount() []byte {
	if m != nil {
		return m.TokenBAmount
	}
	return nil
}

func (m *OrderInfo) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *OrderInfo) GetBuy() bool {
	if m != nil {
		return m.Buy
	}
	return false
}

func (m *OrderInfo) GetState() int32 {
	if m != nil {
		return m.State
	}
	return 0
}

func (m *OrderInfo) GetPrice() float64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *OrderInfo) GetTxIds() [][]byte {
	if m != nil {
		return m.TxIds
	}
	return nil
}

func (m *OrderInfo) GetPendingTokenAAmount() []byte {
	if m != nil {
		return m.PendingTokenAAmount
	}
	return nil
}

func init() {
	proto.RegisterType((*TxTokenNewOrder)(nil), "go_protos.TxTokenNewOrder")
	proto.RegisterType((*TxTokenSwapOrder)(nil), "go_protos.TxTokenSwapOrder")
	proto.RegisterType((*TxTokenCancelOrder)(nil), "go_protos.TxTokenCancelOrder")
	proto.RegisterType((*OrderInfo)(nil), "go_protos.OrderInfo")
}

func init() { proto.RegisterFile("tx_token_order.proto", fileDescriptor_b92d35dd2eab5425) }

var fileDescriptor_b92d35dd2eab5425 = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x92, 0x3f, 0x8e, 0x9b, 0x40,
	0x18, 0xc5, 0x33, 0x60, 0x8c, 0x3d, 0x46, 0x89, 0x33, 0x71, 0x31, 0xb2, 0x14, 0x84, 0xa8, 0x48,
	0x0a, 0x92, 0x38, 0x27, 0x30, 0x71, 0xe3, 0x26, 0xb1, 0x26, 0xc8, 0x45, 0x1a, 0x0b, 0x9b, 0x89,
	0x85, 0x92, 0x0c, 0x16, 0x83, 0x65, 0x72, 0x82, 0xb4, 0x29, 0xf7, 0x32, 0x5b, 0xae, 0xb4, 0xe5,
	0x1e, 0x61, 0xe5, 0xbd, 0xc8, 0x8a, 0x61, 0x18, 0x63, 0xad, 0xa5, 0xfd, 0xd3, 0x6c, 0xc5, 0xbc,
	0x79, 0x3c, 0xf1, 0x7d, 0x3f, 0x1e, 0x1c, 0xe4, 0xc5, 0x22, 0x4f, 0x7f, 0x51, 0xb6, 0x48, 0xb3,
	0x98, 0x66, 0xfe, 0x26, 0x4b, 0xf3, 0x14, 0x75, 0xd7, 0xe9, 0x42, 0x9c, 0xf8, 0xd0, 0xca, 0x8b,
	0x65, 0xc4, 0x69, 0x65, 0xb8, 0xff, 0x35, 0xf8, 0x2a, 0x2c, 0xc2, 0x32, 0xf0, 0x95, 0xee, 0xbe,
	0x95, 0x11, 0xf4, 0x0e, 0xb6, 0xc3, 0x22, 0x88, 0x38, 0xc5, 0xc0, 0x01, 0x5e, 0x6f, 0xf4, 0xda,
	0x57, 0x69, 0xbf, 0x32, 0x88, 0x7c, 0x01, 0x0d, 0x61, 0x47, 0x64, 0xc7, 0xd3, 0x09, 0xd6, 0x1c,
	0xe0, 0x59, 0x44, 0x69, 0xe4, 0x42, 0xab, 0x3a, 0x8f, 0xff, 0xa4, 0x5b, 0x96, 0x63, 0x5d, 0xf8,
	0x47, 0x77, 0x2a, 0x1f, 0x4c, 0x27, 0xb8, 0xd5, 0xc8, 0x07, 0x8d, 0x7c, 0x20, 0xf3, 0x46, 0x23,
	0x2f, 0xef, 0xd0, 0x7b, 0x99, 0x9f, 0x27, 0x0c, 0xb7, 0xc5, 0xb0, 0x2f, 0x1b, 0xc3, 0xce, 0x13,
	0x46, 0x94, 0x8f, 0x06, 0xd0, 0x98, 0x65, 0xc9, 0x8a, 0x62, 0xd3, 0x01, 0x1e, 0x20, 0x95, 0x40,
	0x7d, 0xa8, 0x07, 0xdb, 0xbf, 0xb8, 0xe3, 0x00, 0xaf, 0x43, 0xca, 0xa3, 0x7b, 0x0e, 0x60, 0x5f,
	0x22, 0xf9, 0xbe, 0x8b, 0x36, 0x4f, 0x61, 0x22, 0x32, 0xd3, 0xc9, 0xa7, 0x9a, 0x49, 0xad, 0x1b,
	0xde, 0x48, 0xf2, 0x50, 0xfa, 0x0e, 0xaf, 0xd6, 0x09, 0x5e, 0x0f, 0x60, 0xe2, 0xfe, 0x03, 0x10,
	0xc9, 0xf9, 0xbf, 0x44, 0x6c, 0x45, 0x7f, 0x3f, 0x7a, 0x83, 0x26, 0x55, 0xed, 0x1e, 0xaa, 0x6a,
	0xa3, 0x98, 0x63, 0xdd, 0xd1, 0x0f, 0x1b, 0xc5, 0xdc, 0xbd, 0xd0, 0x60, 0xb7, 0x12, 0xec, 0x67,
	0x8a, 0x30, 0x34, 0xa5, 0x23, 0x26, 0xb0, 0x48, 0x2d, 0x9f, 0xbd, 0x45, 0x18, 0x9a, 0xe3, 0x38,
	0xce, 0x28, 0xe7, 0xa2, 0x44, 0x16, 0xa9, 0x65, 0xdd, 0x0e, 0x53, 0xb5, 0xa3, 0x6c, 0x11, 0xcf,
	0xa3, 0x9c, 0x8a, 0xc6, 0x18, 0xa4, 0x12, 0x87, 0x6e, 0x75, 0x9b, 0xdd, 0x1a, 0x40, 0x23, 0x2c,
	0x4a, 0x30, 0x50, 0x80, 0xa9, 0x04, 0xfa, 0x08, 0xdf, 0xcc, 0x28, 0x8b, 0x13, 0xb6, 0x3e, 0x5a,
	0xac, 0x27, 0xbe, 0x7c, 0xca, 0x0a, 0xde, 0x5e, 0xee, 0x6d, 0x70, 0xb5, 0xb7, 0xc1, 0xf5, 0xde,
	0x06, 0x67, 0x37, 0xf6, 0x8b, 0x1f, 0x3d, 0xff, 0x83, 0xfa, 0x21, 0xcb, 0xb6, 0x78, 0x7e, 0xbe,
	0x0d, 0x00, 0x00, 0xff, 0xff, 0x3c, 0xcf, 0x54, 0xcc, 0xfb, 0x03, 0x00, 0x00,
}

func (m *TxTokenNewOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTokenNewOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTokenNewOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Buy {
		i--
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x39
	}
	if m.TokenVin != nil {
		{
			size, err := m.TokenVin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenBAmount) > 0 {
		i -= len(m.TokenBAmount)
		copy(dAtA[i:], m.TokenBAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenBAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenBID) > 0 {
		i -= len(m.TokenBID)
		copy(dAtA[i:], m.TokenBID)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenBID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenAAmount) > 0 {
		i -= len(m.TokenAAmount)
		copy(dAtA[i:], m.TokenAAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenAAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenAID) > 0 {
		i -= len(m.TokenAID)
		copy(dAtA[i:], m.TokenAID)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenAID)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxTokenSwapOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTokenSwapOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTokenSwapOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TokenBAmount) > 0 {
		i -= len(m.TokenBAmount)
		copy(dAtA[i:], m.TokenBAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenBAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenAAmount) > 0 {
		i -= len(m.TokenAAmount)
		copy(dAtA[i:], m.TokenAAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenAAmount)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OrderID2) > 0 {
		i -= len(m.OrderID2)
		copy(dAtA[i:], m.OrderID2)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.OrderID2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OrderID1) > 0 {
		i -= len(m.OrderID1)
		copy(dAtA[i:], m.OrderID1)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.OrderID1)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxTokenCancelOrder) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTokenCancelOrder) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTokenCancelOrder) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.OrderIds) > 0 {
		for iNdEx := len(m.OrderIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.OrderIds[iNdEx])
			copy(dAtA[i:], m.OrderIds[iNdEx])
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.OrderIds[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TokenVin != nil {
		{
			size, err := m.TokenVin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OrderInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OrderInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OrderInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.PendingTokenAAmount) > 0 {
		i -= len(m.PendingTokenAAmount)
		copy(dAtA[i:], m.PendingTokenAAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.PendingTokenAAmount)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TxIds) > 0 {
		for iNdEx := len(m.TxIds) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.TxIds[iNdEx])
			copy(dAtA[i:], m.TxIds[iNdEx])
			i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TxIds[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Price != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Price))))
		i--
		dAtA[i] = 0x49
	}
	if m.State != 0 {
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x40
	}
	if m.Buy {
		i--
		if m.Buy {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.TokenBAmount) > 0 {
		i -= len(m.TokenBAmount)
		copy(dAtA[i:], m.TokenBAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenBAmount)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TokenBID) > 0 {
		i -= len(m.TokenBID)
		copy(dAtA[i:], m.TokenBID)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenBID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenAAmount) > 0 {
		i -= len(m.TokenAAmount)
		copy(dAtA[i:], m.TokenAAmount)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenAAmount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenAID) > 0 {
		i -= len(m.TokenAID)
		copy(dAtA[i:], m.TokenAID)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.TokenAID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OrderId) > 0 {
		i -= len(m.OrderId)
		copy(dAtA[i:], m.OrderId)
		i = encodeVarintTxTokenOrder(dAtA, i, uint64(len(m.OrderId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxTokenOrder(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxTokenOrder(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxTokenNewOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenAID)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenAAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenBID)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenBAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.TokenVin != nil {
		l = m.TokenVin.Size()
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.Price != 0 {
		n += 9
	}
	if m.Buy {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxTokenSwapOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.OrderID1)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.OrderID2)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenAAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenBAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TxTokenCancelOrder) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.TokenVin != nil {
		l = m.TokenVin.Size()
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if len(m.OrderIds) > 0 {
		for _, b := range m.OrderIds {
			l = len(b)
			n += 1 + l + sovTxTokenOrder(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *OrderInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OrderId)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenAID)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenAAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenBID)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.TokenBAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.Buy {
		n += 2
	}
	if m.State != 0 {
		n += 1 + sovTxTokenOrder(uint64(m.State))
	}
	if m.Price != 0 {
		n += 9
	}
	if len(m.TxIds) > 0 {
		for _, b := range m.TxIds {
			l = len(b)
			n += 1 + l + sovTxTokenOrder(uint64(l))
		}
	}
	l = len(m.PendingTokenAAmount)
	if l > 0 {
		n += 1 + l + sovTxTokenOrder(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxTokenOrder(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxTokenOrder(x uint64) (n int) {
	return sovTxTokenOrder(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxTokenNewOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTokenNewOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTokenNewOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAID = append(m.TokenAID[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenAID == nil {
				m.TokenAID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAAmount = append(m.TokenAAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenAAmount == nil {
				m.TokenAAmount = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBID = append(m.TokenBID[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenBID == nil {
				m.TokenBID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBAmount = append(m.TokenBAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenBAmount == nil {
				m.TokenBAmount = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenVin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenVin == nil {
				m.TokenVin = &Vin{}
			}
			if err := m.TokenVin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxTokenSwapOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTokenSwapOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTokenSwapOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID1", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID1 = append(m.OrderID1[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderID1 == nil {
				m.OrderID1 = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderID2", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderID2 = append(m.OrderID2[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderID2 == nil {
				m.OrderID2 = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAAmount = append(m.TokenAAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenAAmount == nil {
				m.TokenAAmount = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBAmount = append(m.TokenBAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenBAmount == nil {
				m.TokenBAmount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxTokenCancelOrder) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTokenCancelOrder: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTokenCancelOrder: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenVin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TokenVin == nil {
				m.TokenVin = &Vin{}
			}
			if err := m.TokenVin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderIds = append(m.OrderIds, make([]byte, postIndex-iNdEx))
			copy(m.OrderIds[len(m.OrderIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OrderInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenOrder
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OrderInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OrderInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrderId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrderId = append(m.OrderId[:0], dAtA[iNdEx:postIndex]...)
			if m.OrderId == nil {
				m.OrderId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAID = append(m.TokenAID[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenAID == nil {
				m.TokenAID = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenAAmount = append(m.TokenAAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenAAmount == nil {
				m.TokenAAmount = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBID", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBID = append(m.TokenBID[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenBID == nil {
				m.TokenBID = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenBAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenBAmount = append(m.TokenBAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenBAmount == nil {
				m.TokenBAmount = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Buy", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Buy = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Price = float64(math.Float64frombits(v))
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIds", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxIds = append(m.TxIds, make([]byte, postIndex-iNdEx))
			copy(m.TxIds[len(m.TxIds)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PendingTokenAAmount", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PendingTokenAAmount = append(m.PendingTokenAAmount[:0], dAtA[iNdEx:postIndex]...)
			if m.PendingTokenAAmount == nil {
				m.PendingTokenAAmount = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenOrder(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenOrder
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxTokenOrder(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxTokenOrder
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTokenOrder
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxTokenOrder
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxTokenOrder
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxTokenOrder
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxTokenOrder        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxTokenOrder          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxTokenOrder = fmt.Errorf("proto: unexpected end of group")
)
