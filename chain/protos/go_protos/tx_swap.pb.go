// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_swap.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxSwap struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	TokenTxidOut         []byte   `protobuf:"bytes,2,opt,name=TokenTxidOut,proto3" json:"TokenTxidOut,omitempty"`
	TokenTxidIn          []byte   `protobuf:"bytes,3,opt,name=TokenTxidIn,proto3" json:"TokenTxidIn,omitempty"`
	AmountOut            []byte   `protobuf:"bytes,4,opt,name=AmountOut,proto3" json:"AmountOut,omitempty"`
	AmountIn             []byte   `protobuf:"bytes,5,opt,name=AmountIn,proto3" json:"AmountIn,omitempty"`
	LockhightPromoter    uint64   `protobuf:"varint,6,opt,name=LockhightPromoter,proto3" json:"LockhightPromoter,omitempty"`
	PukPromoter          []byte   `protobuf:"bytes,7,opt,name=PukPromoter,proto3" json:"PukPromoter,omitempty"`
	SignPromoter         []byte   `protobuf:"bytes,8,opt,name=SignPromoter,proto3" json:"SignPromoter,omitempty"`
	AmountDeal           []byte   `protobuf:"bytes,9,opt,name=AmountDeal,proto3" json:"AmountDeal,omitempty"`
	TokenVinRecv         []*Vin   `protobuf:"bytes,10,rep,name=TokenVinRecv,proto3" json:"TokenVinRecv,omitempty"`
	TokenVoutRecv        []*Vout  `protobuf:"bytes,11,rep,name=TokenVoutRecv,proto3" json:"TokenVoutRecv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxSwap) Reset()         { *m = TxSwap{} }
func (m *TxSwap) String() string { return proto.CompactTextString(m) }
func (*TxSwap) ProtoMessage()    {}
func (*TxSwap) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e27784efbfae189, []int{0}
}
func (m *TxSwap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxSwap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxSwap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxSwap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxSwap.Merge(m, src)
}
func (m *TxSwap) XXX_Size() int {
	return m.Size()
}
func (m *TxSwap) XXX_DiscardUnknown() {
	xxx_messageInfo_TxSwap.DiscardUnknown(m)
}

var xxx_messageInfo_TxSwap proto.InternalMessageInfo

func (m *TxSwap) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxSwap) GetTokenTxidOut() []byte {
	if m != nil {
		return m.TokenTxidOut
	}
	return nil
}

func (m *TxSwap) GetTokenTxidIn() []byte {
	if m != nil {
		return m.TokenTxidIn
	}
	return nil
}

func (m *TxSwap) GetAmountOut() []byte {
	if m != nil {
		return m.AmountOut
	}
	return nil
}

func (m *TxSwap) GetAmountIn() []byte {
	if m != nil {
		return m.AmountIn
	}
	return nil
}

func (m *TxSwap) GetLockhightPromoter() uint64 {
	if m != nil {
		return m.LockhightPromoter
	}
	return 0
}

func (m *TxSwap) GetPukPromoter() []byte {
	if m != nil {
		return m.PukPromoter
	}
	return nil
}

func (m *TxSwap) GetSignPromoter() []byte {
	if m != nil {
		return m.SignPromoter
	}
	return nil
}

func (m *TxSwap) GetAmountDeal() []byte {
	if m != nil {
		return m.AmountDeal
	}
	return nil
}

func (m *TxSwap) GetTokenVinRecv() []*Vin {
	if m != nil {
		return m.TokenVinRecv
	}
	return nil
}

func (m *TxSwap) GetTokenVoutRecv() []*Vout {
	if m != nil {
		return m.TokenVoutRecv
	}
	return nil
}

func init() {
	proto.RegisterType((*TxSwap)(nil), "go_protos.TxSwap")
}

func init() { proto.RegisterFile("tx_swap.proto", fileDescriptor_3e27784efbfae189) }

var fileDescriptor_3e27784efbfae189 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0xa9, 0x88, 0x2f,
	0x2e, 0x4f, 0x2c, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3,
	0x8a, 0xa5, 0x78, 0x4a, 0x2a, 0x92, 0x12, 0x8b, 0x53, 0x21, 0x12, 0x4a, 0x9b, 0x98, 0xb9, 0xd8,
	0x42, 0x2a, 0x82, 0xcb, 0x13, 0x0b, 0x84, 0x34, 0x41, 0x2c, 0xa7, 0xc4, 0xe2, 0x54, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x6e, 0x23, 0x41, 0x3d, 0xb8, 0x26, 0x3d, 0x88, 0x44, 0x10, 0x54, 0x81, 0x90,
	0x12, 0x17, 0x4f, 0x48, 0x7e, 0x76, 0x6a, 0x5e, 0x48, 0x45, 0x66, 0x8a, 0x7f, 0x69, 0x89, 0x04,
	0x93, 0x02, 0xa3, 0x06, 0x4f, 0x10, 0x8a, 0x98, 0x90, 0x02, 0x17, 0x37, 0x9c, 0xef, 0x99, 0x27,
	0xc1, 0x0c, 0x56, 0x82, 0x2c, 0x24, 0x24, 0xc3, 0xc5, 0xe9, 0x98, 0x9b, 0x5f, 0x9a, 0x57, 0x02,
	0x32, 0x82, 0x05, 0x2c, 0x8f, 0x10, 0x10, 0x92, 0xe2, 0xe2, 0x80, 0x70, 0x3c, 0xf3, 0x24, 0x58,
	0xc1, 0x92, 0x70, 0xbe, 0x90, 0x0e, 0x97, 0xa0, 0x4f, 0x7e, 0x72, 0x76, 0x46, 0x66, 0x7a, 0x46,
	0x49, 0x40, 0x51, 0x7e, 0x6e, 0x7e, 0x49, 0x6a, 0x91, 0x04, 0x9b, 0x02, 0xa3, 0x06, 0x4b, 0x10,
	0xa6, 0x04, 0xc8, 0x25, 0x01, 0xa5, 0xd9, 0x70, 0x75, 0xec, 0x10, 0x97, 0x20, 0x09, 0x81, 0xfc,
	0x13, 0x9c, 0x99, 0x9e, 0x07, 0x57, 0xc2, 0x01, 0xf1, 0x0f, 0xb2, 0x98, 0x90, 0x1c, 0x17, 0x17,
	0xc4, 0x7e, 0x97, 0xd4, 0xc4, 0x1c, 0x09, 0x4e, 0xb0, 0x0a, 0x24, 0x11, 0x21, 0x23, 0x68, 0x98,
	0x84, 0x65, 0xe6, 0x05, 0xa5, 0x26, 0x97, 0x49, 0x70, 0x29, 0x30, 0x6b, 0x70, 0x1b, 0xf1, 0x21,
	0x05, 0x22, 0x48, 0x06, 0x45, 0x8d, 0x90, 0x29, 0x17, 0x2f, 0x84, 0x9f, 0x5f, 0x5a, 0x02, 0xd6,
	0xc4, 0x0d, 0xd6, 0xc4, 0x8f, 0xac, 0x09, 0x24, 0x85, 0xaa, 0xca, 0x49, 0xf6, 0xc4, 0x23, 0x39,
	0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf1, 0x58, 0x8e, 0x21, 0x8a, 0x5b,
	0x4f, 0x1f, 0xae, 0x25, 0x89, 0x0d, 0x4c, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xd6,
	0xc4, 0xc7, 0x04, 0x02, 0x00, 0x00,
}

func (m *TxSwap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxSwap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxSwap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.TokenVoutRecv) > 0 {
		for iNdEx := len(m.TokenVoutRecv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenVoutRecv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.TokenVinRecv) > 0 {
		for iNdEx := len(m.TokenVinRecv) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenVinRecv[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxSwap(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.AmountDeal) > 0 {
		i -= len(m.AmountDeal)
		copy(dAtA[i:], m.AmountDeal)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.AmountDeal)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.SignPromoter) > 0 {
		i -= len(m.SignPromoter)
		copy(dAtA[i:], m.SignPromoter)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.SignPromoter)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PukPromoter) > 0 {
		i -= len(m.PukPromoter)
		copy(dAtA[i:], m.PukPromoter)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.PukPromoter)))
		i--
		dAtA[i] = 0x3a
	}
	if m.LockhightPromoter != 0 {
		i = encodeVarintTxSwap(dAtA, i, uint64(m.LockhightPromoter))
		i--
		dAtA[i] = 0x30
	}
	if len(m.AmountIn) > 0 {
		i -= len(m.AmountIn)
		copy(dAtA[i:], m.AmountIn)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.AmountIn)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AmountOut) > 0 {
		i -= len(m.AmountOut)
		copy(dAtA[i:], m.AmountOut)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.AmountOut)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenTxidIn) > 0 {
		i -= len(m.TokenTxidIn)
		copy(dAtA[i:], m.TokenTxidIn)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.TokenTxidIn)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenTxidOut) > 0 {
		i -= len(m.TokenTxidOut)
		copy(dAtA[i:], m.TokenTxidOut)
		i = encodeVarintTxSwap(dAtA, i, uint64(len(m.TokenTxidOut)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxSwap(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxSwap(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxSwap(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxSwap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.TokenTxidOut)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.TokenTxidIn)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.AmountOut)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.AmountIn)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	if m.LockhightPromoter != 0 {
		n += 1 + sovTxSwap(uint64(m.LockhightPromoter))
	}
	l = len(m.PukPromoter)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.SignPromoter)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	l = len(m.AmountDeal)
	if l > 0 {
		n += 1 + l + sovTxSwap(uint64(l))
	}
	if len(m.TokenVinRecv) > 0 {
		for _, e := range m.TokenVinRecv {
			l = e.Size()
			n += 1 + l + sovTxSwap(uint64(l))
		}
	}
	if len(m.TokenVoutRecv) > 0 {
		for _, e := range m.TokenVoutRecv {
			l = e.Size()
			n += 1 + l + sovTxSwap(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxSwap(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxSwap(x uint64) (n int) {
	return sovTxSwap(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxSwap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxSwap
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxSwap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxSwap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTxidOut", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTxidOut = append(m.TokenTxidOut[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenTxidOut == nil {
				m.TokenTxidOut = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenTxidIn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenTxidIn = append(m.TokenTxidIn[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenTxidIn == nil {
				m.TokenTxidIn = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountOut", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountOut = append(m.AmountOut[:0], dAtA[iNdEx:postIndex]...)
			if m.AmountOut == nil {
				m.AmountOut = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountIn", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountIn = append(m.AmountIn[:0], dAtA[iNdEx:postIndex]...)
			if m.AmountIn == nil {
				m.AmountIn = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockhightPromoter", wireType)
			}
			m.LockhightPromoter = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockhightPromoter |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PukPromoter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PukPromoter = append(m.PukPromoter[:0], dAtA[iNdEx:postIndex]...)
			if m.PukPromoter == nil {
				m.PukPromoter = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignPromoter", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignPromoter = append(m.SignPromoter[:0], dAtA[iNdEx:postIndex]...)
			if m.SignPromoter == nil {
				m.SignPromoter = []byte{}
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountDeal", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountDeal = append(m.AmountDeal[:0], dAtA[iNdEx:postIndex]...)
			if m.AmountDeal == nil {
				m.AmountDeal = []byte{}
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenVinRecv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenVinRecv = append(m.TokenVinRecv, &Vin{})
			if err := m.TokenVinRecv[len(m.TokenVinRecv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenVoutRecv", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxSwap
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxSwap
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenVoutRecv = append(m.TokenVoutRecv, &Vout{})
			if err := m.TokenVoutRecv[len(m.TokenVoutRecv)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxSwap(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxSwap
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxSwap(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxSwap
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxSwap
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxSwap
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxSwap
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxSwap
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxSwap        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxSwap          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxSwap = fmt.Errorf("proto: unexpected end of group")
)
