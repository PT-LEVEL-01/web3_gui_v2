// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: getblockheadvomorerequest.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetBlockHeadVOMoreRequest struct {
	Height               uint64   `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
	Length               uint64   `protobuf:"varint,2,opt,name=Length,proto3" json:"Length,omitempty"`
	BHash                []byte   `protobuf:"bytes,3,opt,name=BHash,proto3" json:"BHash,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetBlockHeadVOMoreRequest) Reset()         { *m = GetBlockHeadVOMoreRequest{} }
func (m *GetBlockHeadVOMoreRequest) String() string { return proto.CompactTextString(m) }
func (*GetBlockHeadVOMoreRequest) ProtoMessage()    {}
func (*GetBlockHeadVOMoreRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c3dd5b4b1c82e483, []int{0}
}
func (m *GetBlockHeadVOMoreRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetBlockHeadVOMoreRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetBlockHeadVOMoreRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetBlockHeadVOMoreRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetBlockHeadVOMoreRequest.Merge(m, src)
}
func (m *GetBlockHeadVOMoreRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetBlockHeadVOMoreRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetBlockHeadVOMoreRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetBlockHeadVOMoreRequest proto.InternalMessageInfo

func (m *GetBlockHeadVOMoreRequest) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *GetBlockHeadVOMoreRequest) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

func (m *GetBlockHeadVOMoreRequest) GetBHash() []byte {
	if m != nil {
		return m.BHash
	}
	return nil
}

func init() {
	proto.RegisterType((*GetBlockHeadVOMoreRequest)(nil), "go_protos.GetBlockHeadVOMoreRequest")
}

func init() { proto.RegisterFile("getblockheadvomorerequest.proto", fileDescriptor_c3dd5b4b1c82e483) }

var fileDescriptor_c3dd5b4b1c82e483 = []byte{
	// 168 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4f, 0x4f, 0x2d, 0x49,
	0xca, 0xc9, 0x4f, 0xce, 0xce, 0x48, 0x4d, 0x4c, 0x29, 0xcb, 0xcf, 0xcd, 0x2f, 0x4a, 0x2d, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f,
	0x07, 0xb3, 0x8a, 0x95, 0x12, 0xb9, 0x24, 0xdd, 0x53, 0x4b, 0x9c, 0x40, 0xaa, 0x3d, 0x52, 0x13,
	0x53, 0xc2, 0xfc, 0x7d, 0xf3, 0x8b, 0x52, 0x83, 0x20, 0xaa, 0x85, 0xc4, 0xb8, 0xd8, 0x3c, 0x52,
	0x33, 0xd3, 0x33, 0x4a, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x82, 0xa0, 0x3c, 0x90, 0xb8, 0x4f,
	0x6a, 0x5e, 0x7a, 0x49, 0x86, 0x04, 0x13, 0x44, 0x1c, 0xc2, 0x13, 0x12, 0xe1, 0x62, 0x75, 0xf2,
	0x48, 0x2c, 0xce, 0x90, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x82, 0x70, 0x9c, 0x64, 0x4f, 0x3c,
	0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2,
	0xb8, 0xf5, 0xf4, 0xe1, 0x2e, 0x48, 0x62, 0x03, 0xd3, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x63, 0xa9, 0xa5, 0x25, 0xb6, 0x00, 0x00, 0x00,
}

func (m *GetBlockHeadVOMoreRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetBlockHeadVOMoreRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetBlockHeadVOMoreRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.BHash) > 0 {
		i -= len(m.BHash)
		copy(dAtA[i:], m.BHash)
		i = encodeVarintGetblockheadvomorerequest(dAtA, i, uint64(len(m.BHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Length != 0 {
		i = encodeVarintGetblockheadvomorerequest(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Height != 0 {
		i = encodeVarintGetblockheadvomorerequest(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGetblockheadvomorerequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovGetblockheadvomorerequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetBlockHeadVOMoreRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovGetblockheadvomorerequest(uint64(m.Height))
	}
	if m.Length != 0 {
		n += 1 + sovGetblockheadvomorerequest(uint64(m.Length))
	}
	l = len(m.BHash)
	if l > 0 {
		n += 1 + l + sovGetblockheadvomorerequest(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovGetblockheadvomorerequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGetblockheadvomorerequest(x uint64) (n int) {
	return sovGetblockheadvomorerequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetBlockHeadVOMoreRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGetblockheadvomorerequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetBlockHeadVOMoreRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetBlockHeadVOMoreRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetblockheadvomorerequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetblockheadvomorerequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGetblockheadvomorerequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGetblockheadvomorerequest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGetblockheadvomorerequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BHash = append(m.BHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BHash == nil {
				m.BHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGetblockheadvomorerequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGetblockheadvomorerequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGetblockheadvomorerequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGetblockheadvomorerequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetblockheadvomorerequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGetblockheadvomorerequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGetblockheadvomorerequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGetblockheadvomorerequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGetblockheadvomorerequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGetblockheadvomorerequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGetblockheadvomorerequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGetblockheadvomorerequest = fmt.Errorf("proto: unexpected end of group")
)
