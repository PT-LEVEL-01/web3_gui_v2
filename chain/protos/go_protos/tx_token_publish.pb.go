// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tx_token_publish.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TxTokenPublish struct {
	TxBase               *TxBase  `protobuf:"bytes,1,opt,name=TxBase,proto3" json:"TxBase,omitempty"`
	TokenName            string   `protobuf:"bytes,2,opt,name=Token_name,json=TokenName,proto3" json:"Token_name,omitempty"`
	TokenSymbol          string   `protobuf:"bytes,3,opt,name=Token_symbol,json=TokenSymbol,proto3" json:"Token_symbol,omitempty"`
	TokenSupply          []byte   `protobuf:"bytes,4,opt,name=Token_supply,json=TokenSupply,proto3" json:"Token_supply,omitempty"`
	TokenAccuracy        uint64   `protobuf:"varint,5,opt,name=Token_accuracy,json=TokenAccuracy,proto3" json:"Token_accuracy,omitempty"`
	Token_VoutTotal      uint64   `protobuf:"varint,6,opt,name=Token_Vout_total,json=TokenVoutTotal,proto3" json:"Token_Vout_total,omitempty"`
	Token_Vout           []*Vout  `protobuf:"bytes,7,rep,name=Token_Vout,json=TokenVout,proto3" json:"Token_Vout,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TxTokenPublish) Reset()         { *m = TxTokenPublish{} }
func (m *TxTokenPublish) String() string { return proto.CompactTextString(m) }
func (*TxTokenPublish) ProtoMessage()    {}
func (*TxTokenPublish) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b0b13739c865944, []int{0}
}
func (m *TxTokenPublish) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxTokenPublish) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxTokenPublish.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxTokenPublish) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxTokenPublish.Merge(m, src)
}
func (m *TxTokenPublish) XXX_Size() int {
	return m.Size()
}
func (m *TxTokenPublish) XXX_DiscardUnknown() {
	xxx_messageInfo_TxTokenPublish.DiscardUnknown(m)
}

var xxx_messageInfo_TxTokenPublish proto.InternalMessageInfo

func (m *TxTokenPublish) GetTxBase() *TxBase {
	if m != nil {
		return m.TxBase
	}
	return nil
}

func (m *TxTokenPublish) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *TxTokenPublish) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *TxTokenPublish) GetTokenSupply() []byte {
	if m != nil {
		return m.TokenSupply
	}
	return nil
}

func (m *TxTokenPublish) GetTokenAccuracy() uint64 {
	if m != nil {
		return m.TokenAccuracy
	}
	return 0
}

func (m *TxTokenPublish) GetToken_VoutTotal() uint64 {
	if m != nil {
		return m.Token_VoutTotal
	}
	return 0
}

func (m *TxTokenPublish) GetToken_Vout() []*Vout {
	if m != nil {
		return m.Token_Vout
	}
	return nil
}

type TokenInfo struct {
	TokenId              []byte   `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	TokenName            string   `protobuf:"bytes,2,opt,name=token_name,json=tokenName,proto3" json:"token_name,omitempty"`
	TokenSymbol          string   `protobuf:"bytes,3,opt,name=token_symbol,json=tokenSymbol,proto3" json:"token_symbol,omitempty"`
	TokenSupply          []byte   `protobuf:"bytes,4,opt,name=token_supply,json=tokenSupply,proto3" json:"token_supply,omitempty"`
	TokenAccuracy        uint64   `protobuf:"varint,5,opt,name=token_accuracy,json=tokenAccuracy,proto3" json:"token_accuracy,omitempty"`
	Owner                []byte   `protobuf:"bytes,6,opt,name=owner,proto3" json:"owner,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenInfo) Reset()         { *m = TokenInfo{} }
func (m *TokenInfo) String() string { return proto.CompactTextString(m) }
func (*TokenInfo) ProtoMessage()    {}
func (*TokenInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b0b13739c865944, []int{1}
}
func (m *TokenInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenInfo.Merge(m, src)
}
func (m *TokenInfo) XXX_Size() int {
	return m.Size()
}
func (m *TokenInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TokenInfo proto.InternalMessageInfo

func (m *TokenInfo) GetTokenId() []byte {
	if m != nil {
		return m.TokenId
	}
	return nil
}

func (m *TokenInfo) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *TokenInfo) GetTokenSymbol() string {
	if m != nil {
		return m.TokenSymbol
	}
	return ""
}

func (m *TokenInfo) GetTokenSupply() []byte {
	if m != nil {
		return m.TokenSupply
	}
	return nil
}

func (m *TokenInfo) GetTokenAccuracy() uint64 {
	if m != nil {
		return m.TokenAccuracy
	}
	return 0
}

func (m *TokenInfo) GetOwner() []byte {
	if m != nil {
		return m.Owner
	}
	return nil
}

func init() {
	proto.RegisterType((*TxTokenPublish)(nil), "go_protos.TxTokenPublish")
	proto.RegisterType((*TokenInfo)(nil), "go_protos.TokenInfo")
}

func init() { proto.RegisterFile("tx_token_publish.proto", fileDescriptor_1b0b13739c865944) }

var fileDescriptor_1b0b13739c865944 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x86, 0xbf, 0xe9, 0xef, 0xd7, 0x49, 0xac, 0x3a, 0x88, 0x8c, 0x42, 0x43, 0x2c, 0x08, 0x71,
	0x13, 0xa1, 0x5e, 0x81, 0xdd, 0x75, 0x23, 0x12, 0x83, 0x0b, 0x37, 0x61, 0xd2, 0x8e, 0x5a, 0x4c,
	0x33, 0xa1, 0x39, 0xc1, 0xf4, 0x4e, 0xdc, 0x7a, 0x37, 0x5d, 0x7a, 0x09, 0x52, 0x6f, 0x44, 0xe6,
	0x4c, 0x5b, 0x5a, 0xcc, 0x2a, 0x73, 0x9e, 0xf3, 0xbe, 0x90, 0xf3, 0xd0, 0x53, 0x28, 0x23, 0x50,
	0x6f, 0x32, 0x8d, 0xb2, 0x22, 0x4e, 0xa6, 0xf9, 0xab, 0x9f, 0xcd, 0x15, 0x28, 0xd6, 0x79, 0x51,
	0x11, 0xbe, 0xf2, 0x73, 0x1b, 0xca, 0x58, 0xe4, 0xd2, 0x2c, 0xfa, 0x9f, 0x35, 0xda, 0x0d, 0xcb,
	0x50, 0x57, 0xee, 0x4d, 0x83, 0x5d, 0xd1, 0x56, 0x58, 0x0e, 0x45, 0x2e, 0x39, 0x71, 0x89, 0x67,
	0x0d, 0x8e, 0xfd, 0x6d, 0xd9, 0x37, 0x8b, 0x60, 0x1d, 0x60, 0x3d, 0x4a, 0xb1, 0x1a, 0xa5, 0x62,
	0x26, 0x79, 0xcd, 0x25, 0x5e, 0x27, 0xe8, 0x20, 0xb9, 0x13, 0x33, 0xc9, 0x2e, 0xa8, 0x6d, 0xd6,
	0xf9, 0x62, 0x16, 0xab, 0x84, 0xd7, 0x31, 0x60, 0x21, 0x7b, 0x40, 0xb4, 0x13, 0x29, 0xb2, 0x2c,
	0x59, 0xf0, 0x86, 0x4b, 0x3c, 0x7b, 0x13, 0x41, 0xc4, 0x2e, 0x69, 0xd7, 0x44, 0xc4, 0x78, 0x5c,
	0xcc, 0xc5, 0x78, 0xc1, 0x9b, 0x2e, 0xf1, 0x1a, 0xc1, 0x01, 0xd2, 0xdb, 0x35, 0x64, 0x1e, 0x3d,
	0x32, 0xb1, 0x47, 0x55, 0x40, 0x04, 0x0a, 0x44, 0xc2, 0x5b, 0x18, 0x34, 0x75, 0x8d, 0x43, 0x4d,
	0x99, 0xbf, 0xf9, 0x6b, 0x8d, 0x78, 0xdb, 0xad, 0x7b, 0xd6, 0xe0, 0x70, 0xe7, 0x48, 0x8d, 0xd7,
	0x67, 0xe8, 0x67, 0x7f, 0x49, 0xa8, 0x99, 0x46, 0xe9, 0xb3, 0x62, 0x67, 0xf4, 0xbf, 0x31, 0x3c,
	0x9d, 0xa0, 0x20, 0x3b, 0x68, 0xe3, 0x3c, 0x9a, 0x68, 0x1d, 0xf0, 0x47, 0x07, 0xec, 0xea, 0x80,
	0x0a, 0x1d, 0xb0, 0xaf, 0x03, 0x2a, 0x74, 0xc0, 0xbe, 0x0e, 0xa8, 0xd4, 0x01, 0x7b, 0x3a, 0x4e,
	0x68, 0x53, 0xbd, 0xa7, 0x72, 0x8e, 0x0e, 0xec, 0xc0, 0x0c, 0xc3, 0xde, 0x72, 0xe5, 0x90, 0xaf,
	0x95, 0x43, 0xbe, 0x57, 0x0e, 0xf9, 0xf8, 0x71, 0xfe, 0x3d, 0x59, 0xfe, 0xf5, 0xf6, 0xf2, 0xb8,
	0x85, 0xdf, 0x9b, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x69, 0x63, 0xe9, 0x68, 0x47, 0x02, 0x00,
	0x00,
}

func (m *TxTokenPublish) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxTokenPublish) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxTokenPublish) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Token_Vout) > 0 {
		for iNdEx := len(m.Token_Vout) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Token_Vout[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxTokenPublish(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.Token_VoutTotal != 0 {
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(m.Token_VoutTotal))
		i--
		dAtA[i] = 0x30
	}
	if m.TokenAccuracy != 0 {
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(m.TokenAccuracy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenSupply) > 0 {
		i -= len(m.TokenSupply)
		copy(dAtA[i:], m.TokenSupply)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenSupply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TxBase != nil {
		{
			size, err := m.TxBase.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTxTokenPublish(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TokenInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x32
	}
	if m.TokenAccuracy != 0 {
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(m.TokenAccuracy))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TokenSupply) > 0 {
		i -= len(m.TokenSupply)
		copy(dAtA[i:], m.TokenSupply)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenSupply)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TokenSymbol) > 0 {
		i -= len(m.TokenSymbol)
		copy(dAtA[i:], m.TokenSymbol)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenSymbol)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenName) > 0 {
		i -= len(m.TokenName)
		copy(dAtA[i:], m.TokenName)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenName)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintTxTokenPublish(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxTokenPublish(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxTokenPublish(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxTokenPublish) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxBase != nil {
		l = m.TxBase.Size()
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenSupply)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	if m.TokenAccuracy != 0 {
		n += 1 + sovTxTokenPublish(uint64(m.TokenAccuracy))
	}
	if m.Token_VoutTotal != 0 {
		n += 1 + sovTxTokenPublish(uint64(m.Token_VoutTotal))
	}
	if len(m.Token_Vout) > 0 {
		for _, e := range m.Token_Vout {
			l = e.Size()
			n += 1 + l + sovTxTokenPublish(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TokenInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenName)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenSymbol)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	l = len(m.TokenSupply)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	if m.TokenAccuracy != 0 {
		n += 1 + sovTxTokenPublish(uint64(m.TokenAccuracy))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTxTokenPublish(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovTxTokenPublish(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxTokenPublish(x uint64) (n int) {
	return sovTxTokenPublish(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxTokenPublish) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenPublish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxTokenPublish: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxTokenPublish: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBase", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxBase == nil {
				m.TxBase = &TxBase{}
			}
			if err := m.TxBase.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSupply = append(m.TokenSupply[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenSupply == nil {
				m.TokenSupply = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAccuracy", wireType)
			}
			m.TokenAccuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenAccuracy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token_VoutTotal", wireType)
			}
			m.Token_VoutTotal = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Token_VoutTotal |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token_Vout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token_Vout = append(m.Token_Vout, &Vout{})
			if err := m.Token_Vout[len(m.Token_Vout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenPublish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxTokenPublish
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = append(m.TokenId[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenId == nil {
				m.TokenId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenSupply", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenSupply = append(m.TokenSupply[:0], dAtA[iNdEx:postIndex]...)
			if m.TokenSupply == nil {
				m.TokenSupply = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenAccuracy", wireType)
			}
			m.TokenAccuracy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TokenAccuracy |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = append(m.Owner[:0], dAtA[iNdEx:postIndex]...)
			if m.Owner == nil {
				m.Owner = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxTokenPublish(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxTokenPublish
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxTokenPublish(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxTokenPublish
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxTokenPublish
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxTokenPublish
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxTokenPublish
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxTokenPublish
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxTokenPublish        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxTokenPublish          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxTokenPublish = fmt.Errorf("proto: unexpected end of group")
)
