package main

import (
	"fmt"
	"github.com/urfave/cli/v2"
	"io"
	"os"
	"runtime"
	"strings"
	"web3_gui/chain/evm/abi/bind"
)

var app *cli.App
var (
	// Flags needed by abigen
	abiFlag = &cli.StringFlag{
		Name:  "abi",
		Usage: "Path to the Ethereum contract ABI json to bind, - for STDIN",
	}
	binFlag = &cli.StringFlag{
		Name:  "bin",
		Usage: "Path to the Ethereum contract bytecode (generate deploy method)",
	}
	typeFlag = &cli.StringFlag{
		Name:  "type",
		Usage: "Struct name for the binding (default = package name)",
	}
	jsonFlag = &cli.StringFlag{
		Name:  "combined-json",
		Usage: "Path to the combined-json file generated by compiler, - for STDIN",
	}
	excFlag = &cli.StringFlag{
		Name:  "exc",
		Usage: "Comma separated types to exclude from binding",
	}
	pkgFlag = &cli.StringFlag{
		Name:  "pkg",
		Usage: "Package name to generate the binding into",
	}
	outFlag = &cli.StringFlag{
		Name:  "out",
		Usage: "Output file for the generated binding (default = stdout)",
	}
	langFlag = &cli.StringFlag{
		Name:  "lang",
		Usage: "Destination language for the bindings (go, java, objc)",
		Value: "go",
	}
	aliasFlag = &cli.StringFlag{
		Name:  "alias",
		Usage: "Comma separated aliases for function and event renaming, e.g. original1=alias1, original2=alias2",
	}
)

func init() {
	app = cli.NewApp()
	//只支持这几个参数即可
	app.Flags = []cli.Flag{
		abiFlag,
		binFlag,
		typeFlag,
		pkgFlag,
		outFlag,
	}
	app.Usage = "abigen --abi {xx.abi} --bin {xx.bin} --pkg {package_name} --type {struct} --out {xx.go}"
	app.Action = do

}
func do(c *cli.Context) error {
	if c.String(pkgFlag.Name) == "" {
		fatalf("No destination package specified (--pkg)")
	}
	var (
		abis  []string
		bins  []string
		types []string
	)
	if c.String(abiFlag.Name) == "" {
		fatalf("no abi file")
	}
	//读取abi文件
	input := c.String(abiFlag.Name)
	abi, err := os.ReadFile(input)
	if err != nil {
		fatalf("读取abi失败:%v", err)
	}
	abis = append(abis, string(abi))
	//读取bin文件，可选，存在的时候生成的代码包含部署的部分
	var bin []byte
	if binFile := c.String(binFlag.Name); binFile != "" {
		if bin, err = os.ReadFile(binFile); err != nil {
			fatalf("Failed to read input bytecode: %v", err)
		}
		if strings.Contains(string(bin), "//") {
			fatalf("Contract has additional library references, please use other mode(e.g. --combined-json) to catch library infos")
		}
	}
	bins = append(bins, string(bin))
	kind := c.String(typeFlag.Name)
	if kind == "" {
		kind = c.String(pkgFlag.Name)
	}
	types = append(types, kind)
	//生成合约代码
	code, err := bind.Bind(types, abis, bins, c.String(pkgFlag.Name))
	if err != nil {
		fatalf("Failed to generate ABI binding: %v", err)
	}
	// Either flush it out to a file or display on the standard output
	if !c.IsSet(outFlag.Name) {
		fmt.Printf("%s\n", code)
		return nil
	}
	if err := os.WriteFile(c.String(outFlag.Name), []byte(code), 0600); err != nil {
		fatalf("Failed to write ABI binding: %v", err)
	}
	return nil
}
func fatalf(format string, args ...interface{}) {
	w := io.MultiWriter(os.Stdout, os.Stderr)
	if runtime.GOOS == "windows" {
		// The SameFile check below doesn't work on Windows.
		// stdout is unlikely to get redirected though, so just print there.
		w = os.Stdout
	} else {
		outf, _ := os.Stdout.Stat()
		errf, _ := os.Stderr.Stat()
		if outf != nil && errf != nil && os.SameFile(outf, errf) {
			w = os.Stderr
		}
	}
	fmt.Fprintf(w, "Fatal: "+format+"\n", args...)
	os.Exit(1)
}
func main() {
	if err := app.Run(os.Args); err != nil {
		fmt.Println(err)
		os.Exit(1)
	}
}
