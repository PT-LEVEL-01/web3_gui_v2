package precompiled

import (
	"errors"
	"math/big"
	"strings"
	"web3_gui/chain/evm/precompiled/cloud"
	"web3_gui/chain/evm/precompiled/cross"

	"web3_gui/chain/config"
	"web3_gui/chain/db"
	"web3_gui/chain/evm"
	"web3_gui/chain/evm/abi"
	"web3_gui/chain/evm/common"
	"web3_gui/chain/evm/common/evmutils"
	"web3_gui/chain/evm/precompiled/ens"
	"web3_gui/chain/evm/vm"
	"web3_gui/chain/evm/vm/environment"
	"web3_gui/chain/evm/vm/opcodes"
	"web3_gui/chain/protos/go_protos"

	"github.com/golang/protobuf/proto"
	"web3_gui/keystore/adapter/crypto"
	"web3_gui/libp2parea/adapter/engine"
)

const (
	REWARD_CONTRACT_GAS = 12811
	//新版本带事件10w
	REWARD_RATE_ABI = `[{"constant":true,"inputs":[{"name":"start","type":"uint256"},{"name":"end","type":"uint256"}],"name":"getAllLight","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLightTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxLightCount","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"queryAllReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCommunityRewardList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"reward","type":"uint256"},{"name":"rate","type":"uint8"},{"name":"lightCount","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getWiteVote","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allCReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"w","type":"address"}],"name":"getCommunityListByWit","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"rate","type":"uint8"}],"name":"setRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"c","type":"uint16"},{"name":"l","type":"uint16"}],"name":"setRoleLimit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAllCommunity","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"lastVoteOp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"witnessRewardPool","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"communityRewardPool","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawW","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"l","type":"address"}],"name":"getWitByL","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"w","type":"address"},{"name":"rate","type":"uint8"},{"name":"name","type":"string"}],"name":"addCommunity","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainCReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"w","type":"address"}],"name":"getWitnessInfo","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"rate","type":"uint8"},{"name":"reward","type":"uint256"},{"name":"remainReward","type":"uint256"},{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"reward","type":"uint256"},{"name":"rate","type":"uint8"},{"name":"lightCount","type":"uint256"}],"name":"communitys","type":"tuple[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"list","type":"address[]"}],"name":"getCommunityList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawL","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRate","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getAddrState","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"addVote","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"addrRate","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getRatio","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"lightMap","outputs":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"vote","type":"uint256"}],"name":"delVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"communityDistribute","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"delLight","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"maxCommunityCount","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lastRewardBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"c","type":"address"}],"name":"getWitByC","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainLReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"}],"name":"addLight","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allLReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"list","type":"address[]"},{"name":"index","type":"uint256"},{"name":"totalReward","type":"uint256"}],"name":"distribute","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"delCommunity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getCommVote","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"list","type":"address[]"}],"name":"getLightList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainWReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"c","type":"address"}],"name":"getLightListByC","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addrs","type":"address[]"}],"name":"getRateAndVoteByAddrs","outputs":[{"name":"","type":"uint8[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allWReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getRoleTotal","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"into","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"reward","type":"uint256"},{"indexed":false,"name":"name","type":"string"},{"indexed":false,"name":"utype","type":"uint8"}],"name":"LogRewardHistory","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"reward","type":"uint256"}],"name":"WithDrawReward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"community","type":"address"},{"indexed":false,"name":"reward","type":"uint256"}],"name":"LogCommunityRewardPool","type":"event"}]`
	REWARD_RATE_BIN = ``
	//新版本带事件10
	//REWARD_RATE_ABI = `[{"constant":true,"inputs":[{"name":"start","type":"uint256"},{"name":"end","type":"uint256"}],"name":"getAllLight","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLightTotal","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxLightCount","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"queryAllReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCommunityRewardList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"reward","type":"uint256"},{"name":"rate","type":"uint8"},{"name":"lightCount","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getWiteVote","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allCReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"w","type":"address"}],"name":"getCommunityListByWit","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"rate","type":"uint8"}],"name":"setRate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"newOwner","type":"address"}],"name":"transferOwner","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"c","type":"uint16"},{"name":"l","type":"uint16"}],"name":"setRoleLimit","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getAllCommunity","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"lastVoteOp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"witnessRewardPool","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"communityRewardPool","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawW","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"l","type":"address"}],"name":"getWitByL","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"w","type":"address"},{"name":"rate","type":"uint8"},{"name":"name","type":"string"}],"name":"addCommunity","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainCReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"w","type":"address"}],"name":"getWitnessInfo","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"rate","type":"uint8"},{"name":"reward","type":"uint256"},{"name":"remainReward","type":"uint256"},{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"reward","type":"uint256"},{"name":"rate","type":"uint8"},{"name":"lightCount","type":"uint256"}],"name":"communitys","type":"tuple[]"}],"name":"","type":"tuple"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"list","type":"address[]"}],"name":"getCommunityList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"wit","type":"address"},{"name":"vote","type":"uint256"},{"name":"name","type":"string"},{"name":"score","type":"uint256"},{"name":"blockHeight","type":"uint256"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"}],"name":"withDrawL","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getRate","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getAddrState","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"c","type":"address"}],"name":"addVote","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"addrRate","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getRatio","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"lightMap","outputs":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"vote","type":"uint256"}],"name":"delVote","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"communityDistribute","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"delLight","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"maxCommunityCount","outputs":[{"name":"","type":"uint16"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"lastRewardBlock","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"c","type":"address"}],"name":"getWitByC","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainLReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"name","type":"string"}],"name":"addLight","outputs":[],"payable":true,"stateMutability":"payable","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allLReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"list","type":"address[]"},{"name":"index","type":"uint256"},{"name":"totalReward","type":"uint256"}],"name":"distribute","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"delCommunity","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"addr","type":"address"}],"name":"getCommVote","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"list","type":"address[]"}],"name":"getLightList","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"remainWReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"c","type":"address"}],"name":"getLightListByC","outputs":[{"components":[{"name":"addr","type":"address"},{"name":"c","type":"address"},{"name":"vote","type":"uint256"},{"name":"score","type":"uint256"},{"name":"cname","type":"string"},{"name":"blockHeight","type":"uint256"},{"name":"name","type":"string"}],"name":"","type":"tuple[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"addrs","type":"address[]"}],"name":"getRateAndVoteByAddrs","outputs":[{"name":"","type":"uint8[]"},{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"","type":"address"}],"name":"allWReward","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getRoleTotal","outputs":[{"name":"","type":"uint256"},{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"into","type":"address"},{"indexed":true,"name":"from","type":"address"},{"indexed":false,"name":"reward","type":"uint256"},{"indexed":false,"name":"name","type":"string"},{"indexed":false,"name":"utype","type":"uint8"}],"name":"LogRewardHistory","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"addr","type":"address"},{"indexed":false,"name":"reward","type":"uint256"}],"name":"WithDrawReward","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"community","type":"address"},{"indexed":false,"name":"reward","type":"uint256"}],"name":"LogCommunityRewardPool","type":"event"}]`
	//REWARD_RATE_BIN = ``
)

const (
	ADD_COMMUNITY_ID        = "5d7871ba"
	DEL_COMMUNITY_ID        = "d8593433"
	ADD_VOTE_ID             = "6cea0e46"
	DEL_VOTE_ID             = "9351f4f2"
	ADD_LIGHT_ID            = "c9fd650d"
	DEL_LIGHT_ID            = "9fe8326a"
	WITH_DRAWC_ID           = "0c0d831d"
	WITH_DRAWL_ID           = "64ab6c69"
	WITH_DRAWW_ID           = "5a9499e0"
	COMMUNITY_DISTRIBUTE_ID = "96a9fd72"
	DOMAIN_REGISTER_ID      = "8acf0a70"
	DOMAIN_RENEW_ID         = "acf1a841"
	DOMAIN_WITH_DRAW_ID     = "3ccfd60b"
	SET_RATE                = "4afe2f80"
	TRANSFER_ERC20          = "a9059cbb"
	TRANSFER_ERC20_FROM     = "23b872dd"
	L1_L2_TRANSFER          = "439370b1"
	L2_L1_WITH_DRAW         = "cf0d9098"
)

var RewardContract crypto.AddressCoin
var CloudStorageProxyContract crypto.AddressCoin
var DomainRegisterContract crypto.AddressCoin

func InitRewardContract() {
	RewardContract = evmutils.AddressToAddressCoin(common.HexToAddress(config.RewardContractAddr).Bytes())
	CloudStorageProxyContract = evmutils.AddressToAddressCoin(common.HexToAddress(config.CloudStorageProxyContractAddr).Bytes())
	DomainRegisterContract = evmutils.AddressToAddressCoin(common.HexToAddress(config.BASE_REGISTAR_ADDR).Bytes())
}

func InitRewardContractToLight(str string) {
	config.AddrPre = str
	RewardContract = evmutils.AddressToAddressCoin(common.HexToAddress(config.RewardContractAddr).Bytes())
}

type Community struct {
	Addr        common.Address
	Wit         common.Address
	Vote        *big.Int
	Name        string
	Score       *big.Int
	BlockHeight *big.Int
	Ratio       uint32
}
type CommunityReward struct {
	Addr        common.Address
	Wit         common.Address
	Vote        *big.Int
	Name        string
	Score       *big.Int
	BlockHeight *big.Int
	Reward      *big.Int
	Rate        uint8
	LightCount  *big.Int
}

type CommunityRewardSort []CommunityReward

func (c CommunityRewardSort) Len() int {
	return len(c)
}

func (c CommunityRewardSort) Less(i, j int) bool {
	return c[i].Vote.Uint64() > c[j].Vote.Uint64()
}

func (c CommunityRewardSort) Swap(i, j int) {
	c[i], c[j] = c[j], c[i]
}

type WitnessDetail struct {
	Addr         common.Address
	Wit          common.Address
	Rate         uint8
	Reward       *big.Int
	RemainReward *big.Int
	Communitys   []CommunityReward
}
type Light struct {
	Addr        common.Address
	C           common.Address
	Vote        *big.Int
	Score       *big.Int
	Cname       string
	BlockHeight *big.Int
	Name        string
	Ratio       uint32
}

type LogRewardHistory struct {
	Into   common.Address
	From   common.Address
	Reward *big.Int
	Name   string
	Utype  uint8
}

type LogRewardHistoryV0 struct {
	Into   string
	From   string
	Reward *big.Int
	Name   string
	Utype  uint8
}

type LogEnsHistory struct {
	From   common.Address
	To     common.Address
	Amount *big.Int
}

type LogEnsHistoryV0 struct {
	Into   string
	From   string
	Amount *big.Int
}

type LogEventBlockRewardLogRewardHistory struct {
	Into   common.Address
	From   common.Address
	Reward *big.Int
}

type LogCommunityRewardPool struct {
	Community common.Address
	Reward    *big.Int
}

func SetRate(from crypto.AddressCoin, rate uint16) {
	engine.Log.Info("设置比例")
	block := new(environment.Block)
	var (
		evmErr error
		result vm.ExecuteResult
	)
	engine.Log.Info("719 %s", RewardContract.B58String())
	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), block)
	vmRun.SetStorage(RewardContract)

	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	//创建合约，提前构建相应结构
	input, _ := abiObj.Pack("setRate", uint8(rate))
	result, _, evmErr = evm.Run(input, 100000, 1, 0, false, vmRun)
	//result, _, evmErr = vmRun.Run(input, 100000, 1, 0, false)
	isSuccess := true
	if evmErr != nil {
		isSuccess = false
		engine.Log.Info("见证人保存比例失败%s", evmErr.Error())
	}
	if result.ExitOpCode == opcodes.REVERT {
		isSuccess = false
		engine.Log.Info("见证人保存比例异常退出,revert")
	}
	if isSuccess {
		// 合约执行成功,缓存全局合约对象
		vmRun.CacheStorage(RewardContract)
	}
}

// 添加社区节点
func AddCommunity(witness, community crypto.AddressCoin, vote *big.Int, rate uint16) {
	block := new(environment.Block)
	var (
		evmErr error
		result vm.ExecuteResult
	)
	vmRun := evm.NewVmRun(community, RewardContract, []byte("0x1"), block)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	//创建合约，提前构建相应结构
	input, _ := abiObj.Pack("addCommunity",
		common.Address(evmutils.AddressCoinToAddress(witness)),
		common.Address(evmutils.AddressCoinToAddress(community)),
		vote,
		uint8(rate),
	)
	result, _, evmErr = vmRun.Run(input, 100000, 1, 0, false)
	if evmErr != nil {
		engine.Log.Info("添加社区节点失败%s", evmErr.Error())
	}
	if result.ExitOpCode == opcodes.REVERT {
		engine.Log.Info("添加社区节点异常退出,revert")
	}
}

// 删除社区节点
func DelCommunity(witness, community crypto.AddressCoin) {
	block := new(environment.Block)
	var (
		evmErr error
		result vm.ExecuteResult
	)
	vmRun := evm.NewVmRun(community, RewardContract, []byte("0x1"), block)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("delCommunity",
		common.Address(evmutils.AddressCoinToAddress(witness)),
		common.Address(evmutils.AddressCoinToAddress(community)),
	)
	result, _, evmErr = vmRun.Run(input, 100000, 1, 0, false)
	if evmErr != nil {
		engine.Log.Info("移除社区节点失败%s", evmErr.Error())
	}
	if result.ExitOpCode == opcodes.REVERT {
		engine.Log.Info("移除社区节点异常退出,revert")
	}
}

// 添加投票
func AddVote(community, light crypto.AddressCoin, vote *big.Int) {
	block := new(environment.Block)
	var (
		evmErr error
		result vm.ExecuteResult
	)
	vmRun := evm.NewVmRun(light, RewardContract, []byte("0x1"), block)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("addVote",
		common.Address(evmutils.AddressCoinToAddress(community)),
		common.Address(evmutils.AddressCoinToAddress(light)),
		vote,
	)
	result, _, evmErr = vmRun.Run(input, 100000, 1, 0, false)
	if evmErr != nil {
		engine.Log.Info("添加轻节点投票失败%s", evmErr.Error())
	}
	if result.ExitOpCode == opcodes.REVERT {
		engine.Log.Info("添加轻节点投票异常退出,revert")
	}
}

// 删除投票
func DelVote(light crypto.AddressCoin) {
	block := new(environment.Block)
	var (
		evmErr error
		result vm.ExecuteResult
	)
	vmRun := evm.NewVmRun(light, RewardContract, []byte("0x1"), block)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("delVote",
		common.Address(evmutils.AddressCoinToAddress(light)),
	)
	result, _, evmErr = vmRun.Run(input, 100000, 1, 0, false)
	if evmErr != nil {
		engine.Log.Info("移除轻节点投票失败%s", evmErr.Error())
	}
	if result.ExitOpCode == opcodes.REVERT {
		engine.Log.Info("移除轻节点投票异常退出,revert")
	}
}

// 构造分发奖励输入
func BuildDistributeInput(list []*crypto.AddressCoin, index, totalReward uint64) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	witnessList := []common.Address{}
	for _, v := range list {
		witnessList = append(witnessList, common.Address(evmutils.AddressCoinToAddress(*v)))
	}
	input, _ := abiObj.Pack("distribute", witnessList, big.NewInt(int64(index)), big.NewInt(int64(totalReward)))
	return input
}

// 构造社区节点质押输入
func BuildAddCommunityInput(witness crypto.AddressCoin, rate uint16, name string) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("addCommunity",
		common.Address(evmutils.AddressCoinToAddress(witness)),
		uint8(rate),
		name,
	)
	return input
}

// 构造轻节点投票输入
func BuildAddVoteInput(community crypto.AddressCoin) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("addVote",
		common.Address(evmutils.AddressCoinToAddress(community)),
	)
	return input
}

// 构造轻节点添加输入
func BuildAddLightInput(name string) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("addLight", name)
	return input
}
func BuildDelCommunity() []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("delCommunity")
	return input
}
func BuildDelVote(vote *big.Int) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("delVote", vote)
	return input
}
func BuildDelLight() []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("delLight")
	return input
}
func GetAddrState(from, addr crypto.AddressCoin) uint64 {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getAddrState", common.Address(evmutils.AddressCoinToAddress(addr)))

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("getAddrState", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 获取所有社区节点
func GetAllCommunity(from crypto.AddressCoin) []Community {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getAllCommunity")

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Community); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Community{}
	}
	out, err := abiObj.Unpack("getAllCommunity", result.ResultData)
	if err != nil {
		return []Community{}
	}
	out0 := *abi.ConvertType(out[0], new([]Community)).(*[]Community)
	resList := []Community{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 获取所有社区节点(包含奖励）
func GetAllCommunityReward(from crypto.AddressCoin) []CommunityReward {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getCommunityRewardList")

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]CommunityReward); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 90000000, 1, 0, false)
	if err != nil {
		return []CommunityReward{}
	}
	out, err := abiObj.Unpack("getCommunityRewardList", result.ResultData)
	if err != nil {
		return []CommunityReward{}
	}
	out0 := *abi.ConvertType(out[0], new([]CommunityReward)).(*[]CommunityReward)
	resList := []CommunityReward{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 获取节点奖励比例
func GetRewardRatio(from crypto.AddressCoin) (uint8, error) {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getRate")

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint8); ok {
	//		return out, nil
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0, err
	}
	out, err := abiObj.Unpack("getRate", result.ResultData)
	if err != nil {
		return 0, err
	}
	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0)

	return out0, err
}

// 根据地址列表获取社区节点情况
func GetCommunityList(list []crypto.AddressCoin) []Community {
	newList := []common.Address{}
	for _, v := range list {
		addr := common.Address(evmutils.AddressCoinToAddress(v))
		newList = append(newList, addr)
	}
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))

	input, _ := abiObj.Pack("getCommunityList", newList)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Community); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(list[0], RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Community{}
	}
	out, err := abiObj.Unpack("getCommunityList", result.ResultData)
	if err != nil {
		return []Community{}
	}
	out0 := *abi.ConvertType(out[0], new([]Community)).(*[]Community)
	resList := []Community{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 根据地址列表获取轻节点信息
func GetLightList(list []crypto.AddressCoin) []Light {
	newList := []common.Address{}
	for _, v := range list {
		addr := common.Address(evmutils.AddressCoinToAddress(v))
		newList = append(newList, addr)
	}
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getLightList", newList)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Light); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(list[0], RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Light{}
	}
	out, err := abiObj.Unpack("getLightList", result.ResultData)
	if err != nil {
		return []Light{}
	}
	out0 := *abi.ConvertType(out[0], new([]Light)).(*[]Light)
	resList := []Light{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 根据地址获取轻节点奖励
func GetNodeReward(address crypto.AddressCoin) uint64 {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("queryAllReward", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("queryAllReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 查询某见证人下属的社区节点列表
func GetCommunityListByWit(addr crypto.AddressCoin) []Community {
	witness := common.Address(evmutils.AddressCoinToAddress(addr))

	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))

	input, _ := abiObj.Pack("getCommunityListByWit", witness)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Community); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Community{}
	}
	out, err := abiObj.Unpack("getCommunityListByWit", result.ResultData)
	if err != nil {
		return []Community{}
	}
	out0 := *abi.ConvertType(out[0], new([]Community)).(*[]Community)
	resList := []Community{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 查询社区节点下面的轻节点投票
func GetLightListByC(addr crypto.AddressCoin) []Light {
	community := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getLightListByC", community)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Light); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Light{}
	}
	out, err := abiObj.Unpack("getLightListByC", result.ResultData)
	if err != nil {
		return []Light{}
	}
	out0 := *abi.ConvertType(out[0], new([]Light)).(*[]Light)
	resList := []Light{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 获取我未提现的奖励
func GetMyFrozenReward(addr crypto.AddressCoin) uint64 {
	rewardAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("remainReward", rewardAddr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("remainReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 获取我未提现的社区节点奖励
func GetMyCommunityFrozenReward(addr crypto.AddressCoin) uint64 {
	rewardAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("remainCReward", rewardAddr)
	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("remainCReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0.Uint64()
}

// 获取我未提现的轻节点奖励
func GetMyLightFrozenReward(addr crypto.AddressCoin) uint64 {
	rewardAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("remainLReward", rewardAddr)
	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("remainLReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0.Uint64()
}

// 获取所有轻节点---有待商榷
func GetAllLight(from crypto.AddressCoin, start, end *big.Int) []Light {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getAllLight", start, end)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.([]Light); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return []Light{}
	}
	out, err := abiObj.Unpack("getAllLight", result.ResultData)
	if err != nil {
		return []Light{}
	}
	out0 := *abi.ConvertType(out[0], new([]Light)).(*[]Light)
	resList := []Light{}
	for _, v := range out0 {
		if v.Addr != evmutils.ZeroAddress {
			resList = append(resList, v)
		}
	}

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, resList)

	return resList
}

// 获取我的质押
func GetMyDeposit(addr crypto.AddressCoin) uint64 {
	depositAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("deposit", depositAddr)
	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("deposit", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	return out0.Uint64()
}

// 获取见证者节点投票
func GetWitnessVote(addr crypto.AddressCoin) uint64 {
	witnessAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getWiteVote", witnessAddr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("getWiteVote", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 构造社区向轻节点分账奖励
func BuildCommunityDistributeInput() []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("communityDistribute")
	return input
}

// 构造云存储代理奖励
func BuildCloudStorageProxyRewardInput() []byte {
	abiObj, _ := abi.JSON(strings.NewReader(cloud.CLOUD_PROXY_ABI))
	input, _ := abiObj.Pack("resetVerify")
	return input
}

// 构造提现奖励输入
func BuildWithDrawRewardInput(value *big.Int, drawType uint64) []byte {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	var input []byte
	//社区节点提现
	if drawType == 1 {
		input, _ = abiObj.Pack("withDrawC", value)
	} else if drawType == 2 {
		input, _ = abiObj.Pack("withDrawL", value)
	} else {
		input, _ = abiObj.Pack("withDrawW", value)
	}

	return input
}

func UnPackLogRewardHistoryLog(contractEventInfo *go_protos.ContractEventInfo) LogRewardHistory {
	var log LogRewardHistory
	UnpackLog(&log, "LogRewardHistory", contractEventInfo)
	return log
}

func UnPackLogEnsHistoryLog(contractEventInfo *go_protos.ContractEventInfo) LogEnsHistory {
	var log LogEnsHistory
	UnpackEnsLog(&log, "Withdraw", contractEventInfo)
	return log
}

func UnPackLogCommunityRewardPool(contractEventInfo *go_protos.ContractEventInfo) LogCommunityRewardPool {
	var log LogCommunityRewardPool
	UnpackLog(&log, "LogCommunityRewardPool", contractEventInfo)
	return log
}

func UnpackLog(out interface{}, event string, contractEventInfo *go_protos.ContractEventInfo) error {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	if contractEventInfo.Topic != common.Bytes2Hex(abiObj.Events[event].ID.Bytes()) {
		return errors.New("事件签名不符")
	}
	eventData := contractEventInfo.EventData
	logData := eventData[len(eventData)-1]
	//if log.Topics[0] != _BlockReward.abi.Events[event].ID {
	//	return fmt.Errorf("event signature mismatch")
	//}
	if logData != "" {
		if err := abiObj.UnpackIntoInterface(out, event, common.Hex2Bytes(logData)); err != nil {
			return err
		}
	}
	var indexed abi.Arguments
	for _, arg := range abiObj.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	//去除掉第一个主题
	topics := []common.Hash{}
	for i := 0; i < len(eventData)-1; i++ {
		topics = append(topics, common.BytesToHash(common.Hex2Bytes(eventData[i])))
	}
	return abi.ParseTopics(out, indexed, topics)
}

func UnpackEnsLog(out interface{}, event string, contractEventInfo *go_protos.ContractEventInfo) error {
	abiObj, _ := abi.JSON(strings.NewReader(ens.REGISTRAR_ABI))
	if contractEventInfo.Topic != common.Bytes2Hex(abiObj.Events[event].ID.Bytes()) {
		return errors.New("事件签名不符")
	}
	eventData := contractEventInfo.EventData
	logData := eventData[len(eventData)-1]
	//if log.Topics[0] != _BlockReward.abi.Events[event].ID {
	//	return fmt.Errorf("event signature mismatch")
	//}
	if logData != "" {
		if err := abiObj.UnpackIntoInterface(out, event, common.Hex2Bytes(logData)); err != nil {
			return err
		}
	}
	var indexed abi.Arguments
	for _, arg := range abiObj.Events[event].Inputs {
		if arg.Indexed {
			indexed = append(indexed, arg)
		}
	}
	//去除掉第一个主题
	topics := []common.Hash{}
	for i := 0; i < len(eventData)-1; i++ {
		topics = append(topics, common.BytesToHash(common.Hex2Bytes(eventData[i])))
	}
	return abi.ParseTopics(out, indexed, topics)
}

// 获取奖励记录历史
func GetRewardHistoryLog(height uint64, txhash []byte) []LogRewardHistoryV0 {
	histories := []LogRewardHistoryV0{}
	key := append([]byte(config.DBKEY_BLOCK_EVENT), big.NewInt(int64(height)).Bytes()...)
	listBytes, err := db.LevelDB.GetDB().HGet(key, txhash)
	if err != nil {
		return histories
	}
	list := go_protos.ContractEventInfoList{}
	err = proto.Unmarshal(listBytes, &list)
	if err != nil {
		return histories
	}
	for _, v := range list.GetContractEvents() {
		historyLog := UnPackLogRewardHistoryLog(v)
		into := evmutils.AddressToAddressCoin(historyLog.Into.Bytes())
		var fromAddr string
		if historyLog.From == evmutils.ZeroAddress {
			fromAddr = ""
		} else {
			from := evmutils.AddressToAddressCoin(historyLog.From.Bytes())
			fromAddr = from.B58String()
		}

		if historyLog.Reward == nil || historyLog.Reward == new(big.Int) {
			historyLog.Reward = big.NewInt(0)
		}
		histories = append(histories, LogRewardHistoryV0{
			Into:   into.B58String(),
			From:   fromAddr,
			Reward: historyLog.Reward,
			Name:   historyLog.Name,
			Utype:  historyLog.Utype,
		})
	}
	return histories
}

// 获取域名交易记录历史
func GetEnsHistoryLog(height uint64, txhash []byte) []LogEnsHistoryV0 {
	histories := []LogEnsHistoryV0{}
	key := append([]byte(config.DBKEY_BLOCK_EVENT), big.NewInt(int64(height)).Bytes()...)
	listBytes, err := db.LevelDB.GetDB().HGet(key, txhash)
	if err != nil {
		return histories
	}
	list := go_protos.ContractEventInfoList{}
	err = proto.Unmarshal(listBytes, &list)
	if err != nil {
		return histories
	}
	for _, v := range list.GetContractEvents() {
		historyLog := UnPackLogEnsHistoryLog(v)
		into := evmutils.AddressToAddressCoin(historyLog.To.Bytes())
		var fromAddr string
		if historyLog.From == evmutils.ZeroAddress {
			fromAddr = ""
		} else {
			from := evmutils.AddressToAddressCoin(historyLog.From.Bytes())
			fromAddr = from.B58String()
		}

		if historyLog.Amount == nil || historyLog.Amount == new(big.Int) {
			historyLog.Amount = big.NewInt(0)
		}
		histories = append(histories, LogEnsHistoryV0{
			Into:   into.B58String(),
			From:   fromAddr,
			Amount: historyLog.Amount,
		})
	}
	return histories
}

// //交易类型对应函数 社区节点质押-
// //根据函数签名获取交易类型
//
//	func GetTxClassByMethodSign() {
//		classMap := make(map[string]int)
//
// }
func UnpackPayload(payload []byte) (uint64, uint64) {
	if len(payload) < 8 {
		return 0, 0
	}

	payloadHex := common.Bytes2Hex(payload)
	//payloadHex = "14174f3300000000000000000000000000000000000000000000000000000000720affaf"
	//payload = common.Hex2Bytes(payloadHex)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	//fmt.Println(common.Bytes2Hex(abiObj.Methods["distribute"].ID)) 5a9499e0
	//return 0, 0
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		return config.Wallet_tx_type_community_in, 0
	//社区节点质押
	case DEL_COMMUNITY_ID:
		return config.Wallet_tx_type_community_out, 0
	case ADD_VOTE_ID:
		return config.Wallet_tx_type_vote_in, 0
	case DEL_VOTE_ID:
		out, _ := abiObj.Methods["delVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_vote_out, out0.Uint64()
	case ADD_LIGHT_ID:
		return config.Wallet_tx_type_light_in, 0
	case DEL_LIGHT_ID:
		return config.Wallet_tx_type_light_out, 0
	case WITH_DRAWC_ID:
		out, _ := abiObj.Methods["withDrawC"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_C, out0.Uint64()
	case WITH_DRAWL_ID:
		out, _ := abiObj.Methods["withDrawL"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_L, out0.Uint64()
	case WITH_DRAWW_ID:
		out, _ := abiObj.Methods["withDrawW"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_W, out0.Uint64()
	case COMMUNITY_DISTRIBUTE_ID: // 社区分账包含社区和轻节点提取奖励,因此 WITH_DRAWC_ID,WITH_DRAWL_ID 废弃了
		return config.Wallet_tx_type_community_distribute, 0
	case DOMAIN_REGISTER_ID:
		return config.Wallet_tx_type_domain_register, 0
	case DOMAIN_RENEW_ID:
		return config.Wallet_tx_type_domain_renew, 0
	case DOMAIN_WITH_DRAW_ID:
		return config.Wallet_tx_type_domain_withdraw, 0
	case L1_L2_TRANSFER: // 跨链l1到l2转账
		return config.Wallet_tx_type_l1_l2_transfer, 0
	case L2_L1_WITH_DRAW: // 跨链l2到l1提现
		return config.Wallet_tx_type_l2_l1_withdraw, 0

	default:
		return 0, 0
	}
}

func UnpackCustomPayload(payload []byte) (uint64, string, uint64) {
	if len(payload) < 8 {
		return 0, "", 0
	}

	payloadHex := common.Bytes2Hex(payload)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		return config.Wallet_tx_type_community_in, "", 0
	//社区节点质押
	case DEL_COMMUNITY_ID:
		return config.Wallet_tx_type_community_out, "", 0
	case ADD_VOTE_ID:
		return config.Wallet_tx_type_vote_in, "", 0
	case DEL_VOTE_ID:
		out, _ := abiObj.Methods["delVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_vote_out, "", out0.Uint64()
	case ADD_LIGHT_ID:
		return config.Wallet_tx_type_light_in, "", 0
	case DEL_LIGHT_ID:
		return config.Wallet_tx_type_light_out, "", 0
	case WITH_DRAWC_ID:
		out, _ := abiObj.Methods["withDrawC"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_C, "", out0.Uint64()
	case WITH_DRAWL_ID:
		out, _ := abiObj.Methods["withDrawL"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_L, "", out0.Uint64()
	case WITH_DRAWW_ID:
		out, _ := abiObj.Methods["withDrawW"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return config.Wallet_tx_type_reward_W, "", out0.Uint64()
	case COMMUNITY_DISTRIBUTE_ID: // 社区分账包含社区和轻节点提取奖励,因此 WITH_DRAWC_ID,WITH_DRAWL_ID 废弃了
		return config.Wallet_tx_type_community_distribute, "", 0
	case DOMAIN_REGISTER_ID:
		return config.Wallet_tx_type_domain_register, "", 0
	case DOMAIN_RENEW_ID:
		return config.Wallet_tx_type_domain_renew, "", 0
	case DOMAIN_WITH_DRAW_ID:
		return config.Wallet_tx_type_domain_withdraw, "", 0
	case TRANSFER_ERC20:
		abiObj, _ := abi.JSON(strings.NewReader(ERC20_ABI))
		out, _ := abiObj.Methods["transfer"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		out1 := *abi.ConvertType(out[1], new(big.Int)).(*big.Int)
		toAddr := evmutils.AddressToAddressCoin(out0.Bytes())
		return config.Wallet_tx_type_contract, toAddr.B58String(), out1.Uint64()
	case L1_L2_TRANSFER: // 跨链l1到l2转账
		return config.Wallet_tx_type_l1_l2_transfer, "", 0
	case L2_L1_WITH_DRAW: // 跨链l2到l1提现
		abiObj, _ := abi.JSON(strings.NewReader(cross.OUTBOX_ABI))
		out, _ := abiObj.Methods["withdraw"].Inputs.Unpack(payload[4:])
		value := *abi.ConvertType(out[2], new(big.Int)).(*big.Int)
		return config.Wallet_tx_type_l2_l1_withdraw, "", value.Uint64()
	default:
		return 0, "", 0
	}
}

func UnpackEnsPayload(payload []byte) (uint64, uint64) {
	if len(payload) < 8 {
		return 0, 0
	}

	payloadHex := common.Bytes2Hex(payload)
	//abiObj, _ := abi.JSON(strings.NewReader(ens.ENS_ABI))
	methodId := payloadHex[:8]
	switch methodId {
	case DOMAIN_REGISTER_ID:
		return config.Wallet_tx_type_domain_register, 0
	case DOMAIN_RENEW_ID:
		return config.Wallet_tx_type_domain_renew, 0
	case DOMAIN_WITH_DRAW_ID:
		return config.Wallet_tx_type_domain_withdraw, 0
	default:
		return 0, 0
	}
}

// 跨链币转账
func UnpackL1L2Payload(payload []byte) (uint64, uint64) {
	if len(payload) < 8 {
		return 0, 0
	}

	payloadHex := common.Bytes2Hex(payload)
	methodId := payloadHex[:8]
	switch methodId {
	case L1_L2_TRANSFER:
		return config.Wallet_tx_type_l1_l2_transfer, 0
	case L2_L1_WITH_DRAW:
		abiObj, _ := abi.JSON(strings.NewReader(cross.OUTBOX_ABI))
		//input, _ := abiObj.Pack("withdraw", txHash, l2BlockHash, value)
		out, _ := abiObj.Methods["withdraw"].Inputs.Unpack(payload[4:])
		value := *abi.ConvertType(out[2], new(big.Int)).(*big.Int)
		return config.Wallet_tx_type_l2_l1_withdraw, value.Uint64()
	default:
		return 0, 0
	}
}

// 解析ERC20相关
func UnpackErc20Payload(payload []byte) (uint64, crypto.AddressCoin, uint64) {
	if len(payload) < 8 {
		return 0, nil, 0
	}

	payloadHex := common.Bytes2Hex(payload)
	abiObj, _ := abi.JSON(strings.NewReader(ERC20_ABI))
	methodId := payloadHex[:8]
	switch methodId {
	case TRANSFER_ERC20:
		out, _ := abiObj.Methods["transfer"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		out1 := *abi.ConvertType(out[1], new(big.Int)).(*big.Int)
		toAddr := evmutils.AddressToAddressCoin(out0.Bytes())
		return config.Wallet_tx_type_contract, toAddr, out1.Uint64()
	case TRANSFER_ERC20_FROM:
		out, _ := abiObj.Methods["transferFrom"].Inputs.Unpack(payload[4:])
		out1 := *abi.ConvertType(out[1], new(common.Address)).(*common.Address)
		out2 := *abi.ConvertType(out[2], new(big.Int)).(*big.Int)
		toAddr := evmutils.AddressToAddressCoin(out1.Bytes())
		return config.Wallet_tx_type_contract, toAddr, out2.Uint64()

	default:
		return 0, nil, 0
	}
}

// 根据地址获取社区节点奖励
func GetCommunityNodeReward(address crypto.AddressCoin) uint64 {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("allCReward", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("allCReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 根据地址获取轻节点奖励
func GetLightNodeReward(address crypto.AddressCoin) uint64 {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("allLReward", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("allLReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 根据地址获取见证人身份节点奖励
func GetWitNodeReward(address crypto.AddressCoin) uint64 {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("allWReward", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("allWReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// 获取我未提现的见证人节点奖励
func GetMyWitFrozenReward(addr crypto.AddressCoin) uint64 {
	rewardAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("remainWReward", rewardAddr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("remainWReward", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

// vote_type,wit,isAdd
func UnpackPayloadV1(payload []byte) (uint16, crypto.AddressCoin, bool) {
	payloadHex := common.Bytes2Hex(payload)
	//payloadHex = "14174f3300000000000000000000000000000000000000000000000000000000720affaf"
	//payload = common.Hex2Bytes(payloadHex)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	//fmt.Println(common.Bytes2Hex(abiObj.Methods["distribute"].ID)) 5a9499e0
	//return 0, 0
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		out, _ := abiObj.Methods["addCommunity"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		wit := evmutils.AddressToAddressCoin(out0.Bytes())
		return 1, wit, true
	//社区节点质押
	case DEL_COMMUNITY_ID:
		return 1, nil, false
	case ADD_VOTE_ID:
		out, _ := abiObj.Methods["addVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		wit := evmutils.AddressToAddressCoin(out0.Bytes())
		return 2, wit, true
	case DEL_VOTE_ID:
		return 2, nil, false
	case ADD_LIGHT_ID:
		return 3, nil, true
	case DEL_LIGHT_ID:
		return 3, nil, false
	default:
		return 0, nil, false
	}
}

// vote_type,wit,isAdd
func UnpackPayloadCommunityRate(payload []byte) (crypto.AddressCoin, uint16) {
	payloadHex := common.Bytes2Hex(payload)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		out, _ := abiObj.Methods["addCommunity"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		out1 := *abi.ConvertType(out[1], new(uint8)).(*uint8)
		commAddr := evmutils.AddressToAddressCoin(out0.Bytes())
		return commAddr, uint16(out1)
	}
	return nil, 0
}

// vote_type,wit,isAdd
func isWitnessScoreOrVoteChanged(payload []byte) bool {
	payloadHex := common.Bytes2Hex(payload)
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		return true
	//社区节点质押
	case DEL_COMMUNITY_ID:
		return true
	case ADD_VOTE_ID:
		return true
	case DEL_VOTE_ID:
		return true
	case ADD_LIGHT_ID:
		return true
	case DEL_LIGHT_ID:
		return true
	default:
		return false
	}
}

// 根据轻节点地址获取对应见证人
func GetWitByL(address crypto.AddressCoin) string {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getWitByL", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(string); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return ""
	}
	out, err := abiObj.Unpack("getWitByL", result.ResultData)
	if err != nil {
		return ""
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	if out0 != evmutils.ZeroAddress {
		coin := evmutils.AddressToAddressCoin(out0.Bytes())
		//LightCache:更新轻节点缓存数据
		//lightcache.SetCache(input, coin.B58String())
		return coin.B58String()
	}
	return ""
}

// 根据社区节点地址获取对应见证人
func GetWitByC(address crypto.AddressCoin) string {
	addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getWitByC", addr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(string); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return ""
	}
	out, err := abiObj.Unpack("getWitByC", result.ResultData)
	if err != nil {
		return ""
	}
	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	if out0 != evmutils.ZeroAddress {
		coin := evmutils.AddressToAddressCoin(out0.Bytes())
		//LightCache:更新轻节点缓存数据
		//lightcache.SetCache(input, coin.B58String())
		return coin.B58String()
	}
	return ""
}

// 获取轻节点总数
func GetLightTotal(address crypto.AddressCoin) uint64 {
	//addr := common.Address(evmutils.AddressCoinToAddress(address))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getLightTotal")

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(uint64); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0
	}
	out, err := abiObj.Unpack("getLightTotal", result.ResultData)
	if err != nil {
		return 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0.Uint64())

	return out0.Uint64()
}

func UnpackPayloadForCheck(payload []byte) (uint16, crypto.AddressCoin, *big.Int, bool) {
	payloadHex := common.Bytes2Hex(payload)
	//payloadHex = "14174f3300000000000000000000000000000000000000000000000000000000720affaf"
	//payload = common.Hex2Bytes(payloadHex)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	//fmt.Println(common.Bytes2Hex(abiObj.Methods["distribute"].ID)) 5a9499e0
	//return 0, 0
	methodId := payloadHex[:8]
	switch methodId {
	case ADD_COMMUNITY_ID:
		out, _ := abiObj.Methods["addCommunity"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		wit := evmutils.AddressToAddressCoin(out0.Bytes())
		return 1, wit, big.NewInt(int64(config.Mining_vote)), true
	//社区节点质押
	case DEL_COMMUNITY_ID:
		return 1, nil, big.NewInt(int64(config.Mining_vote)), false
	case ADD_VOTE_ID:
		out, _ := abiObj.Methods["addVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
		wit := evmutils.AddressToAddressCoin(out0.Bytes())
		return 2, wit, big.NewInt(0), true
	case DEL_VOTE_ID:
		out, _ := abiObj.Methods["delVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return 2, nil, out0, false
	case ADD_LIGHT_ID:
		return 3, nil, big.NewInt(int64(config.Mining_light_min)), true
	case DEL_LIGHT_ID:
		return 3, nil, big.NewInt(int64(config.Mining_light_min)), false
	default:
		return 0, nil, big.NewInt(0), false
	}
}

// 获取轻节点详情
func GetLightDetail(addr crypto.AddressCoin) Light {
	list := GetLightList([]crypto.AddressCoin{addr})
	if len(list) > 0 {
		return list[0]
	}
	return Light{}
}

// 获取角色数量
func GetRoleTotal(address crypto.AddressCoin) (uint64, uint64) {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getRoleTotal")

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(lightcache.CacheGetRoleTotal); ok {
	//		return out.CommunityCount, out.LightCount
	//	}
	//}

	vmRun := evm.NewVmRun(address, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return 0, 0
	}
	out, err := abiObj.Unpack("getRoleTotal", result.ResultData)
	if err != nil {
		return 0, 0
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	out1 := *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, lightcache.CacheGetRoleTotal{
	//	CommunityCount: out0.Uint64(),
	//	LightCount:     out0.Uint64(),
	//})

	return out0.Uint64(), out1.Uint64()
}

// 批量获取奖励比例
func GetRewardRatioAndVoteByAddrs(from crypto.AddressCoin, addrs []common.Address) ([]uint8, []*big.Int, error) {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("getRateAndVoteByAddrs", addrs)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(lightcache.CacheGetRewardRatioAndVoteByAddrs); ok {
	//		return out.Rates, out.Votes, nil
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return nil, nil, err
	}
	out, err := abiObj.Unpack("getRateAndVoteByAddrs", result.ResultData)
	if err != nil {
		return nil, nil, err
	}
	out0 := *abi.ConvertType(out[0], new([]uint8)).(*[]uint8)
	out1 := *abi.ConvertType(out[1], new([]*big.Int)).(*[]*big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, lightcache.CacheGetRewardRatioAndVoteByAddrs{
	//	Rates: out0,
	//	Votes: out1,
	//})

	return out0, out1, err
}

// 获取见证人以及见证人下社区节点信息
func GetWitnessDetail(from crypto.AddressCoin) (WitnessDetail, bool) {
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	fromAddr := common.Address(evmutils.AddressCoinToAddress(from))
	input, _ := abiObj.Pack("getWitnessInfo", fromAddr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(WitnessDetail); ok {
	//		return out, true
	//	}
	//}

	vmRun := evm.NewVmRun(from, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return WitnessDetail{}, false
	}
	out, err := abiObj.Unpack("getWitnessInfo", result.ResultData)
	if err != nil {
		return WitnessDetail{}, false
	}
	out0 := *abi.ConvertType(out[0], new(WitnessDetail)).(*WitnessDetail)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0)

	return out0, true
}

// 获取社区奖励池
func GetCommunityRewardPool(addr crypto.AddressCoin) *big.Int {
	rewardAddr := common.Address(evmutils.AddressCoinToAddress(addr))
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	input, _ := abiObj.Pack("communityRewardPool", rewardAddr)

	//LightCache:读取轻节点缓存
	//if val, ok := lightcache.GetCache(input); ok {
	//	if out, ok := val.(*big.Int); ok {
	//		return out
	//	}
	//}

	vmRun := evm.NewVmRun(addr, RewardContract, []byte("0x1"), nil)
	result, _, err := vmRun.Run(input, 9000000, 1, 0, false)
	if err != nil {
		return big.NewInt(0)
	}
	out, err := abiObj.Unpack("communityRewardPool", result.ResultData)
	if err != nil {
		return big.NewInt(0)
	}
	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	//LightCache:更新轻节点缓存数据
	//lightcache.SetCache(input, out0)

	return out0
}

func UnpackReward(payload []byte) (string, interface{}) {
	payloadHex := common.Bytes2Hex(payload)
	abiObj, _ := abi.JSON(strings.NewReader(REWARD_RATE_ABI))
	methodId := payloadHex[:8]
	switch methodId {
	case DEL_VOTE_ID:
		out, _ := abiObj.Methods["delVote"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
		return DEL_VOTE_ID, out0.Uint64()
	case SET_RATE:
		out, _ := abiObj.Methods["setRate"].Inputs.Unpack(payload[4:])
		out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)
		return SET_RATE, out0
	default:
		return "", 0
	}
}
