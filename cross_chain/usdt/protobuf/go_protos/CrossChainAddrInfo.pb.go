// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: CrossChainAddrInfo.proto

//包名，通过protoc生成时go文件时

package go_protos

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CrossChainAddrInfo struct {
	Purpose              uint32   `protobuf:"varint,1,opt,name=Purpose,proto3" json:"Purpose,omitempty"`
	CoinType             uint32   `protobuf:"varint,2,opt,name=CoinType,proto3" json:"CoinType,omitempty"`
	Account              uint32   `protobuf:"varint,3,opt,name=Account,proto3" json:"Account,omitempty"`
	Change               uint32   `protobuf:"varint,4,opt,name=Change,proto3" json:"Change,omitempty"`
	Index                uint32   `protobuf:"varint,5,opt,name=Index,proto3" json:"Index,omitempty"`
	AddrStr              string   `protobuf:"bytes,6,opt,name=AddrStr,proto3" json:"AddrStr,omitempty"`
	AddrBs               []byte   `protobuf:"bytes,7,opt,name=AddrBs,proto3" json:"AddrBs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CrossChainAddrInfo) Reset()         { *m = CrossChainAddrInfo{} }
func (m *CrossChainAddrInfo) String() string { return proto.CompactTextString(m) }
func (*CrossChainAddrInfo) ProtoMessage()    {}
func (*CrossChainAddrInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_44359185ce6134fa, []int{0}
}
func (m *CrossChainAddrInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainAddrInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainAddrInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainAddrInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainAddrInfo.Merge(m, src)
}
func (m *CrossChainAddrInfo) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainAddrInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainAddrInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainAddrInfo proto.InternalMessageInfo

func (m *CrossChainAddrInfo) GetPurpose() uint32 {
	if m != nil {
		return m.Purpose
	}
	return 0
}

func (m *CrossChainAddrInfo) GetCoinType() uint32 {
	if m != nil {
		return m.CoinType
	}
	return 0
}

func (m *CrossChainAddrInfo) GetAccount() uint32 {
	if m != nil {
		return m.Account
	}
	return 0
}

func (m *CrossChainAddrInfo) GetChange() uint32 {
	if m != nil {
		return m.Change
	}
	return 0
}

func (m *CrossChainAddrInfo) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *CrossChainAddrInfo) GetAddrStr() string {
	if m != nil {
		return m.AddrStr
	}
	return ""
}

func (m *CrossChainAddrInfo) GetAddrBs() []byte {
	if m != nil {
		return m.AddrBs
	}
	return nil
}

func init() {
	proto.RegisterType((*CrossChainAddrInfo)(nil), "go_protos.CrossChainAddrInfo")
}

func init() { proto.RegisterFile("CrossChainAddrInfo.proto", fileDescriptor_44359185ce6134fa) }

var fileDescriptor_44359185ce6134fa = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x70, 0x2e, 0xca, 0x2f,
	0x2e, 0x76, 0xce, 0x48, 0xcc, 0xcc, 0x73, 0x4c, 0x49, 0x29, 0xf2, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x4c, 0xcf, 0x8f, 0x07, 0xb3, 0x8a, 0x95, 0x8e, 0x30, 0x72,
	0x09, 0x61, 0xaa, 0x13, 0x92, 0xe0, 0x62, 0x0f, 0x28, 0x2d, 0x2a, 0xc8, 0x2f, 0x4e, 0x95, 0x60,
	0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x82, 0x71, 0x85, 0xa4, 0xb8, 0x38, 0x9c, 0xf3, 0x33, 0xf3, 0x42,
	0x2a, 0x0b, 0x52, 0x25, 0x98, 0xc0, 0x52, 0x70, 0x3e, 0x48, 0x97, 0x63, 0x72, 0x72, 0x7e, 0x69,
	0x5e, 0x89, 0x04, 0x33, 0x44, 0x17, 0x94, 0x2b, 0x24, 0xc6, 0xc5, 0xe6, 0x9c, 0x91, 0x98, 0x97,
	0x9e, 0x2a, 0xc1, 0x02, 0x96, 0x80, 0xf2, 0x84, 0x44, 0xb8, 0x58, 0x3d, 0xf3, 0x52, 0x52, 0x2b,
	0x24, 0x58, 0xc1, 0xc2, 0x10, 0x0e, 0xd8, 0x9c, 0x94, 0x94, 0xa2, 0xe0, 0x92, 0x22, 0x09, 0x36,
	0x05, 0x46, 0x0d, 0xce, 0x20, 0x18, 0x17, 0x64, 0x0e, 0x88, 0xe9, 0x54, 0x2c, 0xc1, 0xae, 0xc0,
	0xa8, 0xc1, 0x13, 0x04, 0xe5, 0x39, 0xc9, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3,
	0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0x71, 0xeb, 0xe9, 0xc3, 0x7d, 0x99, 0xc4,
	0x06, 0xa6, 0x8d, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0x45, 0x76, 0xb8, 0x3a, 0x13, 0x01, 0x00,
	0x00,
}

func (m *CrossChainAddrInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainAddrInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainAddrInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.AddrBs) > 0 {
		i -= len(m.AddrBs)
		copy(dAtA[i:], m.AddrBs)
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(len(m.AddrBs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.AddrStr) > 0 {
		i -= len(m.AddrStr)
		copy(dAtA[i:], m.AddrStr)
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(len(m.AddrStr)))
		i--
		dAtA[i] = 0x32
	}
	if m.Index != 0 {
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x28
	}
	if m.Change != 0 {
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x20
	}
	if m.Account != 0 {
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(m.Account))
		i--
		dAtA[i] = 0x18
	}
	if m.CoinType != 0 {
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x10
	}
	if m.Purpose != 0 {
		i = encodeVarintCrossChainAddrInfo(dAtA, i, uint64(m.Purpose))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChainAddrInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChainAddrInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CrossChainAddrInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Purpose != 0 {
		n += 1 + sovCrossChainAddrInfo(uint64(m.Purpose))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainAddrInfo(uint64(m.CoinType))
	}
	if m.Account != 0 {
		n += 1 + sovCrossChainAddrInfo(uint64(m.Account))
	}
	if m.Change != 0 {
		n += 1 + sovCrossChainAddrInfo(uint64(m.Change))
	}
	if m.Index != 0 {
		n += 1 + sovCrossChainAddrInfo(uint64(m.Index))
	}
	l = len(m.AddrStr)
	if l > 0 {
		n += 1 + l + sovCrossChainAddrInfo(uint64(l))
	}
	l = len(m.AddrBs)
	if l > 0 {
		n += 1 + l + sovCrossChainAddrInfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCrossChainAddrInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChainAddrInfo(x uint64) (n int) {
	return sovCrossChainAddrInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CrossChainAddrInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainAddrInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainAddrInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainAddrInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purpose", wireType)
			}
			m.Purpose = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Purpose |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			m.Account = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Account |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrStr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainAddrInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainAddrInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrStr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddrBs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCrossChainAddrInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainAddrInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AddrBs = append(m.AddrBs[:0], dAtA[iNdEx:postIndex]...)
			if m.AddrBs == nil {
				m.AddrBs = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainAddrInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainAddrInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChainAddrInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChainAddrInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainAddrInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChainAddrInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossChainAddrInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossChainAddrInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossChainAddrInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChainAddrInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossChainAddrInfo = fmt.Errorf("proto: unexpected end of group")
)
